<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LRU on 时间飘过</title>
    <link>https://weedge.github.io/tags/lru/</link>
    <description>Recent content in LRU on 时间飘过</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 08 Nov 2021 10:26:23 +0800</lastBuildDate><atom:link href="https://weedge.github.io/tags/lru/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>缓存淘汰策略-LRU</title>
      <link>https://weedge.github.io/post/lru/</link>
      <pubDate>Mon, 08 Nov 2021 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/lru/</guid>
      <description>&lt;h2 id=&#34;序言&#34;&gt;序言&lt;/h2&gt;
&lt;p&gt;​	在计算机硬件中缓/内存设计是用来机器启动的时候加载程序，分配运行空间数据，停机，缓/内存中的数据会丢失；磁盘用来持久化存储，提供数据加载到内存中，内存的读写速度比磁盘快很多，以下是&lt;a href=&#34;https://research.google/people/jeff/&#34;&gt;Jeff Dean&lt;/a&gt; 09年 ppt &lt;a href=&#34;http://videolectures.net/wsdm09_dean_cblirs/&#34;&gt;Challenges in Building Large-Scale Information Retrieval Systems&lt;/a&gt;  &amp;ldquo;&lt;a href=&#34;http://brenocon.com/dean_perf.html&#34;&gt;Numbers Everyone Should Know&lt;/a&gt;&amp;rdquo; 中提供的数据(虽然过去10多年了)， 读取1MB数据，从内存中读比从磁盘中读取快100+倍；但是缓/内存的空间比磁盘空间少，为了加快数据的访问，减少缓存/磁盘io，大概分为三种：1. 可以提前将数据从磁盘加载到内/缓存中(page)、2. 内/缓存miss从下层存储获取数据(cache,pool,page)、3. 无需加载，直接内/缓存evict；如果提供给进程的最大内/缓存资源到了最大限制，需要对存储资源进行evict操作，常用的evict策略可以从&lt;a href=&#34;https://en.wikipedia.org/wiki/Cache_replacement_policies&#34;&gt;Cache_replacement_policies&lt;/a&gt;中了解；有关特定于分页的详细算法，请参阅&lt;a href=&#34;https://en.wikipedia.org/wiki/Page_replacement_algorithm&#34;&gt;页面替换算法&lt;/a&gt;；有关特定于 CPU 和 RAM 之间缓存的详细算法，请参阅&lt;a href=&#34;https://en.wikipedia.org/wiki/CPU_cache&#34;&gt;CPU 缓存&lt;/a&gt;。这里主要关注LRU evict相关策略。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
