<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 时间飘过</title>
    <link>https://weedge.github.io/post/</link>
    <description>Recent content in Posts on 时间飘过</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 02 Dec 2021 12:26:23 +0800</lastBuildDate><atom:link href="https://weedge.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pool</title>
      <link>https://weedge.github.io/post/pool/</link>
      <pubDate>Thu, 02 Dec 2021 12:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/pool/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;平常想到不浪费资源的方法，是对资源进行复用，减少资源消耗和浪费(小时候大人经常在吃饭时说的那句话)；在计算机工程领域，存在大量消耗资源的场景，多路复用和池化是最常用的性能优化手段；多路复用存在系统调用，由系统内核层面去支持优化(I/O多路复用select/poll/epoll/kqueue)，而池化可以应用用户使用层面来优化；池化(&lt;a href=&#34;https://en.wikipedia.org/wiki/Pool_(computer_science)&#34;&gt;pool&lt;/a&gt;)是一种资源复用优化技术，减少资源回收处理，提高资源利用率，资源最好是固定大小，如果在复用资源过程中，资源在逐渐增大，一直复用，也会导致资源消耗过多，到了一定大小之后，通过系统释放掉；在程序启动的时候提前申请加载好资源放到池子中，运行时根据不同的调度管理资源策略从池子中获取准备好的资源，或者运行时新建资源放入池子中，用户程序中进行自定义处理操作，操作完之后将资源重新放入池子中复用，有些资源可以动态扩缩； 资源主要是程序运行时对象，当然这些操作资源实际都是分配在虚拟内存空间的内核空间和用户空间中，比如，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B&#34;&gt;进程&lt;/a&gt;(process &lt;a href=&#34;https://en.wikipedia.org/wiki/Process_control_block&#34;&gt;PCB&lt;/a&gt; 内核态)、&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%9F%B7%E8%A1%8C%E7%B7%92&#34;&gt;线程&lt;/a&gt;(thread &lt;a href=&#34;https://en.wikipedia.org/wiki/Thread_control_block&#34;&gt;TCB&lt;/a&gt; 内核态)、&lt;a href=&#34;https://zh.wikipedia.org/zh-hans/%E5%8D%8F%E7%A8%8B&#34;&gt;协程&lt;/a&gt;(coroutine 用户态)为载体的工作任务(work task 在用户态分配栈空间)；内存对象(heap object)，长链接(tcp connect) 等；主要对这些资源对象进行池化技术进行介绍，了解池化对应场景。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WAL</title>
      <link>https://weedge.github.io/post/wal/</link>
      <pubDate>Sun, 21 Nov 2021 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/wal/</guid>
      <description>&lt;h2 id=&#34;序言&#34;&gt;序言&lt;/h2&gt;
&lt;p&gt;​	数据落地之前，如果出现持久化存储引擎实例重启，或者服务当机重启，如何进行故障恢复（Crash Recovery）呢？数据写操作增删改，这些操作状态数据，是如何保证事务中原子性和持久性的呢？ 这些问题数据大拿们提出了&lt;a href=&#34;https://en.wikipedia.org/wiki/Algorithms_for_Recovery_and_Isolation_Exploiting_Semantics&#34;&gt;Algorithms for Recovery and Isolation Exploiting Semantics&lt;/a&gt; ，基于语义的恢复与隔离算法,现代数据库的基础理论；当前主流关系型数据在事务实现上都受到该理论的影响，其中有两种故障恢复的方法： 预写日志(write-ahead logging (WAL) ) 和shadow-page technique；shadow-page 方法简单介绍就是每次事务操作，以page为单位，写时复制的方式，分为Current和Shadow，类似主备的形式，如果commit成功，Current中的page合并到 Shadow中; 如果abort不成功丢弃Current的page; 如果Crash了，从Shadow中的page恢复，对所有未提交事务的回滚操作； 由于shadow-page技术的实现以page为单位，page内无法并发操作，commit/回滚时会有大量垃圾回收操作；本文主要介绍WAL，以及对应持久化存储引擎的实现机制介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计-配置平台</title>
      <link>https://weedge.github.io/post/conf/</link>
      <pubDate>Thu, 18 Nov 2021 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/conf/</guid>
      <description>&lt;h3 id=&#34;介绍&#34;&gt;介绍&lt;/h3&gt;
&lt;p&gt;业务服务在启动时加载配置，配置分为静态配置和动态配置，静态配置如服务监听的端口，日志路径，访问依赖服务单元不同云(region / zone) 域名地址等；动态配置包括业务配置，流程管理配置，策略配置等；静态配置服务启动之后不会更改，而动态配置在服务启动运行时可以动态热加载；将配置的内容和版本进行分离，关注配置的管理而无需关注配置的内容，配置内容用户可以自定义配置内容，使用json-schema进行校验，提供自定义配置内容json给后台ui前端进行单个整体配置的交互，配置后台只需加载json-schema进行校验提交内容，json-schema由用户上传提供地址即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>工具盒子-ping/traceroute</title>
      <link>https://weedge.github.io/post/ping/</link>
      <pubDate>Mon, 15 Nov 2021 14:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/ping/</guid>
      <description>&lt;h2 id=&#34;序言&#34;&gt;序言&lt;/h2&gt;
&lt;p&gt;在访问网络是否ok, 通常喜欢用ping 命令来访问&lt;code&gt;ping www.baidu.com&lt;/code&gt; 看是否出现超时；ping在不同的操作系统平台实现方式差不多，底层都是用ICMP协议，每次发ICMP ECHO_REQUEST packet (IP地址/Host, ttl，icmp_seq序列号，&lt;a href=&#34;https://en.wikipedia.org/wiki/Round-trip_delay&#34;&gt;RTD/RTT&lt;/a&gt;(往返延时)记录 ),  运行结束后统计每个RTT, 最大RTT, 最小RTT, 平均RTT, &lt;a href=&#34;https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford&#34;&gt;标准偏差&lt;/a&gt;RTT, 发送/接受packets总数，丢包率 等数据，ping工具在PING(8)中的定义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The ping utility uses the ICMP protocol&amp;rsquo;s mandatory ECHO_REQUEST datagram to elicit an ICMP ECHO_RESPONSE from a host or gateway.  ECHO_REQUEST datagrams  (&amp;ldquo;pings&#39;&#39;) have an IP and ICMP header, followed by a &amp;ldquo;struct timeval&#39;&#39; and then an arbitrary number of &amp;ldquo;pad&amp;rdquo; bytes used to fill out the packet.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>缓存淘汰策略-LRU</title>
      <link>https://weedge.github.io/post/lru/</link>
      <pubDate>Mon, 08 Nov 2021 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/lru/</guid>
      <description>&lt;h2 id=&#34;序言&#34;&gt;序言&lt;/h2&gt;
&lt;p&gt;​	在计算机硬件中缓/内存设计是用来机器启动的时候加载程序，分配运行空间数据，停机，缓/内存中的数据会丢失；磁盘用来持久化存储，提供数据加载到内存中，内存的读写速度比磁盘快很多，以下是&lt;a href=&#34;https://research.google/people/jeff/&#34;&gt;Jeff Dean&lt;/a&gt;  &amp;ldquo;&lt;a href=&#34;http://brenocon.com/dean_perf.html&#34;&gt;Numbers Everyone Should Know&lt;/a&gt;&amp;rdquo; 中提供的数据(虽然过去10多年了)， 读取1MB数据，从内存中读比从磁盘中读取快100+倍；但是缓/内存的空间比磁盘空间少，为了加快数据的访问，减少缓存/磁盘io，大概分为三种：1. 可以提前将数据从磁盘加载到内/缓存中(page)、2. 内/缓存miss从下层存储获取数据(cache,pool,page)、3. 无需加载，直接内/缓存evict；如果提供给进程的最大内/缓存资源到了最大限制，需要对存储资源进行evict操作，常用的evict策略可以从&lt;a href=&#34;https://en.wikipedia.org/wiki/Cache_replacement_policies&#34;&gt;Cache_replacement_policies&lt;/a&gt;中了解；有关特定于分页的详细算法，请参阅&lt;a href=&#34;https://en.wikipedia.org/wiki/Page_replacement_algorithm&#34;&gt;页面替换算法&lt;/a&gt;；有关特定于 CPU 和 RAM 之间缓存的详细算法，请参阅&lt;a href=&#34;https://en.wikipedia.org/wiki/CPU_cache&#34;&gt;CPU 缓存&lt;/a&gt;。这里主要关注LRU evict相关策略。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>服务改造简述</title>
      <link>https://weedge.github.io/post/servicetransformation/</link>
      <pubDate>Tue, 26 Oct 2021 22:04:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/servicetransformation/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;随着前期业务迭代不断增多，会留下一些技术债务；用户不断累计增加，整体DAU,MAU,PV/UV的不断上升，为了符合根据组织结构和业务需求更加稳定健康的发展，需要对业务服务进行改造/重构；采用团队适合的语言开发，将服务进行分层，抽象底层模型，分离出不变/易变业务逻辑；业务改造和基础建设服务升级（整体系统认知的改变）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>工程师六大意识</title>
      <link>https://weedge.github.io/post/rd/</link>
      <pubDate>Sat, 02 Oct 2021 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/rd/</guid>
      <description>&lt;h2 id=&#34;1时间意识&#34;&gt;&lt;strong&gt;1.时间意识&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;​    时间意识的终极目标是按时保质的完成工作。时间是一种宝贵的资源，由于每天工作时间的有限的而需要处理事情是复杂多变性的，为了按时保质的完成工作，我们首先需要有极强的时间意识，使用科学的时间管理策略。总的来说，时间管理就是让我们更有计划的知道需要做什么，什么时候做什么，而时间管理的难点为：事情具有突发性、完成时间难以预算性、执行力和预期不符合。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>组织引擎</title>
      <link>https://weedge.github.io/post/zborg/</link>
      <pubDate>Sun, 05 Sep 2021 21:04:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/zborg/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景：&lt;/h2&gt;
&lt;p&gt;教学直播间场景多样性，按年龄段区分辅导后台角色，构成整个教学课中直播和互动的多样性，为了快速支持业务发展，导致后端服务接口过多，不易维护，统一管理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>网络模型</title>
      <link>https://weedge.github.io/post/poller/</link>
      <pubDate>Thu, 02 Sep 2021 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/poller/</guid>
      <description>&lt;p&gt;看了一些开源的网络I/O模型框架库，尝试着按照理解简单实现一个相对简单的网络I/O模型框架，类似netty的reactor模型。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>教学直播概括</title>
      <link>https://weedge.github.io/post/jxzb/</link>
      <pubDate>Wed, 01 Sep 2021 22:04:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/jxzb/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景：&lt;/h2&gt;
&lt;p&gt;不同于常规的主播互动直播；教学直播，面向k12人群，&lt;/p&gt;
&lt;p&gt;前期会有课前的准备工作比如课程创建，学生购买数据，老师课件，试卷题目的准备；&lt;/p&gt;
&lt;p&gt;双师模式：学生会分配给不同的辅导老师，辅导老师会对学生进行分班处理，课中也会有学生选组上课互动的场景，辅导老师也可以给学生上课，也会在后台进行跟课，监督学生上课；&lt;/p&gt;
&lt;p&gt;相对于常规的主播互动，会模拟线下上课的场景到线上课中直播，形成一套线上教学直播间场景模式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>直播系列之消息模块演进</title>
      <link>https://weedge.github.io/post/jxzbim/</link>
      <pubDate>Mon, 02 Nov 2020 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/jxzbim/</guid>
      <description>整体服务框架</description>
    </item>
    
    <item>
      <title>2019 TODO</title>
      <link>https://weedge.github.io/post/2019todo/</link>
      <pubDate>Sat, 26 Jan 2019 01:16:30 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/2019todo/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt; 2018年感觉过的好快，时间荏苒，有些事和人，感觉在2018变化很大；人都是有欲望的，在欲望的驱使下，去实现自己的目标，其中有失败，有成功，还有一直在路上前行的；每年给自己定的目标要么期望太高，要么随遇而安，到头来给自己的感觉是不太务实，有点好高骛远了和缺乏动力；但是如果没有梦想和目标，和咸鱼有什么分别呢？所以把2019年的新年目标任务写下来，给自己立个flag，实施准则：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;低头看书学习做事，抬头思考总结做人~&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>屏蔽macbook内置键盘</title>
      <link>https://weedge.github.io/post/mackeyboard-hhkb/</link>
      <pubDate>Sat, 19 Jan 2019 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/mackeyboard-hhkb/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;  昨天晚上和女友争吵，不小心把水洒在macbook的键盘上了，当时没有及时关机烘干，直接就把本给关上了，导致今天早上起来发现键盘按z左边的shift键失灵，有时候一直重复z键，过了一段时间z键失灵，还有其他几个键也失灵了，网上搜了一下，有可能是排线的原因，找官网修理一下, 估计也得300到1000不等；想想这些维修费用都可以买个键盘了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>id生成</title>
      <link>https://weedge.github.io/post/idgen/</link>
      <pubDate>Tue, 12 Dec 2017 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/idgen/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;  用户业务数据增长过快，比如文章评论系统，feed流系统，订单系统；数据的存放模型需要从主从的单机单库 演变成 分布式集群数据库； 分库分表的数据查询需用到全局唯一标识的id来查询业务，比如莫个feed的评论数据、推送消息、购物订单、活动优惠劵等等都需要进行唯一ID标识；以便分布式存储(mysql,nosql,newsql)索引(b+tree, LSMtree,inverted index)快速查询；至于数据一致性通过约定规范协议保证(强：类Paxos算法/raft算法，弱: mq) 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang学习笔记</title>
      <link>https://weedge.github.io/post/golang/</link>
      <pubDate>Wed, 01 Nov 2017 01:16:30 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/golang/</guid>
      <description>&lt;p&gt;刚开始接触golang的时候是在大学时候，当时大概是2010年左右，对这门新语言比较好奇，但是没有深入去了解，只是道听途说这门语言在并发处理上很方便，对于协程这个东西也是第一次听说。自从工作之后，就一直没有接触过这门语言,最近公司想往golang上转，开发新的项目平台，毕竟golang运行效率和开发效率都要比其他语言要简单方便很多(听说c++都快20了)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>更换博客</title>
      <link>https://weedge.github.io/post/use-hugo-blog/</link>
      <pubDate>Thu, 12 Oct 2017 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/use-hugo-blog/</guid>
      <description>&lt;p&gt;  博客有段时间一直没有跟新过了，说白了，就是太懒了，或者没有动力去push你去干好这件事情；看着以前的博客，寥寥无几的几篇，质量也不高；早上上班经常看一些公众号文章，有个作者每天坚持写一篇文章，都已经坚持了大半年了，从生活的思考记录，到技术的积累，而且输出的文章质量不错，至少自己读了之后会产生一些共鸣，或者学到一些知识点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;经常听到技术人总结的话：技术是一个积累的过程，从别人那里看到的，和自己去动手实现的是两回事，别人趟过的坑，你再重新踩一次，也许会遇到新的坑，这些踩过之后，把这些知识点和满坑方案记录下来，日积月累，是对以后是有帮助的。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>附近POI: geohash原理</title>
      <link>https://weedge.github.io/post/geohash/</link>
      <pubDate>Wed, 03 Jun 2015 00:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/geohash/</guid>
      <description>&lt;h3 id=&#34;问题&#34;&gt;问题&lt;/h3&gt;
&lt;p&gt;  现在吃穿住行的app大都有定位的功能；如何让手机app所在的定位寻找出附近的POI(Point of Interest)呢？至于用户手机是如何获取定位的可以自行Google/Baidu，有时间整理一下。&lt;/p&gt;
&lt;p&gt;地图上定位一个地方，通过经度(longitude)和纬度(latitude)来标记，由WGS84规定(为GPS全球定位系统使用而建立的坐标系统)；比如地球🌍作为一个球体，纬度是指&lt;code&gt;所在位置的纬线到地心的直线&lt;/code&gt;和&lt;code&gt;赤道的纬线到地心的直线&lt;/code&gt;的夹角，通常北纬为正，南纬为负；经度是指&lt;code&gt;所在位置的经线平面&lt;/code&gt;和&lt;code&gt;规定的本初子午线平面&lt;/code&gt;的夹角，以东为东经，以西为西经，通常东经为正，西经为负；&lt;/p&gt;
&lt;p&gt;一个地点的经度一般与它于协调世界时之间的时差相应：每天有24小时，而一个圆圈有360度，因此地球每小时自转15度。因此假如一个人的地方时比协调世界UTC(Coordinated Universal Time)时早3小时的话，那么他在东经45度左右，比如北京是在东经116左右，那时区+8作为中国标准时间CST(China Standard Time)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>工具盒子-GNU global</title>
      <link>https://weedge.github.io/post/gnu-global/</link>
      <pubDate>Sat, 15 Nov 2014 21:04:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/gnu-global/</guid>
      <description>&lt;h3 id=&#34;gnu-global&#34;&gt;gnu global&lt;/h3&gt;
&lt;p&gt;源码标记，浏览源码挺好用的工具,轻量级的，简单易用。 gtags类似ctags,但是效率比ctags高，具体比较查看&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/wiki/Comparison-with-Similar-Tools&#34;&gt;这里&lt;/a&gt;(OpenGrok使用相对比较复杂)，而且未来支持的语言也比较多。对Linux-2.6.32源码390M的文件进行标签产出289MB的标签文件。&lt;/p&gt;
&lt;p&gt;可以通过源码安装就OK &lt;!-- raw HTML omitted --&gt;wget &lt;a href=&#34;http://tamacom.com/global/global-6.3.2.tar.gz;&#34;&gt;http://tamacom.com/global/global-6.3.2.tar.gz;&lt;/a&gt; tar zxvf global-6.3.2.tar.gz; cd global-6.3.2; ./configure; make &amp;amp;&amp;amp; make install&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在需要查找的目录下运行&lt;!-- raw HTML omitted --&gt;gtags&lt;!-- raw HTML omitted --&gt;,会生成三个文件： GTAGS&amp;ndash;定义的函数变量； GRTAGS&amp;ndash;引用的函数变量； GPATH&amp;ndash;函数变量所在文件的路径。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>登泰山</title>
      <link>https://weedge.github.io/post/taishan/</link>
      <pubDate>Sun, 21 Sep 2014 22:04:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/taishan/</guid>
      <description>&lt;h2 id=&#34;登泰山看日出&#34;&gt;登泰山看日出&lt;/h2&gt;
&lt;p&gt;会当凌绝顶，一览众山小  &amp;ndash; 杜甫《望岳》&lt;br&gt;
平明登日观，举手开云关  &amp;ndash; 李白《游泰山》&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;出发&#34;&gt;出发&lt;/h3&gt;
&lt;p&gt;登泰山，一次突然做出的决定，木有看攻略，木有做啥子准备，备点衣服和一些吃的就走了。为了赶火车，提前下班打卡就从公司出发啦~（ps:哈哈，恰好周五公司发下午茶，多拿了一盒水果，感谢公司福利，~！~)。在南站与老宋汇合后，在车站吃了点晚餐就走了。&lt;br&gt;
而且定火车那天木有直达的列车，买了到济南西，然后转泰安的车票。就这么愉快的出发鸟~~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weedge/mypic/master/taishan/1.jpeg&#34; alt=&#34;出发&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>成都行</title>
      <link>https://weedge.github.io/post/chengdu/</link>
      <pubDate>Tue, 10 Dec 2013 01:16:30 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/chengdu/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;由于入职时间的改变，有几天的时间空闲下来了，本来就没有准备的行程，以前没有想过的户外运动，本来是想体验一把的，趁这段时间，和老宋说好过去玩后，当天晚上啥都没有准备，直接就A过去了。这一趟还是挺有意思的，写这篇的时候，此刻正在老宋住的地方，准备着回北京的路上，写完后，收拾心情，准备好好工作。人生也许有很多的第一次，才能使生活变得更加的有意义吧。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
