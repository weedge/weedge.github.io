<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>时间飘过</title>
    <link>https://weedge.github.io/</link>
    <description>Recent content on 时间飘过</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 26 Feb 2023 20:16:30 +0800</lastBuildDate>
    
        <atom:link href="https://weedge.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://weedge.github.io/about/</link>
      <pubDate>Sun, 20 Jan 2013 21:38:52 +0800</pubDate>
      
      <guid>https://weedge.github.io/about/</guid>
      
        <description>
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&#34;&gt;
&lt;style type=&#34;text/css&#34;&gt;.dark-theme .aplayer{background:#212121}.dark-theme .aplayer.aplayer-withlist .aplayer-info{border-bottom-color:#5c5c5c}.dark-theme .aplayer.aplayer-fixed .aplayer-list{border-color:#5c5c5c}.dark-theme .aplayer .aplayer-body{background-color:#212121}.dark-theme .aplayer .aplayer-info{border-top-color:#212121}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-title{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-author{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time{color:#eee}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#eee}.dark-theme .aplayer .aplayer-list{background-color:#212121}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb{background-color:#999}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb:hover{background-color:#bbb}.dark-theme .aplayer .aplayer-list li{color:#fff;border-top-color:#666}.dark-theme .aplayer .aplayer-list li:hover{background:#4e4e4e}.dark-theme .aplayer .aplayer-list li.aplayer-list-light{background:#6c6c6c}.dark-theme .aplayer .aplayer-list li .aplayer-list-index{color:#ddd}.dark-theme .aplayer .aplayer-list li .aplayer-list-author{color:#ddd}.dark-theme .aplayer .aplayer-lrc{text-shadow:-1px -1px 0 #666}.dark-theme .aplayer .aplayer-lrc:before{background:-moz-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:-webkit-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:linear-gradient(to bottom, #212121 0%, rgba(33,33,33,0) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr=&#39;#212121&#39;, endColorstr=&#39;#00212121&#39;,GradientType=0 )}.dark-theme .aplayer .aplayer-lrc:after{background:-moz-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:-webkit-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:linear-gradient(to bottom, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr=&#39;#00212121&#39;, endColorstr=&#39;#cc212121&#39;,GradientType=0 )}.dark-theme .aplayer .aplayer-lrc p{color:#fff}.dark-theme .aplayer .aplayer-miniswitcher{background:#484848}.dark-theme .aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#eee}&lt;/style&gt;
&lt;script src=&#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&#34;&gt;&lt;/script&gt;&lt;meting-js auto=&#34;https://music.163.com/#/playlist?id=2154992214&#34; theme=&#34;#2980b9&#34;&gt;&lt;/meting-js&gt;
&lt;h4 id=&#34;人生&#34;&gt;人生&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;“物来顺应，未来不迎，当时不杂，既过不恋” &amp;ndash; 曾国藩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Yesterday is a history, tomorrow is a mystery, only today is a gift, that is why we call it present. &amp;quot; &amp;ndash; 功夫熊猫 (inner peace)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;Hope is the good thing and maybe the best of things And no good things ever dies&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;
~ Andy Dufresne – Shawshank Redemption&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;规律&#34;&gt;规律&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;”路漫漫其修远兮，吾将上下而求索“ &amp;ndash; 屈原《离骚》&lt;/li&gt;
&lt;li&gt;&amp;ldquo;众里寻他千百度。蓦然回首，那人却在，灯火阑珊处&amp;rdquo; &amp;ndash; 辛弃疾《青玉案·元夕》&lt;/li&gt;
&lt;li&gt;&amp;ldquo;道生一，一生二，二生三，三生万物&amp;rdquo; &amp;ndash; 老子《&lt;a href=&#34;https://baike.baidu.com/item/%E9%81%93%E5%BE%B7%E7%BB%8F/327138&#34;&gt;道德经&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;&amp;ldquo;&lt;strong&gt;万物之始，大道至简，衍化至繁&lt;/strong&gt;&amp;rdquo; &amp;ndash; 老子《&lt;a href=&#34;https://baike.baidu.com/item/%E9%81%93%E5%BE%B7%E7%BB%8F/327138&#34;&gt;道德经&lt;/a&gt;》&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>OpenAI体验</title>
      <link>https://weedge.github.io/post/doraemon/openai/</link>
      <pubDate>Sun, 26 Feb 2023 20:16:30 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/doraemon/openai/</guid>
      
        <description>&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=1428273917&amp;auto=1&amp;height=66&#34;&gt;&lt;/iframe&gt;



&lt;p&gt;OpenAI chatGPT 很火，体验了一把，哇哦之后，心想这个会成为内容创造的辅助工具，目前大部分是通过搜索寻找来解答难题，以后可能收敛到具体应用场景中了，不过底层可能还是掌握大数据公司来提供模型资源。&lt;/p&gt;
&lt;p&gt;按适用方使用大致分为如下场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;企业ToB常应用在Saas办公软件，低代码，客服，生物医疗，教育当中，比如微软办公软件，notion等相关笔记软件, 飞书，钉钉，企业微信等办公聊天，文档，视屏会议等软件，以及银行智能客服，生物蛋白质生成和基因测序领域等等；付费模式，开放的模型Pass平台提供模型训练，以及微调，交互api等；按使用资源和更好的体验质量速度来收费，比如国内BAT；上层SaaS服务通过租户使用更多实用便利功能组合(三方资源和内部资源整合)来付费。&lt;/li&gt;
&lt;li&gt;ToC主要是UGC的场景，随着多模交互场景下的大模型出现，AIGC方面的应用应该会更多，普通玩家更多，想象空间应该也更大，这块比ToB要大的多，而且较为通用，有UGC大数据公司才可能出大模型吧，并且开放给上游应用玩家使用，按功能体验质量来付费；比如国内抖音，微信这些app应用，以及和企业合作的实验室。可能还会有其他好玩的智能硬件出现。&lt;/li&gt;
&lt;li&gt;可能还有数据库方向，结合用户经常输入查询，结合数据库产品特性进行智能补偿纠错优化推荐等，类似tabnine, &lt;a href=&#34;https://docs.github.com/en/copilot&#34;&gt;Copilot&lt;/a&gt; 这类型工具，反正上层交互类的场景应该都可以渗透到。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的概括玩家分为3种：底层大模型 -&amp;gt; 定制场景下的数据模型微调 -&amp;gt; 上层应用百花齐放；&lt;/p&gt;
&lt;p&gt;想象空间有限，未来是怎样，以上说的可能有误:)，anyway，Just Do IT~&lt;/p&gt;
&lt;p&gt;PS: 梯子不要选择香港，可以使用美国的节点；openai如何注册可以google一下，教程很多，注册的邮箱用的gmail，使用 &lt;a href=&#34;https://sms-activate.org/&#34;&gt;https://sms-activate.org/&lt;/a&gt; 代理接受短信验证码，可以选择🇮🇳印度。&lt;/p&gt;
&lt;p&gt;chatGPT体验挺有意思的，如果问一些理性逻辑相关的case, 比如自然语言处理怎么学习相关的语义，可以给出相同的参考标准答案，逻辑套路满满，而且还可以纠正错别字意图，(关于如何学习的模版套路，可以用来建个思维导图，然后自己填充学习内容笔记，或者ppt之类的等等)；如果问一些感性的case, 比如一段歌词，一首诗歌，会给出相应的场景，文字还挺优美的，一个字绝，懂你的。感觉AI很适合逻辑套路，但是人类的情感是很难琢磨的哈，人心难测嘛；当然提问也是比较重要的，也有些bad case，比如：&amp;ldquo;什么是快乐星球&amp;rdquo;，需要多沟通，让它理解上下文（只能意会不能言传-人类专属功能，它倒像个三体人），继续追问，会出现一本正经的错误回答，明明是胡歌，舒淇，张艺兴等小朋友~&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weedge/mypic/master/doraemon/openai-case.png&#34; alt=&#34;openai-case&#34;&gt;&lt;/p&gt;
&lt;p&gt;openai使用GPT模型(公开使用的是GPT-3以上), 底层具体对应的大模型已经训练好了，提供openAPI给应用开发者来进行微调模型使用。&lt;/p&gt;
&lt;p&gt;作为一个开发者，当然想在通过开放的api来使用openai模型啦；如果是研究人员，虽然木有大数据和服务器计算资源来玩，也可以使用openai开放的GPT-3以及以上的模型来微调。&lt;/p&gt;
&lt;p&gt;以下是chatGPT 对使用的回答(这个就相当于是智能客服场景)，提供的开放的(text/image/audio/video)多模交互api使用如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GPT-3, GPT-3.5 &amp;hellip; 模型，用于模型参数微调；文本补全，编辑；以及搜索(相关性排序)，聚类(相似性分组)，推荐(推荐相关文本)，异常检测(识别相关性很小的异常值)，多样性测试(分析相似性分布)，分类(最相似的标签分类)等embedding，通过向量列表表示，计算文本相关性(向量距离)；主要用于文本类交互，以及基于上下文聊天场景；&lt;/li&gt;
&lt;li&gt;Codex api 通过描述文本提示&lt;strong&gt;Prompt&lt;/strong&gt;生成对应代码；这个挺适合开发人员的，对于新语言的新手，结合ide，记事本通过Prompt提示词语来生成相关代码还是挺爽的，至少不用去google 来回找确认是否是需要方案代码，搜索则可以用于兜底方案；&lt;/li&gt;
&lt;li&gt;DALL-E /2 api 通过描述文本提示&lt;strong&gt;Prompt&lt;/strong&gt;生成图片或者编辑原始图片 ；插画，设计师 辅助类工具，大概构思草图；&lt;/li&gt;
&lt;li&gt;音频转换为文本, 使用开源大型 v2 &lt;a href=&#34;https://openai.com/blog/whisper/&#34;&gt;Whisper 模型&lt;/a&gt;。 这个用在硬件设备上挺好的，硬件操作系统如果有开放口子可以开发的话，直接就可以对接上赋能了。将音频转录成音频所使用的任何语言；将音频翻译并转录成英文；&lt;/li&gt;
&lt;li&gt;视频类的api暂时还没有；&lt;/li&gt;
&lt;li&gt;需要生成 &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;api-keys&lt;/a&gt; 用于api接口调用时使用；&lt;/li&gt;
&lt;li&gt;提供了不同开发语言的 &lt;a href=&#34;https://platform.openai.com/docs/libraries/community-libraries&#34;&gt;client库&lt;/a&gt; ，默认包括：python,nodejs, 还有其他语言三方包，比如golang: &lt;a href=&#34;https://github.com/sashabaranov/go-gpt3&#34;&gt;sashabaranov/go-gpt3&lt;/a&gt; ; 以及api 错误说明；&lt;/li&gt;
&lt;li&gt;可以在 &lt;a href=&#34;https://platform.openai.com/playground&#34;&gt;playground&lt;/a&gt; 中编辑描述文本提示&lt;strong&gt;Prompt&lt;/strong&gt;对模型接口调试测试，还可以用语音生成描述文本(speech to text)，适合端到端的语音智能设备；&lt;/li&gt;
&lt;li&gt;而且在 &lt;a href=&#34;https://platform.openai.com/examples&#34;&gt;openai examples&lt;/a&gt; 中提供各种应用场景样例和Q&amp;amp;A；&lt;/li&gt;
&lt;li&gt;文档中还介绍了最佳实践：&lt;a href=&#34;https://platform.openai.com/docs/guides/safety-best-practices&#34;&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;安全最佳实践&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;&lt;/a&gt; 和 &lt;a href=&#34;https://platform.openai.com/docs/guides/production-best-practices&#34;&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;生产最佳实践&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;&lt;/a&gt; ；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weedge/mypic/master/doraemon/openai.png&#34; alt=&#34;openai&#34;&gt;&lt;/p&gt;
&lt;p&gt;像国内BAT在这块也早已开始布局了，大概16,17年左右就已经开始搭建智能平台底座，只不过被国外chatGPT “大力出奇迹” 给引爆了；大模型的训练需要大量的数据和参数调整，而且需要消耗大量服务器计算资源，特别是GPU 。像百度的 &lt;a href=&#34;https://wenxin.baidu.com/&#34;&gt;文心大模型&lt;/a&gt; （塑造了一个二次元create大会） ; 中国素有基建狂魔之称，希望能在中国版的&amp;quot;大力神丸&amp;quot;上出奇迹。&lt;/p&gt;
&lt;p&gt;附学习demo:&lt;/p&gt;
&lt;p&gt;openai提供了开放接口，借这个AI东风，推进下工程方面的熟练。大部分是dev/app/fin ops工作，业务由应用场景和idea来决定。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;本地命令行交互&lt;/p&gt;
&lt;p&gt;目的：&lt;!-- raw HTML omitted --&gt;快速熟悉openai的调用接口进行参数设置， 或者对模型进行微调训练。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;源码地址：&lt;a href=&#34;https://github.com/weedge/craftsman/tree/main/doraemon/openai&#34;&gt;https://github.com/weedge/craftsman/tree/main/doraemon/openai&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;git clone  https://github.com/weedge/craftsman &amp;amp;&amp;amp; cd craftsman/doraemon/openai
# cmd chat Q&amp;amp;A
export OPENAI_API_SK=
make run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;web交互(使用AWS &lt;a href=&#34;https://serverlessland.com/&#34;&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/a&gt;  架构搭建)☁️智能底座+上层轻/微应用，适合快速迭代的业务，just code serverless biz logic handler func run on the could  &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html&#34;&gt;lambda runtime&lt;/a&gt;, like shell/c++/rust use &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-walkthrough.html&#34;&gt;custom runtime&lt;/a&gt; 特别是rust lambda runtime 是开源的，值得关注，对于使用运行时语言来进行无服务化平台化改造，比如数据模型训练是的pipeline，数据库cloud平台，而且在aws内部大量使用，Rust 已迅速成为大规模构建基础设施的关键语言，&lt;a href=&#34;https://firecracker-microvm.github.io/&#34;&gt;Firecracker&lt;/a&gt; 是一种开源虚拟化技术，为&lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt;和其他无服务器产品提供支持。 aws抽象出来的服务，复杂都留在后面，简单交互留给用户，按业务场景自由组装infrastructure。智能底座需要这样的抽象工程给上层应用赋能。&lt;/p&gt;
&lt;p&gt;目的： &lt;!-- raw HTML omitted --&gt;熟悉aws serverless 事件驱动整体架构，以及整体lambda runtime运行原理； 在数据库cloud 或者内部/外部pass平台场景中，提供给客户使用serverless来实现具体业务逻辑。aws在这块做的深入，通过学习以便这些思想用于实际工作场景中。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;源码地址：&lt;a href=&#34;https://github.com/weedge/craftsman/tree/main/cloud/aws/cdk/serverless-openai-chatbot&#34;&gt;https://github.com/weedge/craftsman/tree/main/cloud/aws/cdk/serverless-openai-chatbot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用aws无服务lambda系统设施架构如下：(push模块异步对接openai 推送结果，这里分不同开放语言，是为了熟悉lambda对不同语言runtime，具体语言根据公司组织应用场景而定，不过 golang挺适合push服务的，分channel治之)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weedge/mypic/master/doraemon/aws-serverless-openai-chatbot.drawio.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt;
&lt;p&gt;按照demo readme 配置好文件，后端服务可以一键部署这个demo应用，第一次部署过程可能比较长，主要是用docker容器来CI lambda不同语言所依赖的库，用于部署至aws lambda容器环境中；前段静态资源则需要手动配置, 看 &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/HostingWebsiteOnS3Setup.html&#34;&gt;Tutorial: Configuring a static website on Amazon S3&lt;/a&gt; 这个教程就可以，配置好后可提供对象存储S3域名使用，如果需要配置公司组织域名，使用CDN加速，则自行查看相关文档解决~&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;k8s部署方式&lt;/p&gt;
&lt;p&gt;目的：&lt;!-- raw HTML omitted --&gt;熟悉k8s资源工程化部署，了解整体生态， 熟练相关工具及原理。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;源码地址：&lt;a href=&#34;https://github.com/weedge/craftsman/tree/main/doraemon/ai-creator&#34;&gt;https://github.com/weedge/craftsman/tree/main/doraemon/ai-creator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tips: 技术上 不要把openAI 放大了，对于工程化方面来说只是多了一项方便调试的智能化接口，加上了更多的赋能，应用上玩出花，也只是在原有的产品功能上定制化数据场景模型的微调，至于算法模型，大部分都开源，关键是大数据场景下的训练资源调度调优，垂直领域场景下用于参数微调训练的数据吧；对边缘模型在边缘端自适应学习调优推理，占用少的资源就能快速响应的模型，可能离机器人智能不远了。&lt;/p&gt;
&lt;p&gt;附2 好玩的网站：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.notion.so/product/ai&#34;&gt;https://www.notion.so/product/ai&lt;/a&gt; 笔记思路智能套路&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.midjourney.com/&#34;&gt;https://www.midjourney.com/&lt;/a&gt; 需要注册Discord 下通过聊天命令交互 生成图片&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://piggy.to/&#34;&gt;https://piggy.to/&lt;/a&gt; ui设计师&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://soundraw.io/&#34;&gt;https://soundraw.io/&lt;/a&gt;  寻找音乐灵感&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://typeset.io/&#34;&gt;https://typeset.io/&lt;/a&gt; 读论文神器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;携手AI前行，效率优先，压缩时间成本~&lt;/p&gt;
&lt;p&gt;附3 openai 官方提供的应用类产品，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://chat.openai.com/&#34;&gt;chatGPT&lt;/a&gt;: 这个大家都知道一款火爆应用产品，发现社交永远是人类永恒需求哈；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://labs.openai.com/&#34;&gt;DALL·E 2&lt;/a&gt;：使用文本生成图片；有相关的提示文本推荐，体验更好；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.yabble.com/&#34;&gt;yabble&lt;/a&gt;：数据洞察(insights)，进行归纳终结，并且帮助规划日程，提出建议；小助手类型工具，网上有用来分析炒股的~；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openai.com/research/jukebox&#34;&gt;jukebox&lt;/a&gt;：使用文本生成音乐；涉及到音乐版权，数据资源可能不好弄~；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://waymark.com/&#34;&gt;waymark&lt;/a&gt;：使用文本生成视频；主要用于制作电视广告和数字视频广告；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上应用产品底层大模型大多是基于GPT相关最新模型，官网提供的GPT-3: &lt;a href=&#34;https://openai.com/blog/gpt-3-apps&#34;&gt;https://openai.com/blog/gpt-3-apps&lt;/a&gt;介绍。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://openai.com/product&#34;&gt;https://openai.com/product&lt;/a&gt; (可以先了解清楚openai自己的应用根源产品，后续有时间整理下，感兴趣的话，然后去发散吧)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://openai.com/blog&#34;&gt;https://openai.com/blog&lt;/a&gt; (技术宅，可以订阅一波)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://platform.openai.com/docs/introduction/overview&#34;&gt;https://platform.openai.com/docs/introduction/overview&lt;/a&gt; (适合开发，模型微调)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://platform.openai.com/examples/&#34;&gt;https://platform.openai.com/examples/&lt;/a&gt; (找灵感)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gpt3demo.com/&#34;&gt;https://gpt3demo.com/&lt;/a&gt; （潘多拉盒子）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mli/paper-reading#%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86---transformer&#34;&gt;https://github.com/mli/paper-reading#自然语言处理-transformer&lt;/a&gt; (背后模型原理导读)&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Go tips-笔记: 优化 91-100 mistakes</title>
      <link>https://weedge.github.io/post/notions/go-tips/go-tips-12-optimizations/</link>
      <pubDate>Thu, 23 Feb 2023 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/notions/go-tips/go-tips-12-optimizations/</guid>
      
        <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;在大多数情况下，编写可读、清晰的代码比编写经过优化但更复杂、更难理解的代码要好，不要过早的优化。建议遵循软件工程师 Wes Dyer 的这句名言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Make it correct, make it clear, make it concise, make it fast, in that order.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;并不意味着禁止为速度和效率优化应用程序, 了解并掌握这些优化点，以备不时之需；文中给出了常见的优化技术；有些特定于 Go 内存模型，内存分配，GPM调度模型；有些是关于了解硬件有助于写出好的代码(适用于不同语言)，其中会有硬件方面的术语，可以结合wiki进行学习；&lt;/p&gt;
&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;
&lt;h3 id=&#34;91不了解-cpu-缓存&#34;&gt;91.不了解 CPU 缓存&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Mechanical sympathy(机械同情)&lt;/em&gt;  来自三届 F1 世界冠军 Jackie Stewart 创造的一个术语&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;You don’t have to be an engineer to be a racing driver, but you do have to have mechanical sympathy.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简而言之，当了解系统的设计用途时，无论是 F1 赛车、飞机还是计算机，都可以与设计保持一致以获得最佳性能。对 CPU 缓存工作方式的机械同情可以帮助优化 Go 应用程序。&lt;/p&gt;
&lt;h4 id=&#34;cpu架构-cpu-architecture&#34;&gt;CPU架构 CPU architecture&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F01_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F01_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图为简单的Intel Core i5-7300u cpu架构图；&lt;a href=&#34;https://en.wikichip.org/wiki/intel/core_i5/i5-7300u&#34;&gt;https://en.wikichip.org/wiki/intel/core_i5/i5-7300u&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每个物理核心（Core0和Core1）被分成两个逻辑核心Hyper-Threading（T0和T1）。&lt;/p&gt;
&lt;p&gt;L1 缓存分为两个子缓存：用于数据的 L1D 和用于指令的 L1I（每个 32 KB）。当 CPU 执行应用程序时，缓存不仅仅与数据相关，它还可以缓存一些指令，L2, L3其原理相同：加快整体执行速度。&lt;/p&gt;
&lt;p&gt;内存位置离逻辑核心越近，访问速度越快（参见&lt;a href=&#34;http://mng.bz/o29v&#34;&gt;http://mng.bz/o29v&lt;/a&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L1：约1ns&lt;/li&gt;
&lt;li&gt;L2：比L1慢约4倍&lt;/li&gt;
&lt;li&gt;L3：比L1慢10倍左右&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPU 缓存的物理位置也可以解释这些差异。L1 和 L2 是称为&lt;em&gt;on-die(片上)&lt;/em&gt;，这意味着它们与处理器的其余部分属于同一块硅片。相反，L3 是&lt;em&gt;off-die(片外)。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对于主存储器（RAM），平均访问速度比 L1 慢 50 到 100 倍。可以访问存储在 L1 上的多达 100 个变量，只需访问一次主内存的价格。因此，作为 Go 开发人员，改进的一种途径是确保应用程序使用 CPU 缓存。进一不了解可以查看以下视频：&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/vgPFzblBh7w&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h4 id=&#34;缓存行-cache-line&#34;&gt;缓存行 Cache Line&lt;/h4&gt;
&lt;p&gt;缓存行的概念对于理解至关重要。但在介绍它们是什么之前，了解为什么需要它们。&lt;/p&gt;
&lt;p&gt;当访问特定的内存位置时(例如 通过读取变量)，在不久的将来可能会发生以下情况之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将再次引用相同的位置；时间局部性。&lt;/li&gt;
&lt;li&gt;附近的内存位置将被引用；空间局部性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两者都是局部性原则 &lt;em&gt;locality of reference&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;时间局部性是需要 CPU 缓存的部分原因：加速对相同变量的重复访问。由于空间局部性，CPU 会复制缓存行将包括单个变量的缓存行从主存复制到高速缓存，并加载到寄存器中执行。&lt;/p&gt;
&lt;p&gt;高速缓存行是固定大小的连续内存段，通常为 64 字节（8 个&lt;code&gt;int64&lt;/code&gt;变量）。每当 CPU 决定缓存 RAM 中的内存块时，它会将内存块复制到缓存行。因为内存是有层次结构的，所以当CPU要访问一个特定的内存位置时，它首先检查L1，然后是L2，然后是L3，最后，如果位置不在那些缓存中，则在主内存中。&lt;/p&gt;
&lt;p&gt;举一个简单的例子， 遍历容量为16的slice切片s []int64;  这个内存地址还没在缓存中；程序开始遍历，cpu决定缓存这个s[0]这个变量，会复制整个内存块复制到缓存行，缓存行中包含了8个int64，0到7的数据将会在cpu cache中命中；访问s[8]时同理；迭代16个int64元素导致2次强制缓存未命中(&lt;em&gt;compulsory miss&lt;/em&gt;)和 14 次缓存命中。&lt;/p&gt;
&lt;p&gt;CPU缓存策略有个大致的了解：有时缓存是包容性的（例如，L2 数据也存在于 L3 中），有时缓存是排他性的（例如，L3 称为受害者缓存，因为它只包含从 L2 逐出的数据）；这些策略被 CPU 供应商隐藏起来；大致了解下即可。&lt;/p&gt;
&lt;p&gt;如果感兴趣，可以通过 &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/CPU_cache&#34;&gt;https://en.wikipedia.org/wiki/CPU_cache&lt;/a&gt;&lt;/strong&gt; 进一步了解，比较硬核。&lt;/p&gt;
&lt;h4 id=&#34;结构切片与切片结构-slice-of-structs-vs-struct-of-slices&#34;&gt;结构切片与切片结构 Slice of structs vs. struct of slices&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Bar&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对[]Foo 和 Bar.a 容量长度为16的切片遍历，遍历数据结构切片 比 遍历切片结构 慢， 因为cache line的空间局部性原理，加载切片结构更紧凑，需要更少的缓存行来迭代，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F04_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F04_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;可预测性-predictability&#34;&gt;可预测性 Predictability&lt;/h4&gt;
&lt;p&gt;要理解这一点，必须了解跨步striding的概念。跨步与 CPU 如何处理数据有关。共有三种不同类型的步幅(stride)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;单位步幅Unit stride&lt;/em&gt;：全部想要访问的值是连续分配的：例如，切片[]int64元素。这个步幅对于 CPU 来说是可预测的并且是最有效的，因为它需要最少数量的缓存行来遍历元素。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;恒定步幅Constant stride&lt;/em&gt;：对于 CPU 来说仍然是可预测的：例如，一个切片每两个元素迭代一次。此步幅需要更多缓存行来遍历数据，因此它的效率低于单位步幅。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;非单位步幅Non-unit stride&lt;/em&gt; ：CPU 无法预测的跨步：例如，链表或指针切片。因为 CPU 不知道数据是否连续分配，所以它不会获取任何缓存行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F06_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F06_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于不同的步幅和相似的空间局部性，迭代链表比值的切片要慢得多。由于更好的空间局部性，通常应该支持单位步幅而不是恒定步幅。但是当CPU 都无法预测非单位步长，无论数据如何分配，都会有性能上的影响。&lt;/p&gt;
&lt;p&gt;到目前为止，已经讨论了 CPU 缓存速度很快但比主内存小得多。因此，CPU 需要一种策略来将内存块提取到缓存行。此策略称为&lt;em&gt;缓存放置策略&lt;/em&gt;，并且会显着影响性能。&lt;/p&gt;
&lt;h4 id=&#34;缓存放置策略-cache-placement-policy&#34;&gt;缓存放置策略 Cache placement policy&lt;/h4&gt;
&lt;p&gt;当 CPU 决定复制一个内存块并将其放入缓存时，它必须遵循特定的策略。假设一个 32 KB 的 L1D 缓存和一个 64 字节的缓存行，如果一个块被随机放入 L1D，CPU 在最坏的情况下将不得不迭代 512 个缓存行来读取一个变量。这种缓存是称为&lt;em&gt;完全结合(fully associative)&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;为了提高从 CPU 缓存访问地址的速度，设计人员制定了有关缓存放置的不同策略。跳过历史，讨论当今使用最广泛的策略：集合关联缓存策略(&lt;em&gt;set-associative cache)&lt;/em&gt; ，它依赖缓存分区。&lt;/p&gt;
&lt;p&gt;具体参考以下资料进一步了解：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cache_placement_policies&#34;&gt;https://en.wikipedia.org/wiki/Cache_placement_policies&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/250967/&#34;&gt;https://lwn.net/Articles/250967/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://coolshell.cn/articles/20793.html&#34;&gt;https://coolshell.cn/articles/20793.html&lt;/a&gt; (结合文章中&lt;a href=&#34;https://github.com/haoel/cpu-cache&#34;&gt;c++代码&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;为了便于理解，举一个简单的例子，有一个矩阵 二维数组arr [4][32]int64  4行32列存放int64，从中取出前8列res [4][8]int64；假设L1D缓存大小512B,  缓存行cache line 64B， 有8个cache line；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F07_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F07_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中所示该矩阵如何存储在内存中。这里使用二进制表示来表示内存块地址,为简单起见，使用 13 位表示一个地址；灰色块代表迭代的前 8 个int64元素，其余块在迭代期间被跳过。每个主存内存块包含 64 个字节，因此块内包含 8 个int64元素。第一个内存块从 0x0000000000000 开始，第二个从 0001000000000（二进制为 512）开始，依此类推。 以及可以容纳 8 行的缓存cache。&lt;/p&gt;
&lt;p&gt;使用集合关联缓存策略(&lt;em&gt;set-associative cache)&lt;/em&gt;，缓存被划分为集合。假设缓存是N-way集合关联的(N=2)，这意味着每个集合包含两行。一个内存块只能属于一个集合，其放置位置由其内存地址决定。要理解这一点，必须将内存块地址分解为三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块&lt;em&gt;偏移量&lt;/em&gt;是基于块大小。这里的块大小是 512 字节，512 等于 2^9。因此，地址的前 9 位代表块偏移量（bo）。&lt;/li&gt;
&lt;li&gt;集合&lt;em&gt;索引&lt;/em&gt;表示地址所属的集合。因为缓存是两路集合关联的并且包含 8 行，所以有 8 / 2 = 4 个集合。此外，4 等于 2^2，因此接下来的两位代表集合索引 (si)。&lt;/li&gt;
&lt;li&gt;地址的其余部分由标记位 (tb) 组成。为简单起见使用 13 位表示一个地址。计算 tb 位数 = 13 – bo – si。这意味着剩下的两位代表标记位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设该函数启动并尝试读取&lt;code&gt;s[0][0]&lt;/code&gt;属于地址 0000000000000 的地址。由于该地址尚未出现在缓存中，因此 CPU 计算其集合索引并将其复制到相应的缓存集合。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F08_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F08_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如前所述，9 位表示块偏移量：它是每个内存块地址的最小公共前缀。然后，2位表示集合索引。地址为 0000000000000 时，si 等于 00。因此，该内存块被复制到Set 0。&lt;/p&gt;
&lt;p&gt;当函数从 读取&lt;code&gt;s[0][1]&lt;/code&gt;到时&lt;code&gt;s[0][7]&lt;/code&gt;，数据已经在缓存中。CPU 是怎么知道的？CPU 计算内存块的起始地址，计算集合索引和标记位，然后检查Set 0 中是否存在 00。&lt;/p&gt;
&lt;p&gt;接下来函数读取&lt;code&gt;s[1][0]&lt;/code&gt;，这个地址还没有被缓存。因此复制内存块 0100000000000 时发生相同的操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F09_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F09_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;该内存的集合索引等于 00，因此它也属于Set 0。缓存行被复制到Set 0 中的下一个可用行。然后，再次从 读取到导致缓存&lt;code&gt;s[1][1]&lt;/code&gt;命中&lt;code&gt;s[1][7]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;现在事情变得有趣了。该函数读取&lt;code&gt;s[2][0]&lt;/code&gt;，并且该地址不存在于缓存中。执行相同的操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F10_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F10_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;集合索引再次等于 00。但是， Set0 已满，CPU 会替换现有缓存行之一以复制内存块 1000000000000。&lt;/p&gt;
&lt;p&gt;缓存替换策略(&lt;a href=&#34;https://en.wikipedia.org/wiki/Cache_replacement_policies&#34;&gt;Cache replacement policies&lt;/a&gt;)取决于 CPU，但它通常是伪 LRU 策略（真正的 LRU [最近最少使用] 会太复杂而无法处理）。在这种情况下，假设它替换了第一个缓存行：0000000000000。当迭代第 3 行时会重复这种情况：内存地址 1100000000000 也有一个等于 00 的集合索引，导致替换现有的缓存行。&lt;/p&gt;
&lt;p&gt;现在，假设基准测试执行函数，其中一个切片指向从地址 0000000000000 开始的相同矩阵。每次基准测试，当函数读取时，&lt;code&gt;s[0][0]&lt;/code&gt;地址不在缓存中；该块已被替换。&lt;/p&gt;
&lt;p&gt;基准测试将导致更多的缓存未命中，而不是从一个执行到另一个执行使用 CPU 缓存。这种类型的缓存未命中称为*冲突未命中conflict miss；*如果未对缓存进行分区，则不会发生未命中。迭代的所有变量都属于一个集合索引为00的内存块。因此，只使用一个缓存集合，而不是分布在整个缓存中。&lt;/p&gt;
&lt;p&gt;之前讨论了步幅&lt;em&gt;stride&lt;/em&gt;的概念， CPU 如何遍历数据。在这个例子中，这个步幅是称为*临界步幅critical stride；*它导致访问具有相同集合索引的内存地址，存储到相同的缓存集合中。&lt;/p&gt;
&lt;p&gt;Intel 大多数处理器的存放数据的L1D都是32KB，8-Way 组相联，Cache Line 是64 Bytes。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;32KB可以分成，32KB / 64 = 512 条 Cache Line。&lt;/li&gt;
&lt;li&gt;因为有8 Way，于是会每一Way 有 512 / 8 = 64 条 Cache Line。&lt;/li&gt;
&lt;li&gt;于是每一路就有 64 x 64 = 4096 Byts 的内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回到前面&lt;a href=&#34;https://weedge.github.io/post/go-tips/go-tips-11-testing/#89%E7%BC%96%E5%86%99%E4%B8%8D%E5%87%86%E7%A1%AE%E7%9A%84%E5%9F%BA%E5%87%86&#34;&gt;#89&lt;/a&gt; 真实示例中，使用两个函数&lt;code&gt;calculateSum512&lt;/code&gt;和&lt;code&gt;calculateSum513&lt;/code&gt;。基准测试在 32 KB 8-way set-associative L1D cache上执行，总共 64 组。因为缓存行是 64 字节，所以每一路步长等于 64 × 64 字节 = 4 KB；代表512 个&lt;code&gt;int64&lt;/code&gt;类型元素。因此，达到了 512 列矩阵的&lt;em&gt;临界步幅critical stride&lt;/em&gt;，缓存分布很差(&lt;em&gt;冲突未命中conflict miss&lt;/em&gt;)。同时，如果矩阵包含 513 列，则不会导致&lt;em&gt;临界步幅&lt;/em&gt;。这就是为什么观察到两个基准之间存在如此巨大差异的原因。这个同样适用于在intel CPU架构上运行的其他语言。&lt;/p&gt;
&lt;p&gt;总之，必须意识到现代缓存是分区的。根据步幅，在某些情况下只使用一组，这可能会损害应用程序性能并导致冲突未命中。这种步幅称为临界步幅。对于性能密集型应用程序，应该避免关键步骤来充分利用 CPU 缓存。&lt;/p&gt;
&lt;p&gt;tips: 应该注意基准测试的结果在不同底层CPU架构而有所不同。注意开发测试 和 生产环境下的CPU架构一致，如果有对计算密集型的调优，最好在生产环境待部署的机器上都进行基准测试一下。&lt;/p&gt;
&lt;h3 id=&#34;92编写导致伪共享false-sharing的并发代码&#34;&gt;92.编写导致伪共享(false sharing)的并发代码&lt;/h3&gt;
&lt;p&gt;由于多核处理器cpu之间独立的L1/L2 cache，会出现cache line不一致的问题，为了解决这个问题，有相关协议模型，常用MESI协议，MESI 通过 这个网站模拟更直观的了解 &lt;a href=&#34;https://www.scss.tcd.ie/Jeremy.Jones/VivioJS/caches/MESIHelp.htm&#34;&gt;https://www.scss.tcd.ie/Jeremy.Jones/VivioJS/caches/MESIHelp.htm&lt;/a&gt;；为了保证一个core上修改的cache line数据同步到其他core的cache line上，则需要MESI协议来保证，如果同一个cache line上有个两个变量sum1 和 sum2 之间虽然没有相互依赖逻辑，但是当修改sum1 或者sum2 时，需要同步同一块cache line的内容，导致 即使没有相互关系的变量在同一cache line中， 需要彼此共享同步，从而出现所说的&lt;em&gt;伪共享 flase sharing&lt;/em&gt;。伪共享因为cache line的同步会带来一些cpu 时钟周期的性能损失。&lt;/p&gt;
&lt;p&gt;了解伪共享的情况，知道如何破解了，直接让sum1和sum2 放置在不同的cache line就可以；比如一个结构体中sum1和sum2 的存放结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Result2&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;sumA&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// a cache line 64B 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;sumB&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// sumB in other cache line
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还有一种解决方案是重新设计算法的结构。例如，不是让两个 goroutines 共享相同的结构，通过channel传递它们的本地结果。结果基准与填充大致相同。&lt;/p&gt;
&lt;p&gt;并发编程中，操作cpu L1/L2 cache 时，因为多核同步cache的最小单元是cache line，所以当缓存行在两个内核之间共享时，至少一个 goroutine 是 writer 时，就会发生伪共享。如果需要优化依赖于并发的应用程序，应该检查是否存在伪共享的代码，众所周知这种模式会降低应用程序性能。可以通过填充或通信来防止虚假共享。&lt;/p&gt;
&lt;h3 id=&#34;93不考虑指令级并行性-instruction-level-parallelism&#34;&gt;93.不考虑指令级并行性 instruction-level parallelism&lt;/h3&gt;
&lt;p&gt;这个很大一部分取决于编程语言的编译器软件，编译优化之后代码指令是否可以充分利用指令级并行&lt;em&gt;instruction-level parallelism&lt;/em&gt;（ILP）；以及在硬件cpu上进行指令级并行(ILP)；&lt;/p&gt;
&lt;p&gt;tips: 两者结合效果更佳，对于上层应用使用语言的开发者，了解其背后的原理即可，在应用程序上的性能优化可能效果不大，因为随着编译器升级可能会兼顾了应用程序上对ILP考虑优化。不过了解原理可以有助于上层宏观层面的思考并行，用于借鉴嘛~，微观到宏观(3体里经常浮现的词汇，降维打击)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Compiler&#34;&gt;编译器&lt;/a&gt;和&lt;a href=&#34;https://en.wikipedia.org/wiki/Central_processing_unit&#34;&gt;CPU&lt;/a&gt;设计人员的目标是尽可能多地识别和利用 ILP。普通程序通常是在顺序执行模型下编写的，其中指令一条接一条地执行，并按照程序员指定的顺序执行。ILP 允许编译器和处理器重叠执行多条指令，甚至可以改变指令执行的顺序。cpu利用ILP执行指令时，当表现出&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_dependence&#34;&gt;数据依赖性&lt;/a&gt;的指令在流水线的不同阶段修改数据时，就会发生&lt;a href=&#34;https://en.wikipedia.org/wiki/Hazard_(computer_architecture)&#34;&gt;数据冒险危害&lt;/a&gt;。忽略潜在的数据危害会导致&lt;a href=&#34;https://en.wikipedia.org/wiki/Race_condition&#34;&gt;竞争条件&lt;/a&gt;（也称为竞争危害），进而触发控制风险；为了避免控制风险发生，可以通过&lt;a href=&#34;https://en.wikipedia.org/wiki/Branch_predictor&#34;&gt;预测分支&lt;/a&gt;来解决。&lt;/p&gt;
&lt;p&gt;了解利用ILP的微架构技术见wiki: &lt;a href=&#34;https://en.wikipedia.org/wiki/Instruction-level_parallelism&#34;&gt;https://en.wikipedia.org/wiki/Instruction-level_parallelism&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在Go中，可以通过 &lt;a href=&#34;https://research.swtch.com/mm&#34;&gt;https://research.swtch.com/mm&lt;/a&gt; 来了解在这方面的思考&lt;/p&gt;
&lt;h3 id=&#34;94不知道数据对齐&#34;&gt;94.不知道数据对齐&lt;/h3&gt;
&lt;p&gt;数据对齐是一种安排数据分配方式以加速 CPU 访问内存的方法。不了解这个概念会导致额外的内存消耗甚至性能下降。&lt;/p&gt;
&lt;p&gt;tips: 这个属于老生常谈的问题了，尤其在c语言开发的程序中，数据对齐，直接通过地址+偏移大小来指向对应内存数据，进行读写操作；golang很多思想来自c，自然也会有，只不过更加友好，unsafe形式来操作指针。&lt;/p&gt;
&lt;p&gt;在 64 位cpu架构上,处理最小单位是8字节的地址，如果没有数据对齐，变量j分配可以分布在两个地址上。如果 CPU 想要读取j，则需要两次而不是一次内存访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F22_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F22_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;为防止这种情况，变量的内存地址应该是其自身大小的倍数。这就是数据对齐的概念。在 Go 中，对齐保证如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;int8&lt;/code&gt;: 1 字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint16&lt;/code&gt;, &lt;code&gt;int16&lt;/code&gt;: 2 字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint32&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;: 4 字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint64&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;: 8 字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;complex128&lt;/code&gt;: 16 字节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有这些类型都保证对齐：它们的地址是它们大小的倍数。例如，任何&lt;code&gt;int32&lt;/code&gt;变量的地址都是 4 的倍数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F23_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F23_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样上面的情况，按在字节对齐，出现两种情况：&lt;/p&gt;
&lt;p&gt;第一种情况，在i之前分配了一个32位变量。因此i和j被连续分配。&lt;/p&gt;
&lt;p&gt;第二种情况，在i之前没有分配32位变量；i被分配在一个词的开头。为了数据对齐（地址是 64 的倍数），i不能与下一个 64 的倍数j一起分配。灰色框表示 32 位填充。&lt;/p&gt;
&lt;p&gt;所以了解了字节对齐之后，在设计数据结构的时候，需要清楚，数据结构通过编译器优化编译之后方便cpu访问 的数据对齐结构，所占内存大小；防止出现本来不需要这么多内存空间的设计。尤其在设计非常依赖缓存存储的项目中。申请内存空间越多越频繁，对于Go来说，将带来更多的GC, 影响整体应用性能。&lt;/p&gt;
&lt;p&gt;还有一个好处是，考虑了字节对齐后的合理结构体(所占内存空间的结构体大小最小情况，&lt;strong&gt;结构体中的字段按大小降序对它们进行排序对齐&lt;/strong&gt;)；利用cache 局部性原理，可以在cpu cache line中存放更多的对象，这样在遍历对象时，需要更少的缓存行总数，性能更好。&lt;/p&gt;
&lt;h3 id=&#34;95不了解栈与堆&#34;&gt;95.不了解栈与堆&lt;/h3&gt;
&lt;p&gt;在 Go 中，变量可以分配在栈上或堆上。这两种类型的内存根本不同，影响数据密集型应用程序。需要了解栈和堆这些概念，以及编译器决定变量分配位置所遵循的规则。&lt;/p&gt;
&lt;h4 id=&#34;栈与堆&#34;&gt;栈与堆&lt;/h4&gt;
&lt;p&gt;首先，讨论一下栈和堆的区别。栈是它是一种后进先出 (LIFO) 数据结构，用于存储特定 goroutine 的所有局部变量。当一个 goroutine 启动时，它会获得 2 KB 的连续内存作为它的栈空间（这个大小随着时间的推移而变化并且可能会再次改变）。但是，此大小在运行时不是固定的，可以根据需要增大和缩小（但它始终在内存中保持连续，从而保留数据局部性）。&lt;/p&gt;
&lt;p&gt;tips: Go 在1.3之前栈扩容采用的是分段栈（Segemented Stack），在栈空间不够的时候新申请一个栈空间用于被调用函数的执行， 执行后销毁新申请的栈空间并回到老的栈空间继续执行，当函数出现频繁调用（递归）时可能会引发hot split。为了避免hot split, 1.3之后采用的是连续栈（Contiguous Stack），栈空间不足的时候申请一个2倍于当前大小的新栈，并把所有数据拷贝到新栈， 接下来的所有调用执行都发生在新栈上。&lt;/p&gt;
&lt;p&gt;当 Go 进入一个函数时，会创建一个栈帧，代表内存中只有当前函数才能访问的一个区间。&lt;/p&gt;
&lt;p&gt;通过一个简单示例来介绍stack的指令执行过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F27_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F27_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;为了简化，图中stack没有使用汇编指令来表明，执行了&lt;code&gt;main&lt;/code&gt;，所以为这个函数创建了一个栈帧，&lt;code&gt;a&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;都分配在栈上，valid为有效地址，invalid为无效地址。栈从高地址往地址空间增长，其中基准指针寄存器BP 来维护栈基地址 ，栈指针寄存器SP 指向栈顶地址； 至于汇编相关的细节见官方文档查阅解释：&lt;strong&gt;&lt;a href=&#34;https://go.dev/doc/asm&#34;&gt;https://go.dev/doc/asm&lt;/a&gt;&lt;/strong&gt;。查看命令如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;GOOS=linux GOARCH=amd64 go tool compile -S -L -N -l -m 12-optimizations/95-stack-heap/main.go | less
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F28_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F28_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;调用&lt;code&gt;sumValue&lt;/code&gt;创建一个新的栈帧。x,y为值传递分别赋值，x+y后(简单起见，操作指令未给出)，z赋值; 先前的栈帧&lt;code&gt;(main)&lt;/code&gt;包含仍被视为有效的地址，但无法访问a和b对其操作，如果是指针传递则可以获取地址对其操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F29_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F29_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;执行完出函数，出栈，sumValue栈帧被擦除，替换为原来的main栈帧，x已经被擦除，y和z仍在内存中分配，但是无法访问。&lt;/p&gt;
&lt;p&gt;注意 栈&lt;code&gt;sumValue&lt;/code&gt;帧并未从内存中完全删除。当函数返回时，Go 不会花时间释放变量来回收可用空间。但是这些以前的变量不能再被访问，当来自父函数的新变量被分配到栈时，它们取代了之前的分配。从某种意义上说，栈是自清洁的；它不需要额外的机制，例如 GC。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F30_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F30_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;把调用函数改成指针返回时，z 如果 继续分配在栈上的话，函数返回后，z不在有效，main栈帧继续增长，会擦除掉z, 这样c指向的地址空间已经不存在了，变成了错位的悬挂指针，如果使用c进行操作会出现异常(C语言中，会出现Segmentation fault)，所以在Go中，为了代码安全，在编译的时候，将z 原本在栈上分配的空间，逃逸分配到了堆上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F31_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F31_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;堆内存空间是所有goroutine的共享池，由Go的内存分配器来管理，具体见&lt;a href=&#34;https://medium.com/@ankur_anand/a-visual-guide-to-golang-memory-allocator-from-ground-up-e132258453ed&#34;&gt;Go Memory Allocator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三个协程&lt;code&gt;G1&lt;/code&gt;,&lt;code&gt;G2&lt;/code&gt;和&lt;code&gt;G3&lt;/code&gt;都有自己的栈，共享同一个堆进行内存分配管理。&lt;/p&gt;
&lt;p&gt;tips: 在Go中，为了加速内存分配，Golang自己维护了类似https://github.com/google/tcmalloc 的内存分配器来管理，每个运行时P都有一个本地mcache，用于执行状态的协程G分配内存空间，对应多线程中内存tcmalloc的分配机制，线程本地mcache。&lt;/p&gt;
&lt;p&gt;栈是自清洁的，并由单个 goroutine 访问。相反，堆上分配的对象需要通过GC标注扫描进行清理。堆分配越多对象，对 GC 施加的压力就越大。当 GC 运行时，会使用大约 25% 的可用 CPU 容量，并且可能会产生毫秒级的“停止世界”延迟（应用程序暂停的阶段）。具体见官方文档： &lt;a href=&#34;https://tip.golang.org/doc/gc-guide&#34;&gt;gc-guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在基准压测的结果中，使用的testing.B.ReportAllocs函数, 或者使用参数-benchmem ，显示了堆分配情况（栈分配不计算在内）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;B/op:&lt;/code&gt;每个操作分配多少字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allocs/op:&lt;/code&gt;每个操作有多少分配&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tips:&lt;/p&gt;
&lt;p&gt;由于Go中的用户栈空间是自动扩缩容的，需要注意每个协程goroutine栈扩容对内存空间的影响，特别是在长连接的场景，单机连接数在100w级别的时候，尽量保持每个goroutine 处理函数的逻辑在2kb内(功能职责分离)，防止栈扩容，导致内存指数级暴涨。&lt;/p&gt;
&lt;p&gt;栈扩容了，长时间没有运行，为了提高内存利用率，在GC触发的时候，计算当前栈使用的空间，小于栈空间的1/4，会触发栈缩容操作到原来的1/2，最小到2kb，不会再缩容；但在缩容过程中会存在栈拷贝和写屏障(write barrier)，对于一些准实时应用可能会存在一些影响。 好在go提供了可设置的参数，可以通过设置环境变量 GODEBUG=gcshrinkstackoff=1 来关闭栈缩容。关闭栈缩容后， 需要承担栈持续增长的风险，在关闭前需要慎重考虑。&lt;/p&gt;
&lt;h4 id=&#34;逃逸分析-重要&#34;&gt;逃逸分析 (重要)&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/cmd/compile/internal/escape/escape.go&#34;&gt;逃逸分析(escape analysis)&lt;/a&gt; 在程序编译阶段根据程序代码中的数据变量，对代码中哪些变量需要在栈上分配，哪些变量需要在堆上分配进行静态分析的方法；Go 语言的逃逸分析遵循以下两个不变性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指向栈对象的指针不能存储在堆中（pointers to stack objects cannot be stored in the heap）；&lt;/li&gt;
&lt;li&gt;指向栈对象的指针不能超过该栈对象的存活期（pointers to a stack object cannot outlive that object）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;tips: 发生逃逸时，底层会使用runtime.newobject调用&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/runtime/malloc.go#L878&#34;&gt;&lt;strong&gt;mallocgc&lt;/strong&gt;&lt;/a&gt;通过内存分配器来管理分配；&lt;/p&gt;
&lt;p&gt;无法在栈上完成分配时，它会在堆上完成, 比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果局部变量太大而不适合栈。&lt;/li&gt;
&lt;li&gt;如果局部变量的大小未知。例如，&lt;code&gt;s := make([]int, 10)&lt;/code&gt;可能不会逃逸到堆中，但&lt;code&gt;s := make([]int, n)&lt;/code&gt;会，因为它的大小是基于变量的。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// go run -gcflags=&amp;#39;-m=1 -l -L -S -N&amp;#39;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8193&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;gt;64kb a and a.Data escape to heap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;printSliceLocalAndDataPointAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;aa&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8192&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;lt;=64kb aa and aa.Data don&amp;#39;t escape to heap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;printSliceLocalAndDataPointAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;aa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;aaa&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8192&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;lt;=64kb aaa and aaa.Data don&amp;#39;t escape to heap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;printSliceLocalAndDataPointAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;aaa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;aaa&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;aaa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// happen runtime.growslice; aaa don&amp;#39;t escape to heap，but aaa.Data move to heap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;printSliceLocalAndDataPointAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;aaa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// so if make a slice, &amp;lt;=64kb please init cap, eg: make([]int, 0, 8192) allocate in stack
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;bb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// don&amp;#39;t move to heap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;bbb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// move to heap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// escapes to heap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;aa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;aaa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bbb&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printSliceLocalAndDataPointAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;addr of local slice = &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;pd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reflect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SliceHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;slice data =&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;指向栈对象的指针不能在栈对象回收后存活；interface操作以及返回函数中局部变量的指针， 比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// go tool compile -m=1 -l -L -S -N   use -m=2 , -m3, -m4 see more
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// a escapes to heap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// moved to heap: z
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;noescape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pointer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// p does not escape
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;uintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;leakNoEscape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// leaking param: p to result ~r0 level=0
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// x escapes to heap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果指向栈对象的指针存在于栈中；这不会分配到堆上，比如&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F32_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F32_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;x, y 的值(对象地址)，以及指向对象 a 和 b. 都在栈上，所以不会分配在堆上。&lt;/p&gt;
&lt;p&gt;以下是变量可以逃逸到堆的其他情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局变量，因为多个 goroutines 可以访问它们。&lt;/li&gt;
&lt;li&gt;发送到channel的指针：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// escapes to heap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;由发送到通道的值引用的变量：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// moved to heap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上逃逸分析的测试随着编译器的升级，可能在未来的 Go 版本中发生变化。为了确认假设，可以使用 &lt;code&gt;go build -gcflags &amp;quot;-m=2&amp;quot;&lt;/code&gt; -m=3,-m4 来进行详细分析。&lt;/p&gt;
&lt;p&gt;了解堆和栈之间的根本区别对于优化 Go 应用程序至关重要。堆分配对于 Go 运行时处理来说更为复杂，并且需要具有 GC 的外部系统来释放数据。在某些数据密集型应用程序中，堆管理可占总 CPU 时间消耗的 20% 或 30%。另一方面，栈是自清洁的，并且对单个 goroutine 而言是本地的，从而使分配速度更快。因此，优化内存分配可以获得很大的投资回报。&lt;/p&gt;
&lt;p&gt;理解逃逸分析的规则对于编写更高效的代码也很重要。一般来说，向下共享留在栈上，而向上共享逃逸到堆中。这应该可以防止常见错误，例如想要返回指针的过早优化，例如“避免复制”。首先关注可读性和语义，然后在需要时优化分配。&lt;/p&gt;
&lt;p&gt;tips: 想更深入了解逃逸分析，可以一起学习这篇论文：&lt;a href=&#34;http://www.wingtecher.com/themes/WingTecherResearch/assets/papers/ICSE20.pdf&#34;&gt;Escape from Escape Analysis of Golang&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;96不知道如何减少分配&#34;&gt;96.不知道如何减少分配&lt;/h3&gt;
&lt;p&gt;减少分配是加速 Go 应用程序的常见优化技术。已经涵盖了一些减少堆分配数量的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未优化的字符串连接（错误 &lt;a href=&#34;https://weedge.github.io/post/notions/go-tips/go-tips-05-strings/#39%E4%BC%98%E5%8C%96%E4%B8%8D%E8%B6%B3%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5&#34;&gt;#39&lt;/a&gt;）：使用&lt;code&gt;strings.Builder&lt;/code&gt;替代&lt;code&gt;+&lt;/code&gt;运算符来连接字符串。&lt;/li&gt;
&lt;li&gt;无用的字符串转换（错误 &lt;a href=&#34;https://weedge.github.io/post/notions/go-tips/go-tips-05-strings/#40%E6%97%A0%E7%94%A8%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2&#34;&gt;#40&lt;/a&gt;）：尽可能避免转换&lt;code&gt;[]byte&lt;/code&gt;成字符串。&lt;/li&gt;
&lt;li&gt;切片和映射初始化效率低下（错误 &lt;a href=&#34;https://weedge.github.io/post/notions/go-tips/go-tips-03-data-types/#21%E5%88%87%E7%89%87%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%88%E7%8E%87%E4%BD%8E%E4%B8%8B&#34;&gt;#21&lt;/a&gt; 和 &lt;a href=&#34;https://weedge.github.io/post/notions/go-tips/go-tips-03-data-types/#27%E4%BD%8E%E6%95%88%E7%9A%84map%E5%88%9D%E5%A7%8B%E5%8C%96&#34;&gt;#27&lt;/a&gt;）：如果长度已知，则预分配切片和映射。&lt;/li&gt;
&lt;li&gt;更好的数据结构对齐以减少结构大小（错误 &lt;a href=&#34;https://weedge.github.io/post/notions/go-tips/go-tips-12-optimizations/#94%E4%B8%8D%E7%9F%A5%E9%81%93%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90&#34;&gt;#94&lt;/a&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还有三种减少内存分配的常见方式：&lt;/p&gt;
&lt;h4 id=&#34;api-设计&#34;&gt;API 设计&lt;/h4&gt;
&lt;p&gt;只要涉及到I/O读写，会大量使用到在io库https://pkg.go.dev/io中，定义的读Reader / 写Writer接口, 对应的API方法，设计时为什么使用[]byte 作为传入参数，返回读取了多少， 而不使用读取多少来返回对应[]byte呢？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果使用切片[]byte返回的方式，Read函数内部会读取函数局部变量的切片赋值给返回的切片， 类似如下操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HiString&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HiString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//[]byte{...} escapes to heap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样函数局部变量会逃逸到堆上分配，这样带了额外的gc影响，而且io库的接口经常会被不同对象实例化使用到。所以Go 的设计者使用向下共享的方法来防止自动将切片转义到堆中；由调用者提供读写的切片[]byte，至于是否分配在堆上还是栈上，这取决于调用者来处理它，而不是直接返回，导致逃逸发生的可能。&lt;/p&gt;
&lt;p&gt;有时，即使是 API 的微小变化也会对分配产生积极影响。在设计 API 时，了解逃逸分析规则，并在需要时使用它&lt;code&gt;-gcflags&lt;/code&gt;来理解编译器的决策。&lt;/p&gt;
&lt;h4 id=&#34;依赖编译器优化&#34;&gt;依赖编译器优化&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// go tool compile -m=1 -l -L -S -N see if use runtime.slicebytetostring
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// m[string(key)] would be more efficient than k := string(key); m[k] (SA6001)go-staticcheck
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上代码，通过linter相关静态编译检查工具可以提示出 直接使用m[string(key)]的方式比k := string(key); m[k] 效率更高一些，因为编译器对m[string(key)] 进行了优化，不会调用runtime.slicebytetostring 进行复制转化，执行效率更快，也不会带了额外内存分配。&lt;/p&gt;
&lt;h4 id=&#34;池化syncpool&#34;&gt;池化sync.Pool&lt;/h4&gt;
&lt;p&gt;当处理的对象，分配在堆上，且频繁被创建使用，这样会触发频繁gc，对这些临时对象标记扫描，会带来额外性能影响，所以在Go引入了sync.Pool，复用临时对象，减少频繁创建，并且在池中的临时对象一段时间不在使用时，会从对象池中移出，并被gc回收，合理的触发机制由gc来管理，进而减少频繁gc。而且sync.Pool 本身就是线程安全的，多个 goroutine 可以并发地调用Get方法存取对象；sync.Pool 不可在使用之后再复制使用，引入了noCopy机制，可以通过go vet来检查。&lt;/p&gt;
&lt;p&gt;sync.Pool有两个公开方法Get， Put 以及初始化Pool是的New 函数成员。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F34_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F34_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Get 方法分为两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pool为空，通过自定义的New方法创建一个新对象，注意这个对象是同一类型；然后返回刚创建的对象，除了返回值是正常实例化的对象，Get 方法的返回值还可能会是一个 nil（Pool.New 字段没有设置，又没有空闲元素可以返回），所以在使用的时候，需要判断。当没有设置 New 字段，没有更多的空闲元素可返回时，Get 方法将返回 nil，表明当前没有可用的元素。&lt;/li&gt;
&lt;li&gt;pool不为空， 直接从池子中选一个复用对象返回&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Put： 将对象重置为初始对象，放入池子中(poolLocalInternal结构)，如果放入对象为nil，则会忽略掉。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Local per-P Pool appendix.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;poolLocalInternal&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;any&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// Can be used only by the respective P.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;shared&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;poolChain&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Local P can pushHead/popHead; any P can popTail.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;private: 仅被本地P使用，互斥 Put/Get&lt;/p&gt;
&lt;p&gt;shared: poolChain(lock-free queue)： 一个本地的 P 作为生产者（Producer）pushHead/popHead (Put/Get)，多个 P 作为消费者（Consumer）popTail (Get)&lt;/p&gt;
&lt;p&gt;具体见源码分析：&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/sync/pool.go&#34;&gt;go1.20/src/sync/pool.go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在频繁读写IO场景下，sync.Pool  常用作 buffer pool（缓冲池）来提升读写性能。类似这种封装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bufferPool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// GetBuffer returns a buffer from the pool.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bufferPool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// PutBuffer returns a buffer to the pool.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// The buffer is reset before it is put back into circulation.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PutBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;bufferPool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sync.Pool不适合长时间不会释放的资源 比如长连接；因为sync.Pool池化的对象可能会被垃圾回收掉，对于数据库长连接等场景是不合适。&lt;/p&gt;
&lt;p&gt;如果经常分配很多同类型的对象，可以考虑使用sync.Pool. 它是一组临时对象，可以防止重复重新分配同一种数据；并且sync.Pool可以安全地同时被多个 goroutines 使用。&lt;/p&gt;
&lt;h3 id=&#34;97不依赖内联&#34;&gt;97.不依赖内联&lt;/h3&gt;
&lt;p&gt;内联是将较小的函数组合到它们各自的调用者中的行为。在计算的早期，这种优化通常是手动执行的。如今，内联是在编译过程中自动执行的一类基本优化之一。&lt;/p&gt;
&lt;p&gt;内联很重要有两个原因。首先是它消除了函数调用本身的开销。第二个是它允许编译器更有效地应用其他优化策略,比如栈中内联(Go 1.9 引入 Mid-stack inlining)；&lt;/p&gt;
&lt;p&gt;了解更多Mid-stack inlining相关内容： &lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/19348-midstack-inlining.md&#34;&gt;提案&lt;/a&gt;  , HN 上的讨论以及PPT: &lt;a href=&#34;https://news.ycombinator.com/item?id=13803447&#34;&gt;Mid-stack inlining in the Go compiler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这种优化技术是关于区分快路径和慢路径。如果可以内联快速路径但不能内联慢速路径，可以将慢速路径提取到专用函数中。如果没有超出内联预算，函数就是内联的候选者。&lt;/p&gt;
&lt;p&gt;了解内联如何工作以及如何访问编译器的决定，可以成为使用快速路径内联技术进行优化的途径。如果执行快速路径，则在专用函数中提取慢速路径可防止函数调用。例如：sync库中使用Mutex.Lock Mutex.UnLock；&lt;a href=&#34;http://Once.Do&#34;&gt;Once.Do&lt;/a&gt; 用到了快速路径内联技术进行优化。&lt;/p&gt;
&lt;p&gt;tips: 具体优化收益，都需要进行基准压测为准&lt;/p&gt;
&lt;h3 id=&#34;98不使用-go-诊断工具-重要&#34;&gt;98.不使用 Go 诊断工具 （重要）&lt;/h3&gt;
&lt;p&gt;Go 提供了一些优秀的诊断工具来帮助深入了解应用程序的执行情况，重点介绍最重要的部分：剖析Profiling 和 执行跟踪器 Execution Tracer。具体查看官方文档： &lt;strong&gt;&lt;a href=&#34;https://go.dev/doc/diagnostics&#34;&gt;https://go.dev/doc/diagnostics&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Profiling 对运行中的代码采用基于定时器的采样。其缺点是，采样只能提供一个关于目标的粗略的图像，并且可能会遗漏事件。 比如cpu数据的采集，由于每次采集都会触发一次SIGPROF 信号中断，收集当时的调用堆栈；会对被采集的系统带来额外的负载影响，在采集cpu数据频率一般控制毫秒级别，所以存在采集精度的影响；对于微妙级别的采样，现在还不支持，有个改进的 &lt;a href=&#34;https://go.googlesource.com/proposal/+/refs/changes/08/219508/2/design/36821-perf-counter-pprof.md&#34;&gt;提案&lt;/a&gt; ，还未合并。&lt;/p&gt;
&lt;p&gt;Execution Tracer用来捕获各种运行时事件。调度、系统调用、垃圾收集、堆大小和其他事件由运行时收集，并可通过 go 工具跟踪进行可视化。执行跟踪器是一种检测延迟和利用率问题的工具，可以用来检查 CPU 的使用情况，以及在网络或系统调用时goroutine 抢占的原因。&lt;/p&gt;
&lt;h4 id=&#34;分析-profiling&#34;&gt;分析 Profiling&lt;/h4&gt;
&lt;p&gt;分析提供了对应用程序执行的洞察力。能够解决性能问题、检测争用、定位内存泄漏等。通过如下几个采集类型收集，并通过go tool pprof 分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cpu: 确定应用程序将时间花在哪里&lt;/li&gt;
&lt;li&gt;threadcreate: 创建的线程数, 这个采集点，2013年 &lt;a href=&#34;https://github.com/golang/go/issues/17280&#34;&gt;https://github.com/golang/go/issues/17280&lt;/a&gt; 这个issue 已经不可用了，新的还未merged。&lt;/li&gt;
&lt;li&gt;goroutine：报告正在进行的 goroutines 的堆栈跟踪&lt;/li&gt;
&lt;li&gt;heap：报道堆内存分配以监视当前内存使用情况并检查可能的内存泄漏&lt;/li&gt;
&lt;li&gt;mutex：报告锁查看代码中使用的互斥体的行为以及应用程序是否在锁定调用上花费了太多时间的争用&lt;/li&gt;
&lt;li&gt;block：显示 goroutines 阻塞等待同步原语的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go中提供3种方式使用pprof来采样数据，通过go tool pprof 工具来分析，具体见文档说明： &lt;a href=&#34;https://github.com/google/pprof/blob/main/doc/README.md&#34;&gt;https://github.com/google/pprof/blob/main/doc/README.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用运行时pprof包 接口API来采样数据&lt;/strong&gt;： &lt;a href=&#34;https://pkg.go.dev/runtime/pprof&#34;&gt;https://pkg.go.dev/runtime/pprof&lt;/a&gt; ；接口 api分析采样数据类型如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;goroutine    - stack traces of all current goroutines
heap         - a sampling of memory allocations of live objects
allocs       - a sampling of all past memory allocations
threadcreate - stack traces that led to the creation of new OS threads
block        - stack traces that led to blocking on synchronization primitives
mutex        - stack traces of holders of contended mutexes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体见源码：&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/runtime/pprof/pprof.go&#34;&gt;go1.20/src/runtime/pprof/pprof.go&lt;/a&gt;，可以使用Profile结构来进行二次开发,新增采样类型。运行时分析适用于没有 HTTP 接口的应用程序，通常用于库。必须在主函数中放置一个启动和停止函数句柄。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用网络net/http pprof包 http接口来采样数据&lt;/strong&gt;： &lt;a href=&#34;http://pkg.go.dev/net/http/pprof&#34;&gt;https: //pkg.go.dev/net/http/pprof&lt;/a&gt;； http api接口采样数据类型如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;import _ &lt;span class=&#34;s2&#34;&gt;&amp;#34;net/http/pprof&amp;#34;&lt;/span&gt;
go func&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	log.Println&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;http.ListenAndServe&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;localhost:6060&amp;#34;&lt;/span&gt;, nil&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}()&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# use 6060 port&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# cpu seconds=30s , debug=1&lt;/span&gt;
http://localhost:6060/debug/pprof/profile?seconds&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;30&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
http://localhost:6060/debug/pprof/heap
http://localhost:6060/debug/pprof/block
http://localhost:6060/debug/pprof/mutex
http://localhost:6060/debug/pprof/goroutine?debug&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
http://localhost:6060/debug/pprof/allocs?debug&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
http://localhost:6060/debug/pprof/threadcreate?debug&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;

http://localhost:6060/debug/pprof/cmdline?debug&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# view all pprof&lt;/span&gt;
http://localhost:6060/debug/pprof
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;网络分析更适合依赖 HTTP 的 API 应用程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用基准压测来采样数据：&lt;/strong&gt; &lt;a href=&#34;https://pkg.go.dev/cmd/go#hdr-Testing_flags&#34;&gt;https://pkg.go.dev/cmd/go#hdr-Testing_flags&lt;/a&gt; ，没有goroutine的采样，可以借助 trace工具来分析goroutine的细粒度调度情况，使用 -trace trace.out 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# sampling&lt;/span&gt;
go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -v -bench&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Benchmark_parallelMergesortV1$  -count&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -benchtime&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1s -benchmem -cpuprofile cpu.out -memprofile mem.out -mutexprofile mutex.out -blockprofile block.out ./08-concurrency-foundations/56-faster/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终采集的样本数据, 这些数据由pb格式编码(pb格式数据经常用于大数据场景，数据占用空间低)， pprof 读取 profile.proto 格式的分析样本集合并生成报告以可视化和帮助分析数据。它可以生成文本和图形报告（通过使用点可视化包）。通过命令 go tool pprof 来分析：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# text cmd pprof or use web cmd in pprof view need graphviz&lt;/span&gt;
go tool pprof cpu.out
go tool pprof mem.out
go tool pprof mutex.out
go tool pprof block.out

&lt;span class=&#34;c1&#34;&gt;# http webui pprof view see flamegraph&lt;/span&gt;
go tool pprof -http&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt; cpu.out

&lt;span class=&#34;c1&#34;&gt;# if use net/http/pprof; use http api fetch sample data **.pb.gz file to pprof&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# fetch cpu profiling&lt;/span&gt;
 go tool pprof http://localhost:6060/debug/pprof/profile?seconds&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;30&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;

 go tool pprof http://localhost:6060/debug/pprof/heap
 go tool pprof http://localhost:6060/debug/pprof/block
 go tool pprof http://localhost:6060/debug/pprof/mutex
 go tool pprof http://localhost:6060/debug/pprof/goroutine?debug&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
 go tool pprof http://localhost:6060/debug/pprof/allocs?debug&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
 go tool pprof http://localhost:6060/debug/pprof/threadcreate?debug&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;cpu分析&#34;&gt;CPU分析&lt;/h4&gt;
&lt;p&gt;CPU 分析器依赖于操作系统和信号。当它被激活时，应用程序默认要求操作系统每 10 毫秒中断一次，通过一个&lt;code&gt;SIGPROF&lt;/code&gt;信号。当应用程序收到一个 时&lt;code&gt;SIGPROF&lt;/code&gt;，它会暂停当前活动并将执行转移到探查器。探查器收集诸如当前 goroutine 活动之类的数据，并汇总可以检索的执行统计信息。然后它停止，并继续执行直到下一个&lt;code&gt;SIGPROF&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;可以访问 /debug/pprof/profile 端点来激活 CPU 分析。默认情况下，访问此端点会执行 30 秒的 CPU 分析。在 30 秒内，应用程序每 10 毫秒中断一次。请注意，可以更改这两个默认值：可以使用参数&lt;code&gt;seconds&lt;/code&gt;将分析应该持续多长时间传递给端点（例如，/debug/pprof/profile?seconds=15），可以更改中断率（甚至小于 10 毫秒）。但在大多数情况下，10 毫秒应该足够了，在减小这个值（意味着增加速率）时，应该注意不要损害性能。30 秒后，下载 CPU 分析器的结果。&lt;/p&gt;
&lt;p&gt;可以为不同的函数附加标签。例如，想象一个从不同客户端调用的通用函数。要跟踪两个客户花费的时间，可以使用&lt;code&gt;pprof.Labels&lt;/code&gt;.Go 1.9 开始引入 &lt;strong&gt;&lt;a href=&#34;https://github.com/golang/proposal/blob/master/design/17280-profile-labels.md&#34;&gt;profiler labels&lt;/a&gt;，&lt;/strong&gt; 对于特殊调优性能，比如某个算法模型，或者线上特殊场景触发的性能问题，在这些特殊逻辑段，单独打上一个tag label 进行profiling的收集，通过pprof 工具分析，可以通过tag相关命令来过滤出样本数据分析。使用 &lt;strong&gt;&lt;a href=&#34;http://godoc.org/github.com/rakyll/goutil/pprofutil&#34;&gt;pprofutil&lt;/a&gt;&lt;/strong&gt; 包自动将 HTTP 路径标签添加到处理程序。&lt;/p&gt;
&lt;h4 id=&#34;heap堆分析&#34;&gt;Heap堆分析&lt;/h4&gt;
&lt;p&gt;堆分析可以获得有关当前堆使用情况的统计信息。与 CPU 分析一样，堆分析也是基于样本的。可以更改此速率，但不应该过于细化，因为降低速率越多，堆分析收集数据所需的工作就越多。默认情况下，样本在每 512 KB 堆分配的一次分配中进行分析。&lt;/p&gt;
&lt;p&gt;堆分析还可以查看不同的样本类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alloc_objects&lt;/code&gt;全部的分配的对象数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alloc_space&lt;/code&gt;全部的分配的内存量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inuse_objects&lt;/code&gt;数字已分配但尚未释放的对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inuse_space&lt;/code&gt;数量已分配但尚未释放的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;堆分析的另一个非常有用的功能是跟踪内存泄漏。使用基于 GC 的语言，通常的过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;触发 GC。&lt;/li&gt;
&lt;li&gt;下载堆分析数据。&lt;/li&gt;
&lt;li&gt;等待几秒钟/分钟。&lt;/li&gt;
&lt;li&gt;触发另一个 GC。&lt;/li&gt;
&lt;li&gt;下载另一个堆分析数据。&lt;/li&gt;
&lt;li&gt;比较这两个采集的分析文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在下载数据之前强制执行 GC 是一种防止错误假设的方法。例如，如果在没有先运行 GC 的情况下看到保留对象的峰值，无法确定这是泄漏还是下一次 GC 将收集的对象。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;pprof&lt;/code&gt;，可以下载堆分析文件并同时强制执行 GC。Go中的过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;转到 /debug/pprof/heap?gc=1（触发 GC 并下载采集的样本文件）。&lt;/li&gt;
&lt;li&gt;等待几秒钟/分钟。&lt;/li&gt;
&lt;li&gt;再次转到 /debug/pprof/heap?gc=1。&lt;/li&gt;
&lt;li&gt;用于&lt;code&gt;go tool pprof -http=:8080 -diff_base &amp;lt;file2&amp;gt; &amp;lt;file1&amp;gt;&lt;/code&gt;比较两个采集文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 与堆相关的另一种分析类型是&lt;code&gt;allocs&lt;/code&gt;，它报告分配。堆分析显示堆内存的当前状态。要了解自应用程序启动以来过去的内存分配情况，可以使用分配分析。如前所述，由于栈分配很便宜，因此它们不属于此分析的一部分，该分析仅关注堆。&lt;/p&gt;
&lt;p&gt;tips: 关于性能分析，方法论，关注的指标，可以在 &lt;a href=&#34;https://www.brendangregg.com/systems-performance-2nd-edition-book.html&#34;&gt;&lt;strong&gt;性能之巅&lt;/strong&gt;&lt;/a&gt; 这本书中找到相关介绍，本质上都是在系统层面监控，分析，定位。&lt;/p&gt;
&lt;h4 id=&#34;goroutines分析&#34;&gt;Goroutines分析&lt;/h4&gt;
&lt;p&gt;该&lt;code&gt;goroutine&lt;/code&gt;配置文件报告应用程序中所有当前 goroutine 的堆栈跟踪。可以使用 debug/pprof/goroutine/?debug=0 下载一个文件并go tool pprof再次采集分析， 可以分析是否golang在持续上涨，进而判断是否泄露。可以查看 goroutine 分析器数据以了解系统的哪一部分是可疑的。&lt;/p&gt;
&lt;h4 id=&#34;block分析&#34;&gt;Block分析&lt;/h4&gt;
&lt;p&gt;配置文件&lt;code&gt;block&lt;/code&gt;报告正在进行的 goroutines 阻塞等待同步原语的位置。可能性包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在无缓冲通道上发送或接收&lt;/li&gt;
&lt;li&gt;发送到一个完整的频道&lt;/li&gt;
&lt;li&gt;从空频道接收&lt;/li&gt;
&lt;li&gt;互斥锁争用&lt;/li&gt;
&lt;li&gt;网络或文件系统等待&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Block分析还记录了 goroutine 等待的时间，可以通过 debug/pprof/block 访问。如果怀疑性能因阻止调用而受到损害，此采样分析文件可能会非常有用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;block&lt;/code&gt;默认情况下不启用采样分析文件：必须调用才能&lt;code&gt;runtime.SetBlockProfileRate&lt;/code&gt;启用它。此函数控制报告的 goroutine 阻塞事件的比例。一旦启用，分析器将继续在后台收集数据，即使不调用 debug/pprof/block 。如果想设置一个高速率，那么要小心，以免损害性能。&lt;/p&gt;
&lt;h4 id=&#34;完整的-goroutine-栈dump&#34;&gt;完整的 goroutine 栈dump&lt;/h4&gt;
&lt;p&gt;如果遇到死锁或怀疑 goroutines 处于阻塞状态，则完整的 goroutine 栈dump (debug/pprof/goroutine/?debug=2) 会创建所有当前 goroutine 堆栈跟踪的dump数据。这有助于作为分析首次步骤&lt;/p&gt;
&lt;h4 id=&#34;mutex分析&#34;&gt;Mutex分析&lt;/h4&gt;
&lt;p&gt;如果怀疑应用程序花费大量时间等待锁定互斥量，从而损害执行，可以使用mutex分析。&lt;/p&gt;
&lt;p&gt;在生产环境建议启用&lt;code&gt;pprof&lt;/code&gt;，在发现性能问题，延时，负载，内存空间上涨等问题，可以采集对应现场信息进行分析，对于cpu的采集会导致性能下降，但仅在启用它们期间才会发生。&lt;/p&gt;
&lt;p&gt;tips: 通过 &lt;strong&gt;&lt;a href=&#34;https://go.dev/blog/pprof&#34;&gt;https://go.dev/blog/pprof&lt;/a&gt;&lt;/strong&gt; 学习pprof 入门很合适，demo: &lt;a href=&#34;https://github.com/rsc/benchgraffiti&#34;&gt;https://github.com/rsc/benchgraffiti&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;执行跟踪器-execution-tracer&#34;&gt;执行跟踪器 Execution Tracer&lt;/h4&gt;
&lt;p&gt;trace和pprof一样，也有三种方式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用运行时trace包 接口API来采样数据&lt;/strong&gt;：https://pkg.go.dev/runtime/trace 接口api来收集开始到结束区间的trace信息，和 runtime/pprof 包一样将采集的trace信息写入文件，或者二次开发写入网络io, push到三方平台去分析，常用语微服务的可视化分析监控。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用网络net/http pprof包 http接口来采样数据&lt;/strong&gt;： &lt;a href=&#34;http://pkg.go.dev/net/http/pprof&#34;&gt;https: //pkg.go.dev/net/http/pprof&lt;/a&gt;； 和pprof http接口一样，采集trace的下载接口，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;http://localhost:6060/debug/pprof/trace?seconds&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用基准压测来采样数据：&lt;/strong&gt; &lt;a href=&#34;https://pkg.go.dev/cmd/go#hdr-Testing_flags&#34;&gt;https://pkg.go.dev/cmd/go#hdr-Testing_flags&lt;/a&gt;  使用 -trace trace.out&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# sampling&lt;/span&gt;
go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -v -bench&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Benchmark_parallelMergesortV1$ -count&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -benchtime&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1s ./08-concurrency-foundations/56-faster/ -trace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;trace.out
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将采集到的trace数据通过 go tool trace 对采集数据文件 trace.out 进行可视化分析。在可视化页面就可以看到对应分析的信息，有对应说明，其分析的信息如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运行 goroutines 的事件时间表：查看整体时间段的trace信息，线程数，协程数，堆，GC时间等等； goroutine 分析，查看每个goroutine的执行时间，包括网络等待，同步block, 系统调用，调度等待，GC清扫，GC暂停(SWT)&lt;/li&gt;
&lt;li&gt;查看调用链路即每个函数耗时delay，包括net 网络io, block 阻塞io, syscall 系统调用，sched 协程调度情况，这些profile 可以导出，进行单独分析&lt;/li&gt;
&lt;li&gt;使用&lt;a href=&#34;https://pkg.go.dev/runtime/trace&#34;&gt;https://pkg.go.dev/runtime/trace&lt;/a&gt; 包开发，具体在模块区域Region，摸个任务task下的监控信息，开放出来，根据用户场景自定以开发。显示的每个直方图桶都包含一个样本跟踪记录事件序列，例如 goroutine 创建、日志事件和子区域开始/结束时间。&lt;/li&gt;
&lt;li&gt;垃圾收集指标, Minimum mutator utilization。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而且可以通过&lt;code&gt;go tool trace -pprof=TYPE trace.out &amp;gt; TYPE.pprof&lt;/code&gt; 将不同采集类型的数据从trace数据中导出，进而可以通过go tool pprof进行单独分析，导出数据类型如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# net: network blocking profile&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# sync: synchronization blocking profile&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# syscall: syscall blocking profile&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# sched: scheduler latency profile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;profiling和tracer结合使用： 比如 使用profiling分析工具来分析内存或 CPU 使用率过高的原因；然后通过tracer 工具来分析每个goroutine的调度情况，以及时间段的执行情况，是否发生GC, 是否有系统调用等等。trace粒度更细，但是分析更耗时。&lt;/p&gt;
&lt;p&gt;tips:  具体进一步实践，可以一起学习，掌握原理，熟练工具：&lt;/p&gt;
&lt;p&gt;Felix Geisendörfer  &lt;strong&gt;&lt;a href=&#34;https://github.com/DataDog/go-profiler-notes/blob/main/guide/README.md&#34;&gt;The Busy Developer’s Guide to Go Profiling, Tracing and Observability&lt;/a&gt;&lt;/strong&gt; 中的profiling, tracing, ob相关实验notes；&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://swtch.com/~rsc/&#34;&gt;Russ Cox&lt;/a&gt; 关于 &lt;a href=&#34;https://research.swtch.com/telemetry&#34;&gt;&lt;strong&gt;telemetry&lt;/strong&gt;&lt;/a&gt; 引入 go toolchain(工具链)相关的设计思考; 讨论非常活跃，与时俱进呀~ 很期待这个功能。可以打通golang开发的应用程序 和 OTEL 相关监控系统的数据格式交互，进行同一标准管理。&lt;/p&gt;
&lt;h3 id=&#34;99不了解-gc-的工作原理&#34;&gt;99.不了解 GC 的工作原理&lt;/h3&gt;
&lt;p&gt;垃圾收集器（GC）是Go 语言的重要组成部分，跟踪和释放不再需要的堆分配。了解 GC 的工作原理有助于优化应用程序。&lt;/p&gt;
&lt;h4 id=&#34;概念简介&#34;&gt;概念简介&lt;/h4&gt;
&lt;p&gt;跟踪垃圾回收，其通过循着指针来标识正在使用的、所谓的活动对象，通过活动对象构建的对象图，&lt;/p&gt;
&lt;p&gt;GC是基于标记清除算法，主要是mark-sweep 2个阶段，将mark操作进行进一分解，其过程如下：&lt;/p&gt;
&lt;p&gt;Mark setup (func Stack scan) → Make (concurrent make and assist make, make  termination) → concurrent Sweep ； 其中 开始Mark setup的时候会有非常短暂的STW(平均每 10 到 30 微秒),  标记终止(make  termination) 也会有STW, 进行收尾工作时间稍长，可以简单认为，STW发生在mark的开始和结束(开始时找到扫描开始的初始位置，开启写屏障；结束时关闭写屏障，进行收尾)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mark 标记阶段：遍历堆的所有对象，采用 &lt;a href=&#34;https://github.com/rubinius/rubinius-website-archive/blob/cf54187d421275eec7d2db0abd5d4c059755b577/_posts/2013-06-22-concurrent-garbage-collection.markdown&#34;&gt;&lt;strong&gt;三色标记算法&lt;/strong&gt;&lt;/a&gt; (Go 1.5引入)，标记是否还在使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mark setup:  即mark开始前的准备工作，找到goroutine中函数栈帧中的扫描位置， 打开写屏障(write barrier，前面已经介绍过)，允许在垃圾回收期间在堆上保持数据完整性，因为回收器和应用程序的 goroutine 将同时运行。要打开写保护，必须停止运行的每个应用程序 goroutine，产生STW,通常非常快，平均每 10 到 30 微秒；但是有特殊情况，紧密循环比如一个死循环或者循环时间长，没有调用函数触发，进而可能导致垃圾回收无法开始；&lt;/li&gt;
&lt;li&gt;concurrent mark: 在开启写保护器后，开始并发标记阶段。首先，回收器为其自身保留了 25% 可用 CPU 容量 。使用 Goroutine 执行回收工作，并需要应用程序 Goroutine 使用的相同的 P 和 M。开始标记堆内存中仍在使用的值。该工作首先通过检查所有现有 Goroutine 的栈帧以找到指向堆内存的根指针。然后从这些根指针遍历对象图 进行标记。&lt;/li&gt;
&lt;li&gt;assist mark: 如果收集器确定它需要减缓分配，它将会招募应用程序的 Goroutine 协助 Marking 工作，这称为 Mark Assist。任何应用程序 Goroutine 在 Mark Assist 中的时间量与它对堆内存的数据添加量成比例，可以更快地完成收集；如果任意一次收集最终需要大量的 Mark Assist，收集器可以更早开始下一次垃圾收集，以减少下一次收集所需的 Mark Assist 数量(需要辅助mark的任务多，需要提早开始)。&lt;/li&gt;
&lt;li&gt;make  termination： 一旦标记工作完成，开始标记终止。这个阶段将关闭写屏障，执行各种清理任务以及计算下一个回收目标的时刻。在标记阶段处于紧密循环的协程也可能导致标记终止 STW 延迟延长。回收完成后，应用程序协程可以再次使用每个P，应用程序Goroutine可以充分使用cup资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sweep 清除阶段&lt;/strong&gt;：从根开始遍历对象图并释放不再被引用的对象块，清除操作是并发的；释放的过程是异步的，不是真正的清除；当应用程序goroutine尝试在堆内存中分配新内存时，会触发该操作，清理导致的延迟和吞吐量降低被分散到每次内存分配时。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps: 整体思想可以借鉴&lt;/p&gt;
&lt;p&gt;整体GC算法如下：from：&lt;a href=&#34;https://go.dev/talks/2015/go-gc.pdf&#34;&gt;https://go.dev/talks/2015/go-gc.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weedge/mypic/master/2015-go-gc.png?raw=true&#34; alt=&#34;https://raw.githubusercontent.com/weedge/mypic/master/2015-go-gc.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Go GC 还包括一种在消耗高峰后释放内存的方法。假设应用程序基于两个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导致频繁分配大的堆空间的初始化阶段&lt;/li&gt;
&lt;li&gt;具有适度分配小的堆空间的运行时阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go 将如何解决大的heap空间回收后，还会继续使用呢？这是作为 GC 中的周期清理 &lt;em&gt;periodic scavenger&lt;/em&gt;  所考虑的问题(具体可以看&lt;a href=&#34;https://cs.opensource.google/go/go/+/refs/tags/go1.20:src/runtime/mgcscavenge.go&#34;&gt;go1.20:src/runtime/mgcscavenge.go&lt;/a&gt; 代码了解)。一段时间后，GC 检测到不再需要这么大的堆空间，因此它会释放一些内存并将其返回给 OS。&lt;/p&gt;
&lt;p&gt;tips:&lt;/p&gt;
&lt;p&gt;如果GC &lt;em&gt;periodic scavenger&lt;/em&gt; 不够快呢，可以使用手动强制将内存返回给操作系统&lt;code&gt;debug.FreeOSMemory()&lt;/code&gt;；但是这样有些问题，需要慎重使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次将内存都归还给系统，这个操作太重了。会有延迟抖动，因为涉及到 lock&lt;/li&gt;
&lt;li&gt;需要用户自己调这个函数，对代码是有侵入性&lt;/li&gt;
&lt;li&gt;再次重用内存的时候会有较多开销，因为有 page fault&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过pprof/heap采集到的数据，在监控查看 RSS(进程/线程使用的物理内存) 的值 比 正常计算的Go应用进程使用的内存空间要大，主要原因是 Go GC之后内存空间没有马上返回给OS, 而是等到GC &lt;em&gt;periodic scavenger&lt;/em&gt; 触发之后才会释放内存空间到OS中, GC之后未归还的内存空间大小为：HeapIdle(空闲内存大小) - HeapReleased(已释放归还给OS内存大小)；&lt;/p&gt;
&lt;p&gt;重要的问题是，GC 何时运行？Go 中提供两种方式设置 GOGC 环境变量 or debug.SetGCPercent 以及  debug.SetMaxHeap :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GOGC (debug.SetGCPercent )&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与 Java 等其他语言相比，Go 配置仍然相当简单。它依赖于单一环境变量：&lt;code&gt;GOGC&lt;/code&gt;. 该变量定义了自上次 GC 后触发另一次 GC 之前堆增长的百分比；默认值为 100%。&lt;/p&gt;
&lt;p&gt;看一个具体的例子，假设 GC 刚刚被触发，当前堆大小为 128 MB。默认&lt;code&gt;GOGC=100&lt;/code&gt;，则在堆大小达到 256 MB 时触发下一次 GC。每当堆大小翻倍时，默认情况下都会执行一次 GC。此外，如果在过去 2 分钟内未执行 GC，Go 将强制执行一次。&lt;/p&gt;
&lt;p&gt;在生产环境中使用&lt;code&gt;GOGC&lt;/code&gt;使用时需要注意，分析进行微调(取决于具体场景，机器性能)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少阈值，会减低 堆空间 增长，但是增加了 GC 的压力。&lt;/li&gt;
&lt;li&gt;增加阈值，会增加 堆空间 增长，但是减少了 GC 的压力。(适用于free 内存空间大的场景，因为清扫是异步触发的~)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tips: 通过设置&lt;code&gt;GOGC=off&lt;/code&gt;或者&lt;code&gt;debug.SetGCPercent(-1)&lt;/code&gt;关闭&lt;code&gt;GC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;debug.SetMaxHeap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对内存不足（OOM）的情况非常敏感的场景，直接自定一个使用堆大小的上限，可以结合&lt;code&gt;debug.SetGCPercent(-1)&lt;/code&gt;手动关闭&lt;code&gt;GC&lt;/code&gt; 使用，到达最大限制，则触发GC,  对于内存使用比较有规律的场景适合使用，如果频繁很快到达最大限制，则会频繁GC，得不偿失了。&lt;/p&gt;
&lt;h4 id=&#34;gc-跟踪&#34;&gt;GC 跟踪&lt;/h4&gt;
&lt;p&gt;可以通过设置打印 GC 跟踪&lt;code&gt;GODEBUG&lt;/code&gt;环境变量，例如在运行基准测试时：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;GODEBUG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gctrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -bench&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;. -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;tips: 命令中的环境变量GODEBUG值 参考官方文档：&lt;a href=&#34;https://pkg.go.dev/runtime#hdr-Environment_Variables&#34;&gt;Environment_Variables&lt;/a&gt; 设置，以及查看输出格式具体内容说明。每次 GC 运行时启用一个跟踪&lt;code&gt;gctrace&lt;/code&gt;都会写入&lt;code&gt;stderr&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;必须了解 GC 的行为方式才能对其进行优化。可以使用&lt;code&gt;GOGC&lt;/code&gt;来配置下一个 GC 周期何时被触发。在大多数情况下，保持它就&lt;code&gt;100&lt;/code&gt;足够了。但是，如果应用程序可能面临导致频繁 GC 和延迟影响的请求峰值，可以增加该值。最后，在异常请求高峰的情况下，可以考虑使用将虚拟堆大小保持在最小值的技巧。&lt;/p&gt;
&lt;p&gt;tips: 上面只是简单概括的介绍了下，随着时间推移可能不准确，Go中GC是一个复杂的过程，具体细节，可以通过如下文档一起实践学习：&lt;/p&gt;
&lt;p&gt;了解GC细节入门:  &lt;strong&gt;&lt;a href=&#34;https://tip.golang.org/doc/gc-guide?continueFlag=bf311ba190bf0d160b5d3461e092f0f4&#34;&gt;A Guide to the Go Garbage Collector&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&#34;https://go.dev/blog/ismmkeynote&#34;&gt;Getting to Go: The Journey of Go&amp;rsquo;s Garbage Collector&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;了解通过GC Trace定位问题: &lt;a href=&#34;https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html&#34;&gt;&lt;strong&gt;Garbage Collection In Go : Part I - Semantics&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;100不了解在-docker-和-kubernetes-中运行-go-的影响&#34;&gt;100.不了解在 Docker 和 Kubernetes 中运行 Go 的影响&lt;/h3&gt;
&lt;p&gt;根据 2021 年 Go 开发人员调查 ( &lt;a href=&#34;https://go.dev/blog/survey2021-results&#34;&gt;https://go.dev/blog/survey2021-results&lt;/a&gt; )，使用 Go 编写服务是最常见的用途。同时，Kubernetes 是部署这些服务的最广泛使用的平台。了解在 Docker 和 Kubernetes 中运行 Go 的含义非常重要，以防止出现 CPU 节流等常见情况。&lt;/p&gt;
&lt;p&gt;GOMAXPROCS变量定义了负责同时执行用户级代码的操作系统线程的限制。默认情况下，它设置为 OS-apparent 逻辑 CPU 核心数。这在 Docker 和 Kubernetes 的上下文中意味着什么？&lt;/p&gt;
&lt;p&gt;假设 Kubernetes 集群由八个核心节点组成。当一个容器部署在 Kubernetes 中时，可以定义一个 CPU 限制，以确保一个应用程序不会耗尽宿主机的所有资源。例如，以下配置将 CPU 的使用限制为 4,000 millicpu（或 millicores），因此四个 CPU 内核&lt;/p&gt;
&lt;p&gt;可以假设在部署应用程序时，GOMAXPROCS将基于这些限制，因此值为4. 但事实并非如此；它被设置为主机上的逻辑核心数：8。那么，有什么影响呢？&lt;/p&gt;
&lt;p&gt;Kubernetes 使用完全公平调度器 (CFS) 作为进程调度程序。CFS 还用于对 Pod 资源实施 CPU 限制。在管理 Kubernetes 集群时，管理员可以配置这两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cpu.cfs_period_us（全局设置）&lt;/li&gt;
&lt;li&gt;cpu.cfs_quota_us（每个 Pod设置）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者定义了一个时期，后者定义了一个配额。默认情况下，周期设置为 100 毫秒。同时，默认配额值是应用程序在 100 毫秒内可以消耗多少 CPU 时间。限制设置为四个核心，这意味着 400 ms (4 × 100 ms)。因此，CFS 将确保应用程序不会在 100 毫秒内消耗超过 400 毫秒的 CPU 时间。&lt;/p&gt;
&lt;p&gt;想象一个场景，多个 goroutine 当前正在四个不同的线程上执行。每个线程被安排在不同的核心（1、3、4 和 8）上；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F49_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F49_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在第一个 100 ms 期间，有四个线程处于忙碌状态，因此消耗了 400 ms 中的 400：100% 的配额。在第二个时期，消耗了 400 毫秒中的 360 毫秒，依此类推。一切都很好，因为应用程序消耗的资源少于配额。&lt;/p&gt;
&lt;p&gt;但是，记住GOMAXPROCS设置为8。因此，在最坏的情况下，可以有八个线程，每个线程都安排在不同的核心上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F50_Harsanyi.png&#34; alt=&#34;https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781617299599/files/Images/CH12_F50_Harsanyi.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于每 100 毫秒，配额设置为 400 毫秒。如果八个线程忙于执行 goroutine，50 毫秒后，达到 400 毫秒的配额（8 × 50 毫秒 = 400 毫秒）。会有什么后果？CFS 将限制 CPU 资源。因此，在另一个周期开始之前不会分配更多的 CPU 资源。换句话说，应用程序将暂停 50 毫秒。&lt;/p&gt;
&lt;p&gt;例如，平均延迟为 50 毫秒的服务最多可能需要 150 毫秒才能完成。这可能是延迟的 300% 惩罚。&lt;/p&gt;
&lt;p&gt;首先，请关注 Go &lt;a href=&#34;https://github.com/golang/go/issues/33803&#34;&gt;issue 33803&lt;/a&gt;。也许在 Go 的未来版本中，GOMAXPROCS将支持 CFS。&lt;/p&gt;
&lt;p&gt;今天的解决方案是依赖于由优步调用automaxprocs（&lt;a href=&#34;http://github.com/uber-go/automaxprocs&#34;&gt;github.com/uber-go/automaxprocs&lt;/a&gt;）。可以通过&lt;a href=&#34;http://xn--go-hf3c1a925dgwxre7e7sa.uber.org/automaxprocs%E5%9C%A8&#34;&gt;go.uber.org/automaxprocs&lt;/a&gt; 在main.go 中添加一个空白导入来使用这个库；它会自动设置GOMAXPROCS以匹配 Linux 容器 CPU 配额。在前面的示例中，GOMAXPROCS将设置为4而不是8，因此将无法达到 CPU 被节流的状态。&lt;/p&gt;
&lt;p&gt;目前Go 不支持 CFS。GOMAXPROCS基于主机而不是定义的 CPU 限制。因此，可能会达到 CPU 被节流的状态，从而导致长时间的暂停和显着的延迟增加等实质性影响。在 Go 变得支持 CFS 之前，一种解决方案是依靠automaxprocs自动设置GOMAXPROCS为定义的配额。&lt;/p&gt;
&lt;h2 id=&#34;概括&#34;&gt;概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;了解如何使用 CPU 缓存对于优化受 CPU 限制的应用程序很重要，因为 L1 缓存比主内存快大约 50 到 100 倍。&lt;/li&gt;
&lt;li&gt;了解高速缓存行概念对于理解如何在数据密集型应用程序中组织数据至关重要。CPU 不会逐字获取内存；相反，它通常将内存块复制到 64 字节的缓存行。要充分利用每个单独的缓存行，利用好空间局部性。&lt;/li&gt;
&lt;li&gt;让 CPU 可以预测代码也是优化某些功能的有效方法。例如，单位或恒定步幅对于 CPU 是可预测的，但非单位步幅（例如，链表）是不可预测的。&lt;/li&gt;
&lt;li&gt;为避免关键步幅，从而只使用缓存的一小部分，请注意缓存是分区的。&lt;/li&gt;
&lt;li&gt;了解false sharing对并发程序的影响，伪共享因为cache line的同步会带来一些cpu 时钟周期的性能损失。&lt;/li&gt;
&lt;li&gt;使用指令级并行 (ILP) 来优化代码的特定部分，以允许 CPU 执行尽可能多的并行指令。识别数据危害是主要步骤之一。&lt;/li&gt;
&lt;li&gt;可以通过记住在 Go 中基本类型与它们自己的大小对齐来避免常见错误。例如，请记住，按大小降序重组结构的字段可以导致更紧凑的结构（更少的内存分配和可能更好的空间局部性）。&lt;/li&gt;
&lt;li&gt;在优化 Go 应用程序时，理解堆和栈之间的根本区别也应该是你的核心知识的一部分。栈分配几乎是免费的，而堆分配速度较慢并且依赖于 GC 来清理内存。&lt;/li&gt;
&lt;li&gt;减少分配也是优化 Go 应用程序的一个重要方面。这可以通过不同的方式完成，例如仔细设计 API 以防止共享，了解常见的 Go 编译器优化，以及使用sync.Pool.&lt;/li&gt;
&lt;li&gt;使用快速路径内联技术有效地减少调用函数的摊销时间。&lt;/li&gt;
&lt;li&gt;依靠分析和执行跟踪器来了解应用程序的执行方式和要优化的部分。&lt;/li&gt;
&lt;li&gt;了解如何调整 GC 可以带来多种好处，例如更有效地处理突然增加的负载。&lt;/li&gt;
&lt;li&gt;为帮助避免在 Docker 和 Kubernetes 中部署时出现 CPU 节流，请记住 Go 不支持 CFS。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总共花了10天左右把 100-go-mistakes-and-how-to-avoid-them 这本书看完，对于一些文中不够升入的地方，进行挖掘了下，了解弄清楚了背后的原理，知其然知其所以然之后，有些mistake是一些共性的问题，而且对于文中每个mistake，都应去实践操作一下，熟悉利用好Go相关工具，编译，测试，构建等等，文中大部分是语言层面的，工程方面也有些，特别像最后介绍的在K8S docker中CPU对Go语言本身的影响，实际遇到之后才会印象更深，应该从错误中去总结，而不是总结之后继续犯错，如此折返，意义不大；从错误点中多挖掘底层逻辑多思考总结。&lt;/p&gt;
&lt;p&gt;原书地址： &lt;a href=&#34;https://learning.oreilly.com/library/view/100-go-mistakes/9781617299599/&#34;&gt;https://learning.oreilly.com/library/view/100-go-mistakes/9781617299599/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TIPS： 文中对于channel 介绍的比较少，比如channel 在生产(发送)和消费(接受)之间，1:1,1:N,M:1,M:N场景下如何关闭; 还有GPM的调度模型的详细介绍，以及内存分配器(这块在每个版本中相对迭代比较多，最好结合当前开发生产环境中使用的Go版本对其源码分析) 没有详细涉及到，可参考这些资料扩展： &lt;a href=&#34;https://go101.org/article/channel-closing.html&#34;&gt;channel-closing&lt;/a&gt; , &lt;a href=&#34;https://www.google.com.hk/search?q=kavya%20golang#fpstate=ive&amp;amp;vld=cid:089b5108,vid:KBZlN0izeiY&#34;&gt;Understanding Channels&lt;/a&gt; , &lt;a href=&#34;https://medium.com/@ankur_anand/a-visual-guide-to-golang-memory-allocator-from-ground-up-e132258453ed&#34;&gt;Go Memory Allocator&lt;/a&gt; ，&lt;a href=&#34;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html&#34;&gt;scheduling-in-go&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Go tips-笔记: 测试 82-90 mistakes</title>
      <link>https://weedge.github.io/post/notions/go-tips/go-tips-11-testing/</link>
      <pubDate>Mon, 20 Feb 2023 14:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/notions/go-tips/go-tips-11-testing/</guid>
      
        <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;测试是项目生命周期的一个重要方面。它提供了无数的好处，例如建立对应用程序的信心、充当代码文档以及使重构更容易。与其他一些语言相比，Go 具有强大的编写测试原语。主要讨论测试过程变得脆弱、效率低下和准确性低的常见错误。这类问题属于工程规范实践，有些case同样适用于其他语言。&lt;/p&gt;
&lt;p&gt;Go 中提供 go test 工具来执行测试，可以查看具体的开发文档： &lt;strong&gt;&lt;a href=&#34;https://pkg.go.dev/cmd/go#hdr-Testing_flags&#34;&gt;https://pkg.go.dev/cmd/go#hdr-Testing_flags&lt;/a&gt;&lt;/strong&gt;  里面介绍了每个模式的具体使用方式，使用好这些测试模式flag，可以更快执行或更好地发现可能错误，进而保证代码质量，工程代码稳定性建设上的重要一环。Go中支持4种测试函数：单测函数，基准压测函数，模糊测试，以及打印输出样例测试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;TestXxx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;BenchmarkXxx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;FuzzXxx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ExampleXxx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;The output of\\nthis example.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// Output: The output of
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// this example.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;
&lt;h3 id=&#34;82不对测试进行分类&#34;&gt;82.不对测试进行分类&lt;/h3&gt;
&lt;p&gt;功能测试大致分为单元测试，集成测试，以及端到端的测试，单元测试则是程序测试case覆盖率的保障，列举Go中3种常见的测试分类方法&lt;/p&gt;
&lt;h4 id=&#34;build-tags&#34;&gt;Build tags&lt;/h4&gt;
&lt;p&gt;build tags 的一些使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试环境使用 mock 服务；而正式环境使用真实数据&lt;/li&gt;
&lt;li&gt;免费版、专业版和企业版提供不同的功能&lt;/li&gt;
&lt;li&gt;不同操作系统的兼容性处理。通常用于跨平台，例如 windows，linux，mac 不同兼容处理逻辑。&lt;/li&gt;
&lt;li&gt;go 低版本的兼容处理&lt;/li&gt;
&lt;li&gt;对测试用例进行分类测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过在测试文件中加上对应的测试分类标签，在测试的时候方便对一类tag进行测试，而不需要跑全部测试用例, 比如打上 mock 标签进行用于 mock 一类测试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;//go:build !&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;mock1 &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mock2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; mock3 &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; !&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;mock4 &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mock5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
// +build !mock1 !mock2 mock3 !mock4 !mock5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;tips: 这个是为了举个例子，具体测试tag需要因场景逻辑打上，确保测试文件tag无歧义。&lt;/p&gt;
&lt;p&gt;从 Go 1.17 开始，语法&lt;code&gt;//+build foo&lt;/code&gt;被替换为&lt;code&gt;//go:build foo&lt;/code&gt;. 目前&lt;code&gt;gofmt&lt;/code&gt;同步两种形式以帮助迁移。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 默认仅运行包中tag为空的测试case&lt;/span&gt;
go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -v .
&lt;span class=&#34;c1&#34;&gt;# 仅运行包中 mock3 的测试case&lt;/span&gt;
go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; --tags&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;mock3 -v .
&lt;span class=&#34;c1&#34;&gt;# 仅运行包中 mock1 &amp;amp;&amp;amp; mock2 的测试case&lt;/span&gt;
go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; --tags&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;mock1,mock2 -v .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;环境变量&#34;&gt;环境变量&lt;/h4&gt;
&lt;p&gt;使用build tag方式构建测试用，随着tag的增加，可能会隐藏掉其中的错误，而且需要去查看测试文件中的tag有哪些。环境变量这种方式是build tags 的补充吧，对于没有设置环境变量的情况下，明确显示哪些测试是跳过的测试，比如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; os.Getenv&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;INTEGRATION&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		t.Skip&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;skipping integration test&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;tips: tag是测试文件粒度分类(Go 构建工具支持)，环境变量是测试代码粒度分类(手动代码逻辑)&lt;/p&gt;
&lt;h4 id=&#34;short-模式&#34;&gt;Short 模式&lt;/h4&gt;
&lt;p&gt;另一种对测试进行分类的方法与它们的速度有关。可能不得不将短期运行的测试与长期运行的测试区分开来。&lt;/p&gt;
&lt;p&gt;作为说明，假设有一组单元测试，其中一个是出了名的慢。想对慢速测试进行分类，这样就不必每次都运行它（尤其是在保存文件后触发），使用testing.Short区分如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;TestLongRunning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Short&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Skip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;skipping long-running test&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行测试是，通过-short 参数来执行跳过&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -v -short .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这三种方式可以组合使用，例如，项目包含长时间运行的单元测试，则使用构建标记或环境变量对测试进行分类（例如，作为单元测试，mock测试，或者集成测试）和使用短模式来跳过长时间运行的测试。&lt;/p&gt;
&lt;h3 id=&#34;83不启用--race&#34;&gt;83.不启用 -race&lt;/h3&gt;
&lt;p&gt;对于并发程序代码的测试，需要检测是否存在data race， 需要使用 -race 模式来构建测试，比如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;race&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种方法使启用竞争检测器，它可以检测代码以捕获潜在的数据竞争(没有打上!race标记的文件)。启用时，它对内存和性能有显着影响，因此必须在特定条件下使用，例如本地测试或 CI。在生产中，应该避免它（或者只在金丝雀发布的情况下使用)。&lt;/p&gt;
&lt;p&gt;竞争检测器无法捕捉到误报（明显的数据竞争并不是真实的）。因此，如果收到警告，就知道代码包含数据竞争。相反，它有时会导致漏报（缺少实际的数据竞争）。对于漏报的情况，可以尽可能多的迭代来检测。&lt;/p&gt;
&lt;h3 id=&#34;84不使用测试执行模式&#34;&gt;84.不使用测试执行模式&lt;/h3&gt;
&lt;h4 id=&#34;-parallel&#34;&gt;-parallel&lt;/h4&gt;
&lt;p&gt;默认情况下 go test 在不同的 package 之间是并行执行测试，在每个 package 内部是串行执行测试。如果想要在 package 内部开启并行测试，需要在测试函数中显式执行 t.Parallel() 告诉 go test 这个函数可以与其他测试并行执行，一旦开启并行测试，一定要确保测试函数之间的资源竞争的问题已经得到正确的解决。执行 go test -parallel n 来制定n个测试函数并行执行(需要再显示调用了t.Parrallel)。对于执行慢的测试函数，相互之间没有资源竞争，可以加入t.Parrallel 来同时执行，提高测试的执行速度。&lt;/p&gt;
&lt;h4 id=&#34;-shuffle&#34;&gt;-shuffle&lt;/h4&gt;
&lt;p&gt;从 Go 1.17 开始引入，可以随机化测试和基准测试的执行顺序， 设置为&lt;code&gt;on&lt;/code&gt;或&lt;code&gt;off&lt;/code&gt;启用或禁用随机测试；编写测试时的最佳做法是将它们隔离开来。例如，它们不应依赖于执行顺序或共享变量。这些隐藏的依赖关系可能意味着一个可能的测试错误，或者更糟的是，一个在测试期间不会被捕获的错误。&lt;/p&gt;
&lt;p&gt;应该对现有的测试标志保持谨慎，并随时了解最新 Go 版本的新功能。运行parallel测试或者将测试分再不同的包中，可以减少运行所有测试的总体执行时间。shuffle测试可以帮助发现隐藏的依赖关系，这些依赖关系可能意味着在以相同顺序运行测试时出现测试错误，甚至不可见的错误。&lt;/p&gt;
&lt;h3 id=&#34;85不使用表驱动测试&#34;&gt;85.不使用表驱动测试&lt;/h3&gt;
&lt;p&gt;这个在vscode, goland IDE中已经集成了，对应函数生成对应单测函数时，会自动给出表驱动测试模版，编写测试用例，用于覆盖函数分支场景；如果不是用表驱动测试的话， 会出现大量的冗余函数，而且表达含义也会相对模糊，直接放入一个测试函数中来编写用例测试即可，也便于对整个函数的测试覆盖。通过t.Run来执行这些测试用例，进行期望值比较，同时也可以使用t.Parallel() 通过parallel 模式来加速测试，以及通过shuffle来随机测试。&lt;/p&gt;
&lt;h3 id=&#34;86在单元测试中使用timesleep&#34;&gt;86.在单元测试中使用time.Sleep&lt;/h3&gt;
&lt;p&gt;在测试并发编程时，可能存在竞争条件race condition 的场景，导致程序的执行顺序不同，进入影响测试的准确性，如果使用time.Sleep 之后来断言值， 可能会有不同的结果，是不确定性的，所以，尽量使用管道同步的方式来进行断言测试；如果同步不可能做到的话， 可以重试进行断言，比如常用的testify 测试包，使用Eventually函数实现了最终应该成功的断言，这比使用被动睡眠更好的选择来消除测试中的非确定性。&lt;/p&gt;
&lt;h3 id=&#34;87没有有效地处理时间-api&#34;&gt;87.没有有效地处理时间 API&lt;/h3&gt;
&lt;p&gt;对于函数中有time.Now()获取当前时间，而测试是也依赖当前时间的处理，导致那个时间点可能会存在差异，一种方式是提供全局共享变量，如果使用并行测试的，全部共享变量会引入数据竞争，导致无法并行测试，所以最好的方式，修改下所要测试的函数，去掉time.Now()的依赖，使用time.Time类型作为传入参数，有函数使用方一起来定义，这样可方便测试。&lt;/p&gt;
&lt;h3 id=&#34;88不使用测试实用程序包&#34;&gt;88.不使用测试实用程序包&lt;/h3&gt;
&lt;p&gt;httptest 和 iotest 是两个常用的包，应该利用起来，构造于http 和 io 相关函数的测试。&lt;/p&gt;
&lt;h4 id=&#34;httptest&#34;&gt;httptest&lt;/h4&gt;
&lt;p&gt;httptest 包不需要通过建立网络连接就可以进行测试，主要用来测试服务端的http api handler 函数 以及 客户端的http caller函数。具体查看开发文档：https://pkg.go.dev/net/http/httptest&lt;/p&gt;
&lt;p&gt;对于测试服务中api Handler的场景，只需要通过httptest.NewRequest 来构建api的请求数据的Reader，以及使用httptest.NewRecorder 来创建一个往请求api中写入响应数据的Writer, 这样在写测试用例时候， 直接模拟接口请求数据，编写相关的测试case,  测试的api handler 返回的数据 可以从Writer中获取到，进而可以做接口响应数据的断言假设，比如 返回状态码，响应body数据， 响应头中的数据。&lt;/p&gt;
&lt;p&gt;对于测试客户端中相关的http client caller函数， 通过httptest.NewServer建立对应api handler服务, 客户端相关的http client &lt;a href=&#34;http://xn--callerhttp-uh4py1d60ohkhow7ewtwc.Client.Do&#34;&gt;caller函数可以使用http.Client.Do&lt;/a&gt; 对server.URL进行调用了，进而可以对返回的值进行断言测试。还可以使用httptest.NewTLSServer 建立一个TLS的测试服务。&lt;/p&gt;
&lt;p&gt;grpc也有对应的测试库grpc/test 库，无需建立网络连接即可测试，具体查看开发文档：https://pkg.go.dev/google.golang.org/grpc/test&lt;/p&gt;
&lt;h4 id=&#34;iotest&#34;&gt;iotest&lt;/h4&gt;
&lt;p&gt;该iotest包 ( &lt;a href=&#34;https://pkg.go.dev/testing/iotest&#34;&gt;https://pkg.go.dev/testing/iotest&lt;/a&gt; ) 实现了io Reader ，Writer， Closer 等接口， 用于测试使用io 相关接口的方法测试；&lt;/p&gt;
&lt;h3 id=&#34;89编写不准确的基准&#34;&gt;89.编写不准确的基准&lt;/h3&gt;
&lt;p&gt;对于性能优化，不能盲猜，需要编写基准压测来 分析评估 具体性能，然而编写基准测试并不简单。编写不准确的基准并根据它们做出错误的假设可能非常简单。使用go test -bench &lt;code&gt;regexp&lt;/code&gt; 匹配对应BenchmarkXxxx函数进行基准压测，默认运行1s, 运行时间通过-benchtime 来调整，其他性能分析的参数见开发文档。以下几种常见编写不准确基准压测的情况：&lt;/p&gt;
&lt;h4 id=&#34;不重置或暂停定时器&#34;&gt;不重置或暂停定时器&lt;/h4&gt;
&lt;p&gt;在基准压测时，可能会执行一个耗时长的初始准备逻辑，比如准备大量的数据用于基准压测，这个时候需要引入 testing.B.ResetTimer() 来重置时间，在开始基准压测，从测试结果中丢弃这部分耗时设置； 还有一种情况是在基准压测的循环里，这需要使用testing.B.StopTimer()停止时间，处理完准备逻辑，在使用testing.B.StartTimer()开始时间来处理基准测试函数。&lt;/p&gt;
&lt;h4 id=&#34;对微基准做出错误的假设&#34;&gt;对微基准做出错误的假设&lt;/h4&gt;
&lt;p&gt;对于基准测试，不能只用一轮或几轮基准实验，就做出了假设；基准测试受当前机器运行时环境的影响，cpu，内存负载情况等；所以在进行基准压测试，如果测试的值有所偏失，应该按照概率论中的大数定律，将压测的时间放长(-benchtime 调整)，而且测试的次数可以增加些(-count 调整)， 将这些性能数据，通过benchstat &lt;a href=&#34;https://pkg.go.dev/golang.org/x/perf/cmd/benchstat&#34;&gt;https://pkg.go.dev/golang.org/x/perf/cmd/benchstat&lt;/a&gt; 工具来 对比分析 前后benchmark的统计数据, 如果对比结果误差很小，则说明性能无差异。基准测试必须基于在合理环境中通过多次样本取证进行A/B 比较之后才能给出比较正确的结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;golang&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;perf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;benchstat&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;latest&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NONE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bench&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BenchmarkAtomicStoreInt32&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;benchtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;benchmem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;89&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;benchmark&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wrong&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assumptions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tee&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;smp1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txt&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NONE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bench&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BenchmarkAtomicStoreInt32&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;benchtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;benchmem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;89&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;benchmark&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wrong&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assumptions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tee&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;smp2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txt&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;benchstat&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;smp1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txt&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;smp2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txt&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NONE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bench&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BenchmarkAtomicStore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;benchtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;benchmem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;89&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;benchmark&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wrong&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assumptions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tee&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;smp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txt&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;benchstat&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;smp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;不注意编译器优化&#34;&gt;不注意编译器优化&lt;/h4&gt;
&lt;p&gt;这个case 在Go中有对应issue（https://github.com/golang/go/issues/14813）; benchmark的函数代码比较简单，被内联到基准压测文件中，导致测试为空的，这样导致空的基准压测在执行，每次op时间相当于一个时钟周期时间，如何避免编译器优化欺骗基准测试结果的模式：&lt;/p&gt;
&lt;p&gt;将被测函数的结果分配给局部变量，然后将最新结果分配给全局变量，先分配局部变量在栈上，不影响测试，而将局部变量复制给全局变量，分配在堆上，以防编译器优化进行inline 处理。&lt;/p&gt;
&lt;p&gt;还有一种方式是直接使用//go:noinline 标记函数，在编译阶段防止inline。&lt;/p&gt;
&lt;h4 id=&#34;被观察者效应愚弄&#34;&gt;被观察者效应愚弄&lt;/h4&gt;
&lt;p&gt;在基准压测一个CPU-Bound的函数时，需要注意cpu cache 局部性原理对基准压测的影响；为了防止cpu cache对基准压测的影响，可以在每次测试前，创建一个新的测试数据用于测试，比如基准压测矩阵运算函数，在每次测试前，新建一个测试矩阵数据。&lt;/p&gt;
&lt;h3 id=&#34;90没有探索所有的-go-测试功能&#34;&gt;90.没有探索所有的 Go 测试功能&lt;/h3&gt;
&lt;p&gt;工欲善其事必先利其器，充分掌握go test工具有助于写出高质量的代码。&lt;/p&gt;
&lt;h4 id=&#34;代码覆盖率&#34;&gt;代码覆盖率&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 输出测试覆盖文件&lt;/span&gt;
go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -coverprofile&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;coverage.out ./...
&lt;span class=&#34;c1&#34;&gt;# 分析测试覆盖文件&lt;/span&gt;
go tool cover -html&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;coverage.out
&lt;span class=&#34;c1&#34;&gt;# 一个包在另外一个包中会测试到，需要表明测试覆盖到的包&lt;/span&gt;
go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -coverpkg&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./... -coverprofile&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;coverage.out ./...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;tips: 在追踪代码覆盖率时要保持谨慎。拥有 100% 的测试覆盖率并不意味着应用程序没有错误；需正确推理测试涵盖的内容。&lt;/p&gt;
&lt;h4 id=&#34;从不同的包进行测试&#34;&gt;从不同的包进行测试&lt;/h4&gt;
&lt;p&gt;这种在业务功能函数测试，或者对外部进行测试， 关注包的公开api行为而不是内部的具体实现细节，专注于测试暴露的行为。 常用的测试如BDD 开发， 只关注包的公开行为， 比如&lt;a href=&#34;https://onsi.github.io/ginkgo/&#34;&gt;ginkgo&lt;/a&gt; ；编写的测试用例文件可以不用和测试函数在同一个包内，可以单独定义测试文件夹，对不同包来进行测试用例的开发。&lt;/p&gt;
&lt;h4 id=&#34;helper功能函数&#34;&gt;helper功能函数&lt;/h4&gt;
&lt;p&gt;在进行测试是，需要测试前的准备，这些准备工作逻辑helper功能函数，用于初始化一些对象来测试，参数需要传入*testing.T,  在初始逻辑中判读初始的错误情况，如果错误直接调用t.Fatal退出即可，只返回对应测试对象，这样可以方便复用，无需在处理错误，方便其他测试场景使用。这个属于代码质量问题啦。&lt;/p&gt;
&lt;h4 id=&#34;安装setup和拆卸teardown&#34;&gt;安装(setup)和拆卸(teardown)&lt;/h4&gt;
&lt;p&gt;如果单个测试初始执行完测试后需要清理一些初始资源，可以使用 testing.T.Cleanup函数来做单测的收尾工作；多个调用入栈操作，单测完出栈执行。&lt;/p&gt;
&lt;p&gt;如果测试文件都依赖于初始化之后才开始测试的话， 可以放在全部测试开始之前的位置进行测试的setup；在全部测试结束后对初始化的资源进行释放teardown； 可以通过在TestMain中定义整体逻辑如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;TestMain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;setupHelper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// run all test func
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;teardownHelper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; 
	&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;initHelper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Cleanup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Cleanup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// first to cleanup
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// init
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种方式在测试开发框架包中经常使用到，比如ginkgo中的BeforeSuite和AfterSuite函数，在测试前后执行。&lt;/p&gt;
&lt;h2 id=&#34;概括&#34;&gt;概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用构建标志、环境变量或 -short模式对测试进行分类可以使测试过程更加高效。可以使用构建标志或环境变量（例如，单元测试与集成测试）创建测试类别，并区分短期运行测试和长期运行测试以确定要执行的测试类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;race&lt;/code&gt;强烈建议在编写并发应用程序时启用该标志。这样做可以捕捉到可能导致软件错误的潜在数据竞争；开启race检测会消耗内存，一般在开发测试，CI, 金丝雀发布(预发环境)的时候使用。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;parallel&lt;/code&gt;标志是加速测试的有效方法，尤其是长时间运行的测试。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;shuffle&lt;/code&gt;标志帮助确保测试套件不依赖于可能隐藏错误的错误假设。&lt;/li&gt;
&lt;li&gt;表驱动测试是将一组类似测试分组以防止代码重复并使未来更新更易于处理的有效方法。&lt;/li&gt;
&lt;li&gt;避免time.Sleep使用同步来使测试更稳定、更健壮。使用channel来进行同步，如果无法同步，请考虑重试方法。&lt;/li&gt;
&lt;li&gt;了解如何使用时间 API 处理函数是使测试不那么不稳定的另一种方法。可以使用标准技术，例如将时间作为隐藏依赖项的一部分处理或要求客户提供时间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;httptest&lt;/code&gt;包有助于处理 HTTP 应用程序。它提供了一组实用程序来测试客户端和服务器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iotest&lt;/code&gt;包有助于编写&lt;code&gt;io.Reader&lt;/code&gt;和测试应用程序是否容错。&lt;/li&gt;
&lt;li&gt;关于基准：
&lt;ul&gt;
&lt;li&gt;使用时间方法来保持基准的准确性。&lt;/li&gt;
&lt;li&gt;在处理微基准时，增加&lt;code&gt;benchtime&lt;/code&gt;或使用诸如&lt;code&gt;benchstat&lt;/code&gt;此类的工具会有所帮助。&lt;/li&gt;
&lt;li&gt;如果最终运行应用程序的系统与运行微基准测试的系统不同，请注意微基准测试的结果。&lt;/li&gt;
&lt;li&gt;确保被测函数会产生副作用，以防止编译器优化导致基准测试结果上有误差。&lt;/li&gt;
&lt;li&gt;为防止观察者效应，强制基准重新创建 CPU-Bound函数使用的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用带标志的代码覆盖率&lt;code&gt;coverprofile&lt;/code&gt;可以快速查看代码的哪一部分需要更多关注。&lt;/li&gt;
&lt;li&gt;将单元测试放在不同的包中，以强制编写专注于暴露行为而非内部的测试。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;testing.T&lt;/code&gt;变量而不是经典变量来处理错误&lt;code&gt;if err != nil&lt;/code&gt;使代码更短且更易于阅读。&lt;/li&gt;
&lt;li&gt;可以使用设置安装和拆卸功能来配置复杂的环境，例如在集成测试的情况下。&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>Go tips-笔记: 标准库 75-81 mistakes</title>
      <link>https://weedge.github.io/post/notions/go-tips/go-tips-10-standard-lib/</link>
      <pubDate>Sun, 19 Feb 2023 14:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/notions/go-tips/go-tips-10-standard-lib/</guid>
      
        <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;从程序中产生的错误中大多是使用姿势的不对，以及没有仔细阅读标准库相关包的开发文档，未查看源码导致，但是没有实践过这些问题，即使熟读文档和源码也可能避免不了。笔记中会以书中的mistake为切入点，结合源码升入分析其背后产生的原因，以及提出解决方案来避免。&lt;/p&gt;
&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;
&lt;h3 id=&#34;75提供错误的持续时间&#34;&gt;75.提供错误的持续时间&lt;/h3&gt;
&lt;p&gt;记住使用&lt;code&gt;time.Duration&lt;/code&gt;API 和提供&lt;code&gt;int64&lt;/code&gt;一个时间单位, 默认最小时间单位是微妙&lt;/p&gt;
&lt;h3 id=&#34;76timeafter-和内存泄漏-重要&#34;&gt;76.time.After 和内存泄漏 （重要）&lt;/h3&gt;
&lt;p&gt;常见问题之一，将time.After函数进行循环调用，导致内存泄露。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;nf&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;After&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;warning: no messages received&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过time.After源码可以看出，每次会通过time.NewTimer新建一个timer, 但是time.After返回的是一个C ← chan Time 只读channel，不能释放掉每次新建的timer, 可以使用Stop，如果一直循环使用，Go 1.15 中，每次调用使用大约 200 字节的内存，如果设置的时间间隔小，比如每小时500w条，则在一小时消耗1G左右的内存空间。&lt;/p&gt;
&lt;p&gt;那如果直接使用time.NewTimer来处理，需要处理好Stop和Reset的情况：&lt;/p&gt;
&lt;p&gt;一种方式是直接每次循环中NewTimer, 然后使用Stop方法从最小堆timer数组中删除底层的运行时timer(如果timer 没有expire 到期 以及有复用timer reuse active timer)，这样可以防止内存泄露，但是这些timer结构对象需要GC来标记扫描释放，带来了额外的GC压力以及最小堆timer管理压力；这里需要注意Stop方法的使用，按照 &lt;a href=&#34;https://golang.org/pkg/time/#Timer.Stop&#34;&gt;Timer.Stop 文档&lt;/a&gt; 的使用说明，每次调用 Stop 后需要判断返回值，如果返回 false（表示 Stop 失败，Timer 已经在 Stop 前到期）则需要排掉（drain）一次 channel 中的Time数据(C 是长度为1的缓冲channel)：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是如果之前程序已经从 channel 中接收过事件，那么上述 &lt;code&gt;&amp;lt;-t.C&lt;/code&gt; 就会发生阻塞。可能的解决办法是借助 select 进行 &lt;strong&gt;非阻塞&lt;/strong&gt; 排放（draining）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// try to drain the channel
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是因为 channel 的发送和接收发生在不同的 goroutine，所以 &lt;a href=&#34;https://github.com/golang/go/issues/14383&#34;&gt;存在竞争条件&lt;/a&gt;（race condition），最终可能导致 channel 中的事件未被排掉。因为sendTimer 和 操作Stop函数是在两个goroutine中执行，当timer刚好到期，已从最小堆中删除，操作Stop函数返回false,  在执行 ←t.C 接受操作和 sendTime 发送操作 分别在两个goroutine中执行相互之间执行是无序的，可能会发生先从t.C接受数据，没有，由于是非阻塞继续执行，这个时候sendTime发送一条Time数据到C中，后面执行Reset虽然重置一个Timer, 但是在select + case ←timer.C时，C中有数据选中直接执行了，和通过Reset重置的一个Timer间隔时间执行的预期期望不同，这样存在race condition，但是这种情况出现机率比较低，可参考 &lt;a href=&#34;https://github.com/golang/go/issues/11513#issuecomment-157062583&#34;&gt;Russ Cox 的回复&lt;/a&gt; ，目前 Timer 可能合理的使用方式是：程序需要维护一个状态变量(在同一个goroutine中)，用于记录它是否已经从 channel 中接收过事件，进而作为 Stop 中 draining 操作的判断依据。可以订阅&lt;a href=&#34;https://groups.google.com/g/golang-dev/c/c9UUfASVPoU&#34;&gt;golang-dev&lt;/a&gt;组查看相关进展。&lt;/p&gt;
&lt;p&gt;另外一种方式是把 NewTimer 放在循环外，在for循环中通过Reset函数来复用原有Timer结构，按照 &lt;a href=&#34;https://golang.org/pkg/time/#Timer.Reset&#34;&gt;Timer.Reset 文档&lt;/a&gt; 的使用说明，要正确地 Reset Timer，首先需要正确地 Stop Timer；因此 Reset 的问题跟 Stop 基本相同。&lt;/p&gt;
&lt;p&gt;tips： 具体详情见源码客观分析：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/time/sleep.go&#34;&gt;go1.20/src/time/sleep.go&lt;/a&gt; (time标准中提供使用的Timer)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/runtime/time.go&#34;&gt;go1.20/src/runtime/time.go&lt;/a&gt; (运行时的timer)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/runtime/runtime2.go&#34;&gt;go1.20/src/runtime/runtime2.go&lt;/a&gt; , &lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/runtime/proc.go&#34;&gt;go1.20/src/runtime/proc.go&lt;/a&gt;(p结构上最小四叉堆 timer数组, 以及运行时相关timer的调度；调用流程：findRunnable/stealWork → checkTimers → runtimer → runOneTimer → f (sendTime or goFunc) , lock free的方式调用f, CAS原子操作timer的状态)&lt;/p&gt;
&lt;p&gt;每次新生成Timer的时候，会往p上的最小堆上添加timer(O(logN))，将等待可读事件放入netpoll异步事件中监听，netpoll是在程序启动时初始化绑定一个单独的M进行事件轮训；Go1.14之前使用timerproc函数会调用一些系统调用来来让 goroutine 进入睡眠状态并唤醒 goroutine，系统调用意味着它为此生成OS线程，如果创建timer比较多，那就会发生比较多的系统调用，大大降低性能；之后改成异步事件轮训机制netpoll的方式多路复用，只需要一个OS线程来监听事件即可；系统调用因系统平台而异，通过runtime.nanotime1函数进行了封装；&lt;/p&gt;
&lt;p&gt;如果时间到了，将最小堆顶timer删除(O(logN))，通过netpoll 异步事件机制 将 可执行的G调度到runnext中，然后绑定M运行f；&lt;/p&gt;
&lt;h3 id=&#34;77常见的-json-处理错误-重要&#34;&gt;77.常见的 JSON 处理错误 (重要)&lt;/h3&gt;
&lt;h4 id=&#34;case1-类型嵌入导致的意外行为&#34;&gt;case1 类型嵌入导致的意外行为&lt;/h4&gt;
&lt;p&gt;需要了解json.Marshal 方法，在对结构类型对象进行Marshal操作时，如果实现了json.Marshaler接口方法MarshalJSON， 则会调用对应MarshalJSON方法进行encode操作，可以看具体源码： &lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/runtime/proc.go&#34;&gt;go1.20/src/encoding/json/encode.go&lt;/a&gt; （调用流程：Marshal→ marshal → reflectValue → valueEncoder → typeEncoder → newTypeEncoder → marshalerEncoder → MarshalJSON)  ; 所以在json.Marshal操作的时候需要注意结构体的嵌入成员是否实现了json.Marshaler接口方法MarshalJSON， 比如： time.Time 实现了MarshalJSON这个方法； 如果不想直接使用组合嵌入成员的方法，则将其定义为对应类型成员，或者实现MarshalJSON方法覆盖嵌入成员的实现；&lt;/p&gt;
&lt;p&gt;tips: 对结构类型对象进行UnMarshal操作也是同样情况。&lt;/p&gt;
&lt;h4 id=&#34;case2-json-和单调时钟&#34;&gt;case2 JSON 和单调时钟&lt;/h4&gt;
&lt;p&gt;对包含一个time.Time类型的结构encode或decode，有时会遇到意想不到的比较错误。&lt;/p&gt;
&lt;p&gt;首先需要弄清楚操作系统处理两种不同的时钟类型：wall clock(挂钟)和 monotonic clock(单调时钟)。挂钟用于确定一天中的当前时间。此时钟可能会有所变化。例如，如果时钟使用同步网络时间协议 (NTP)，它可以及时向后或向前跳转。不应该使用挂钟测量持续时间，因为可能会遇到奇怪的行为，例如负持续时间(润秒重置的情况)。这就是操作系统提供第二种时钟类型的原因：单调时钟。单调时钟保证时间总是向前移动并且不受时间跳跃的影响。它可能会受到频率调整的影响（例如，如果服务器检测到本地石英钟的移动速度与 NTP 服务器不同），但不会受到时间跳跃的影响。&lt;/p&gt;
&lt;p&gt;以前Go Time包的相关时间读取函数实现仅读取系统挂钟，从不读取单调时钟，从而在时钟重置时导致测量不正确。比如 一个 Go 程序在闰秒期间测量负的经过时间导致&lt;a href=&#34;https://blog.cloudflare.com/how-and-why-the-leap-second-affected-cloudflare-dns/&#34;&gt;CloudFlare 最近的 DNS 中断&lt;/a&gt;. 维基百科&lt;a href=&#34;https://en.wikipedia.org/wiki/Leap_second#Examples_of_problems_associated_with_the_leap_second&#34;&gt;与闰秒相关的问题示例列表&lt;/a&gt;现在包括 CloudFlare 的中断，并将 Go 的时间 API 列为根本原因。除了闰秒问题之外，Go 还扩展到非生产环境中的系统，这些环境中的时钟可能不太好调节，因此时钟重置更频繁。Go 必须优雅地处理时钟重置。Go语言作者Russ Cox提出了提案设计**&lt;a href=&#34;https://github.com/golang/proposal/blob/master/design/12914-monotonic.md&#34;&gt;Proposal: Monotonic Elapsed Time Measurements in Go&lt;/a&gt;**  (golang的开发规范和提案设计文档值得借鉴学习的，背景原因，验证评估影响面，尽量向前兼容，提案通过，再安排开发计划)； 将monotonic clock 单调时钟引入time.Time结构体中，具体CR: &lt;a href=&#34;https://go-review.googlesource.com/c/go/+/36255&#34;&gt;https://go-review.googlesource.com/c/go/+/36255&lt;/a&gt; ， HN也有对应讨论： &lt;a href=&#34;https://news.ycombinator.com/item?id=13566110&#34;&gt;https://news.ycombinator.com/item?id=13566110&lt;/a&gt; ;&lt;/p&gt;
&lt;p&gt;tips： 测量持续时间，使用单调时钟；仅对&lt;strong&gt;本地持续时间测量&lt;/strong&gt;有效；两个不同服务器的单调时钟根据定义是不同步的。因此，基于这些时钟测量分布式执行将不准确；这就涉及到分布式时钟同步的问题了。&lt;/p&gt;
&lt;p&gt;ok了解了背景，回归正题，比如对一个结构体有time.Time类型成员，time.Time可能同时包含一个挂钟和一个单调时间，使用time.Now方法返回的时间就包括挂钟读数和单调时钟读数，具体见time包开发文档：https://pkg.go.dev/time#section-documentation; 以及查看源码客观分析：&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/time/time.go&#34;&gt;go1.20/src/time/time.go&lt;/a&gt; （Now→time.now→runtime.now in assembly → 如果可以使用vdso 调用 runtime·vdsoClockgettimeSym 减少系统调用提升性能，否则执行系统调用SYSCALL SYS_clock_gettime(228) 指令，见：&lt;strong&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/master/arch/x86/entry/syscalls/syscall_64.tbl&#34;&gt;linux系统调用指令集&lt;/a&gt;&lt;/strong&gt;）。time.Now返回的Duration值打印如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;mi&#34;&gt;2023&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;08.218505&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0800&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.000118444&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;------------------------------------&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--------------&lt;/span&gt;
             &lt;span class=&#34;nx&#34;&gt;Wall&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;               &lt;span class=&#34;nx&#34;&gt;Monotonic&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在执行json.UnMarshal 解码包涵time.Time类型公开成员结构体进行格式化解析时， 也会调用time.Time的UnMarshalJSON函数，最终会调用Time.stripMono, 去掉Monotonic time；导致前后结构体对象不一致，一个从time.Now中返回有Monotonic time，解析后的没有；通过Time.Truncate方法，去掉Monotonic time，可以解决；需要注意带有time.Time的结构体在encode/decode时，前后对象会不一致的情况；&lt;/p&gt;
&lt;h4 id=&#34;case3-any-map&#34;&gt;case3 any map&lt;/h4&gt;
&lt;p&gt;any是空接口interface{}的别名，在对map[string]any类型对象进行 json.UnMarshal时，json字符串中的整数类型会解析成默认的float64类型，这样可能会导致数据判断时出现问题，对类型转换做出错误的假设可能会导致 goroutine panic。&lt;/p&gt;
&lt;h3 id=&#34;78常见的-sql-错误&#34;&gt;78.常见的 SQL 错误&lt;/h3&gt;
&lt;p&gt;该&lt;code&gt;database/sql&lt;/code&gt;包提供SQL（或类似 SQL）数据库的标准通用接口；依赖具体数据操作，由三方来实现；接口与实现分离的很好例子；&lt;/p&gt;
&lt;p&gt;tips：在设计通用中台和平台项目中的模块时，经常需要将抽象与实现分离，驱动化设计，方便具体领域场景的定制化开发。&lt;/p&gt;
&lt;p&gt;具体查看开发文档：https://pkg.go.dev/database/sql；在使用这个包时看到一些模式或错误也很常见；深入研究五个常见错误case。&lt;/p&gt;
&lt;h4 id=&#34;case1-忘记-sqlopen-不一定建立到数据库的连接-工程规范&#34;&gt;case1 忘记 sql.Open 不一定建立到数据库的连接 (工程规范)&lt;/h4&gt;
&lt;p&gt;Open 可能只是验证其参数而不创建与数据库的连接。要验证数据源名称是否有效，请调用 Ping。在使用的时候，和数据库进行交互的时候才建立连接。比如go-redis &lt;a href=&#34;https://github.com/redis/go-redis/issues/2085&#34;&gt;issues-2085&lt;/a&gt; , 这个issue是因为使用go-redis v8 版本 通过ping请求访问 7.0 redis redis-cluster， v8版本还不支持新的协议返回的数据导致，需要升级使用go-redis v9版本来支持，所以使用ping功能即可以测试生成有效连接，而且可以验证客户端和服务端协议的一致性。&lt;/p&gt;
&lt;h4 id=&#34;case2-忘记使用连接池-工程规范&#34;&gt;case2 忘记使用连接池 (工程规范)&lt;/h4&gt;
&lt;p&gt;应为数据库是底层存储数据资源，如果不限制使用有限的底层数据库连接资源，会增加底层数据库服务的负载；需要设置连接池，进行连接复用，以及结合数据库服务能力限制设置最大连接数，具体参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SetMaxOpenConns&lt;/code&gt;最大限度打开的数据库连接数（默认值&lt;code&gt;unlimited&lt;/code&gt;）；设置&lt;code&gt;SetMaxOpenConns&lt;/code&gt;对于生产级应用程序很重要。因为默认值是无限的，应该设置它以确保它适合底层数据库可以处理的内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SetMaxIdleConns&lt;/code&gt;最大限度空闲连接数（默认值&lt;code&gt;2&lt;/code&gt;）；如果应用程序生成大量并发请求，则应增加&lt;code&gt;SetMaxIdleConns&lt;/code&gt;(default: )的值。&lt;code&gt;2&lt;/code&gt;否则，应用程序可能会经历频繁的重新连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SetConnMaxIdleTime&lt;/code&gt;最大限度连接关闭前可以空闲的时间量（默认值&lt;code&gt;unlimited&lt;/code&gt;）；如果应用程序可能面临大量请求，那么设置就很重要。当应用程序返回到更和平的状态时，希望确保创建的连接最终被释放。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SetConnMaxLifetime&lt;/code&gt;最大限度连接在关闭之前可以保持打开状态的时间（默认值&lt;code&gt;unlimited&lt;/code&gt;）；如果连接到负载平衡的数据库服务器，设置会很有帮助。在这种情况下，要确保应用程序永远不会使用连接太久。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果应用程序面临不同的用例，可以使用多个连接池。这些值需要根据不同环境进行配置，对这些值进行可配置化管理，或者放在配置中心。&lt;/p&gt;
&lt;h4 id=&#34;case3-不使用prepare语句-工程规范&#34;&gt;case3 不使用Prepare语句 (工程规范)&lt;/h4&gt;
&lt;p&gt;生产环境中，应该使用Prepare对sql 进行预处理，以防sql 注入，并且重复的sql语句不需要重新解析处理。&lt;/p&gt;
&lt;h4 id=&#34;case4-错误处理空值---工程规范&#34;&gt;case4 错误处理空值   (工程规范)&lt;/h4&gt;
&lt;p&gt;在设计数据库表时，如果允许字段为NULL的话；查询这个字段scan row时，需要考虑NULL的情况，如果直接使用类型，则会报错； 解决方法，使用指针类型，以及sql包中封装的类型sql.NullXXX&lt;/p&gt;
&lt;p&gt;比指针类型更清楚地表达了意图。&lt;/p&gt;
&lt;h4 id=&#34;case5-不处理行迭代错误--工程规范&#34;&gt;case5 不处理行迭代错误  (工程规范)&lt;/h4&gt;
&lt;p&gt;这是要牢记的最佳实践：因为&lt;code&gt;rows.Next&lt;/code&gt;可以在遍历所有行或准备下一行时发生错误时停止，所以应该在迭代后使用&lt;code&gt;rows.Err&lt;/code&gt;进行检查。&lt;/p&gt;
&lt;h3 id=&#34;79不关闭临时资源&#34;&gt;79.不关闭临时资源&lt;/h3&gt;
&lt;p&gt;开发者经常在代码中的某个点关闭申请的临时资源，以避免磁盘或内存，连接等资源泄漏。结构通常实现&lt;code&gt;io.Closer&lt;/code&gt;接口表示必须关闭临时资源。列举3个不关闭临时资源的case:&lt;/p&gt;
&lt;h4 id=&#34;case1-http-response-body-重要&#34;&gt;case1 HTTP Response body （重要）&lt;/h4&gt;
&lt;p&gt;如果使用Go语言编写HTTP协议相关的代码，经常会遇到的问题，忘记关闭返回的http.Response.Body,  导致资源泄露，其实开发文档中已经给出了说明 &lt;a href=&#34;https://pkg.go.dev/net/http#Response.Body&#34;&gt;https://pkg.go.dev/net/http#Response.Body&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Client&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Transport&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;guarantee&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;that&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Body&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;non&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;even&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;responses&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;without&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;responses&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;zero&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;It&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;caller&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;responsibility&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;close&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HTTP&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Transport&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;may&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reuse&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;keep-alive&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;TCP&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;connections&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Body&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;completion&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;closed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;http客户端和传输保证Body总是非空的，即使响应没有Body或者响应的Body长度为零。关闭Body是调用者的责任。如果&lt;strong&gt;Body没有读到完成并且关闭，缺省HTTP客户端的传输(DefaultTransport 默认打开了Keep-Alive)不能复用HTTP/1.x &amp;ldquo;keep-alive&amp;quot;tcp 连接&lt;/strong&gt;。并且查看源码分析：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/net/http/client.go&#34;&gt;go1.20/src/net/http/client.go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/net/http/transport.go&#34;&gt;go1.20/src/net/http/transport.go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/net/http/transfer.go&#34;&gt;go1.20/src/net/http/transfer.go&lt;/a&gt; (body Read from bufio Read)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/bufio/bufio.go&#34;&gt;go1.20/src/bufio/bufio.go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;调用流程：初始化Client, 调用 Client.Do/do (Get/Post/Head方法NewRequest之后都会调用Do方法）→ Client.send → send →  Transport.RoundTrip 接口方法 →  Transport.roundTrip&lt;/p&gt;
&lt;p&gt;→ Transport.getConn → Transport.queueForDial -》 go Transport.dialConnFor → go persistConn.readLoop （将连接响应数据写入transferReader Body中, 发送responseAndError给roundTrip） 和  go persistConn.writeLoop  (往连接中写请求数据,将writeErr结果分别发送一份到writeErrCh中，由readLoop接收处理，发送一份给roundTrip处理)&lt;/p&gt;
&lt;p&gt;→ persistConn.roundTrip (发送persistConn.requestAndChan 到 reqch中,用于readLoop接收；发送writeRequest到writech中，由writeLoop 接收；从writeErrCh 处理write错误；从responseAndError chan中处理read错误)&lt;/p&gt;
&lt;p&gt;整体过程是一个建立长连接(KeepAlive开启), 并在长连接中通过读写管道和错误结果管道来协同处理，管道是可缓冲的，长度是1个buffer，刚好用于存放一个数据，发送和接收等待管道中的数据进行处理。&lt;/p&gt;
&lt;p&gt;在KeepAlive开启的情况下，长连接如果不关闭Response.Body，并且不读取Body中的数据，不会复用原有长连接，通过上面分析，会导致协程泄露；如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;go nums&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NumGoroutine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;http://www.baidu.com&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;c1&#34;&gt;//_, _ = ioutil.ReadAll(resp.Body)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;//_ = resp.Body.Close()
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;go nums&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NumGoroutine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果复用的话，这里请求是串行处理，会复用同一个连接，所以只会有3个协程在工作；如果不能复用连接的话,每处理一个请求会新开连接，导致协程泄露。Client不初始化，Transport默认是开启keep-alive；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// DefaultTransport is the default implementation of Transport and is
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// used by DefaultClient. It establishes network connections as needed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// and caches them for reuse by subsequent calls. It uses HTTP proxies
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// as directed by the $HTTP_PROXY and $NO_PROXY (or $http_proxy and
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// $no_proxy) environment variables.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DefaultTransport&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;RoundTripper&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Transport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ProxyFromEnvironment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;DialContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;defaultTransportDialContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Dialer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;Timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;KeepAlive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}),&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;ForceAttemptHTTP2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;     &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;MaxIdleConns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;IdleConnTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;TLSHandshakeTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;ExpectContinueTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生产环境中，使用tcp连接资源都是需要根据调用 资源服务放的系统负载吞吐能力来配置的。也是需要配置化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在没有读取的情况下也没有关闭Body，会发生协程泄露，同时tcp连接也不会复用,本质上是连接资源未释放至连接池中，存在连接泄露。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还需要记住的重要事情是，如开发文档net/http中提到的，当关闭 Response Body时，是否复用连接，这取决于是否从中读取完body中的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在没有读取的情况下关闭Body，虽然不会发生协程泄露，但是默认的 HTTP 传输可能会关闭连接。&lt;/li&gt;
&lt;li&gt;如果在读取后关闭Body，默认的 HTTP 传输不会关闭连接；因此，它可以重复使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以不管如何，最好的方式是都应该关闭Response Body,  尽管Body没有数据，或者已经读取完了，都应该关闭。&lt;/p&gt;
&lt;p&gt;tips: 是否连接复用的判定，可以通过tcpdump 或者 wireshark 来抓包，通过是否使用同一个连接四元组来确定是否复用了同一连接。可以使用类似如下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tcpdump -i utun2 -tnn dst host www.baidu.com //per host pool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;case2-sqlrows&#34;&gt;case2 sql.Rows&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sql.Rows&lt;/code&gt;是用作 SQL 查询结果的结构。因为这个结构实现了&lt;code&gt;io.Closer&lt;/code&gt;，所以它必须被关闭。忘记关闭行意味着连接泄漏，这会阻止数据库连接被放回连接池。&lt;/p&gt;
&lt;h4 id=&#34;case3-osfile&#34;&gt;case3 os.File&lt;/h4&gt;
&lt;p&gt;如果最终没有关闭一个&lt;code&gt;os.File&lt;/code&gt;，它本身不会导致泄漏：文件将在&lt;code&gt;os.File&lt;/code&gt;垃圾收集时自动关闭。但是，最好&lt;code&gt;Close&lt;/code&gt;显式调用，因为不知道下一次 GC 何时会被触发（除非手动运行它）。&lt;/p&gt;
&lt;p&gt;总结本节，已经看到关闭临时资源从而避免泄漏的重要性。临时资源必须在正确的时间和特定情况下关闭。事先并不总是清楚什么必须关闭。只能通过仔细阅读 API 文档和/或通过经验来获取这些信息。但是应该记住，如果一个结构实现了&lt;code&gt;io.Closer&lt;/code&gt;接口，最终必须调用&lt;code&gt;Close&lt;/code&gt;方法。最后但并非最不重要的一点是，了解如果闭包失败该怎么办非常重要：是否足以记录一条消息，或者是否也应该传播它？适当的操作取决于具体错误err是否需要处理。&lt;/p&gt;
&lt;h3 id=&#34;80在回复-http-请求后忘记返回语句-凑数&#34;&gt;80.在回复 HTTP 请求后忘记返回语句 （凑数）&lt;/h3&gt;
&lt;p&gt;如果有适当的覆盖率，这样的问题可以而且应该在测试期间被发现。这个属于err≠nil, 需要check遇到错误不为nil，是否直接return返回。这总低级错误，可以交给测试用例来覆盖到。&lt;/p&gt;
&lt;h3 id=&#34;81使用默认的-http-客户端和服务器-工程规范&#34;&gt;81.使用默认的 HTTP 客户端和服务器 (工程规范)&lt;/h3&gt;
&lt;p&gt;在讨论http包的时候提到, 如果不初始化http.Client，Client结构中的RoundTripper会默认使用DefaultTransport, 而DefaultTransport 只能用于开发测试时使用；对于生产环境， 需要更具依赖的资源服务进行配置，保证其配置过大的连接数而超出资源服务的负载能力，以及在网络不稳定情况下，连接超时，读写超时的设定，以便是否重试，这样不会一直hang住连接不释放，并发场景下，会导致服务负载增加， 连接过多导致服务拒绝。所以对于网络tcp请求，都需要根据具体的生产情况进行合理配置，而且是可配置化， 或者引入配置中心动态下发配置。对于服务端的tcp连接配置也是如此，也需要配置读写超时时间，进行可配置化管理。&lt;/p&gt;
&lt;h2 id=&#34;概括&#34;&gt;概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对接受&lt;code&gt;time.Duration&lt;/code&gt;. 即使允许传递整数，也要尽量使用时间 API 来防止任何可能的混淆。&lt;/li&gt;
&lt;li&gt;避免调用&lt;code&gt;time.After&lt;/code&gt;重复函数（例如循环或 HTTP 处理程序）可以避免峰值内存消耗。由创建的资源&lt;code&gt;time.After&lt;/code&gt;只有在定时器到期时才会被释放。&lt;/li&gt;
&lt;li&gt;在 Go 结构中使用嵌入式字段时要小心。这样做可能会导致偷偷摸摸的错误，例如&lt;code&gt;time.Time&lt;/code&gt;实现&lt;code&gt;json .Marshaler&lt;/code&gt;接口的嵌入式字段，从而覆盖默认的封送处理行为。&lt;/li&gt;
&lt;li&gt;比较两个&lt;code&gt;time.Time&lt;/code&gt;结构时，回想一下它&lt;code&gt;time.Time&lt;/code&gt;同时包含一个挂钟和一个单调时钟，并且使用运算符的比较&lt;code&gt;==&lt;/code&gt;是在两个时钟上完成的。&lt;/li&gt;
&lt;li&gt;为避免在解组 JSON 数据时提供地图时出现错误假设，请记住&lt;code&gt;float64&lt;/code&gt;默认情况下会将数字转换为。&lt;/li&gt;
&lt;li&gt;如果需要测试配置并确保数据库可访问，请调用&lt;code&gt;Ping&lt;/code&gt;or方法。&lt;code&gt;PingContext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置生产级应用程序的数据库连接参数。&lt;/li&gt;
&lt;li&gt;使用 SQL 预处理语句可以使查询更高效、更安全。&lt;/li&gt;
&lt;li&gt;使用指针或类型处理表中可为空的列&lt;code&gt;sql.NullXXX&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;调用行后迭代&lt;code&gt;Err&lt;/code&gt;的方法&lt;code&gt;sql.Rows&lt;/code&gt;以确保您在准备下一行时没有遗漏任何错误。&lt;/li&gt;
&lt;li&gt;最终关闭所有实现的结构&lt;code&gt;io.Closer&lt;/code&gt;以避免可能的泄漏。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt;为避免 HTTP 处理程序实现中的意外行为，如果您希望处理程序在 之后停止，请确保您没有错过该语句&lt;code&gt;http.Error&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;对于生产级应用程序，不要使用默认的 HTTP 客户端和服务器实现。这些实现缺少在生产中应该强制执行的超时和行为。&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>Go tips-笔记: 并发实践 61-74 mistakes</title>
      <link>https://weedge.github.io/post/notions/go-tips/go-tips-09-concurrency-practice/</link>
      <pubDate>Sat, 18 Feb 2023 14:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/notions/go-tips/go-tips-09-concurrency-practice/</guid>
      
        <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;这里主要介绍并发实践中遇到的问题，这些问题在golang开源项目中也经常会出现，如果编写并发也会一直伴随在开发当中出现，也有工程实践相关的论文进行统计归纳总结(PS: 用这种方式发个论文还是比较轻松的~)：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://songlh.github.io/paper/go-study.pdf&#34;&gt;Understanding Real-World Concurrency Bugs in Go&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;tips: 作者对golang和rust都有研究，结合相关的代码都可以一起学习下, 语言方面的小细节&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://arxiv.org/pdf/2204.00764.pdf&#34;&gt;&lt;strong&gt;A Study of Real-World Data Races in Golang&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go 官方提供race工具来检查并发场景下的数据竞争问题： &lt;a href=&#34;https://go.dev/doc/articles/race_detector&#34;&gt;https://go.dev/doc/articles/race_detector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/google/sanitizers/wiki/ThreadSanitizerGoManual&#34;&gt;https://github.com/google/sanitizers/wiki/ThreadSanitizerGoManual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注：Go要使用-race，需启用CGO，依赖sanitizers；一般用于开发测试进行检测&lt;/p&gt;
&lt;p&gt;如果想更加深入的了解并发并行，可以一起学习这本书： &lt;a href=&#34;https://mirrors.edge.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html&#34;&gt;&lt;strong&gt;Is Parallel Programming Hard, And, If So, What Can You Do About It?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;
&lt;h3 id=&#34;61传播不适当的context&#34;&gt;61.传播不适当的context&lt;/h3&gt;
&lt;p&gt;传播context应该谨慎进行。比如文中中通过一个基于与 http.Request关联的context处理异步操作的示例来说明这一点。因为一旦服务接口返回响应，这次请求会话的context就会被cancel，使用 http.Request关联的context的异步操作也可能会意外停止(请求已经结束，但是异步操作还没有执行完)。遇到这种情况，可以为特殊情况创建实现context.Context接口的自定义context结构，这个结构将原来的ctx context.Context作为成员wrap一层，实现主要的传递功能Value方法, 这样在服务的请求回话结束之后，异步操作可以继续执行完成。&lt;/p&gt;
&lt;p&gt;tips：生产环境下，请求接口下的异步操作，必须避免因goroutine协程处理hang住，导致泄露，一般引入执行超时机制。&lt;/p&gt;
&lt;h3 id=&#34;62在不知道何时停止的情况下启动-goroutine-重要&#34;&gt;62.在不知道何时停止的情况下启动 goroutine (重要)&lt;/h3&gt;
&lt;p&gt;Goroutines 启动起来既简单又便宜——如此简单和便宜，以至于不考虑停止一个新的 goroutine，这可能会导致泄漏。不知道何时停止 goroutine 是一个设计问题，也是 Go 中常见的并发错误。了解原因以及如何预防它。&lt;/p&gt;
&lt;p&gt;首先，量化一下 goroutine 泄漏的含义。在内存方面，一个 goroutine 以 2 KB 的最小堆栈大小开始，它可以根据需要增长和收缩（最大堆栈大小在 64 位上为 1 GB，在 32 位上为 250 MB）。在内存方面，goroutine 还可以保存分配给堆的变量引用。同时，goroutine 可以保存 HTTP 或数据库连接、打开的文件和网络套接字等资源，这些资源最终应该正常关闭。如果一个 goroutine 被泄露，那么这些资源也会被泄露。&lt;/p&gt;
&lt;p&gt;goroutine 是一种资源，就像任何其他资源一样，最终必须关闭以释放内存或其他资源(通常通过cancel 信号量，ctx.Done方式让这些goroutine任务退出释放资源)。在不知道何时停止的情况下启动 goroutine 是一个设计问题。每当一个 goroutine 启动时，应该对它何时停止有一个明确的计划。如果一个 goroutine 创建资源并且它的生命周期与应用程序的生命周期绑定，那么在退出应用程序之前，等待这个 goroutine 完成可能更安全。这样可以确保资源可以被释放。&lt;/p&gt;
&lt;h3 id=&#34;63不注意-goroutines-和循环变量-重要&#34;&gt;63.不注意 goroutines 和循环变量 (重要)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;      
    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个是Go新手经常会遇到问题，也是老生常谈的问题了，如果希望每个闭包都访问goroutine创建时的值，有什么解决方案？有两种方法: 每次迭代中，创建一个局部新变量i，并将i复制给新i；另外一种方法是不再依赖闭包，而是使用实际函数进行传参值拷贝，本质上一样。&lt;/p&gt;
&lt;h3 id=&#34;64使用-select-和-channels-期待确定性行为-重要&#34;&gt;64.使用 select 和 channels 期待确定性行为 （重要）&lt;/h3&gt;
&lt;p&gt;这里主要了解select语义的工作原理，可以从官方文档中进行了解：https://go.dev/ref/spec#Select_statements&lt;/p&gt;
&lt;p&gt;如果一个或多个通信可以继续进行，则通过统一的伪随机选择一个可以继续进行的通信。否则，如果存在默认情况，则选择该情况。如果没有默认情况，则“select”语句将阻塞，直到至少有一个通信可以继续进行。&lt;/p&gt;
&lt;p&gt;tips: 当使用无缓冲channel时，写入不想阻塞，使用select + case 写chan + default的方式来处理时非常好的办法，可以避免死锁的情况，比如 &lt;code&gt;fatal error: all goroutines are asleep - deadlock!&lt;/code&gt;这个错误经常会遇到，这个是全部在执行的goroutine都进入了等待状态，Go 语言死锁检测会发现当前的 Goroutine 已经不可能被唤醒，就会直接报错退出；常见于 一组协程处理数据其中一个协程进入一直等待状态，调用sync.WaitGroup Wait方法(底层通过信号量值机制semacquire1)等待协程执行完成，这样出现相互等待，导致deadlock。&lt;/p&gt;
&lt;h3 id=&#34;65不使用通知channel&#34;&gt;65.不使用通知channel&lt;/h3&gt;
&lt;p&gt;无数据channel应该用 &lt;code&gt;chan struct{}&lt;/code&gt; 作为通知channel， struct{}{}不占内存空间。&lt;/p&gt;
&lt;h3 id=&#34;66不使用nil--channel&#34;&gt;66.不使用nil  channel&lt;/h3&gt;
&lt;p&gt;接受或发送到 nil 通道是一种阻塞行为，而且这种行为并非无用。正如文中合并两个通道的示例中看到的那样，即使close 通道， 接受方还是可以读取数据，通过返回的第二个参数判断是否关闭，关闭了将通道设置为nil，这样利用select不会选择阻塞的nil通道，可以使用 nil 通道来实现一个优雅的状态机，所以 nil 通道在某些情况下很有用，并且在处理并发代码时应该成为 Go 开发人员工具集的一部分。&lt;/p&gt;
&lt;h3 id=&#34;67对channel大小感到困惑&#34;&gt;67.对channel大小感到困惑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无缓冲通道支持同步。可以保证两个 goroutine 将处于已知状态：一个接收消息，另一个发送消息。&lt;/li&gt;
&lt;li&gt;缓冲通道不提供任何强同步。实际上，生产者 goroutine 可以发送一条消息，然后在通道未满时继续执行。唯一的保证是 goroutine 在消息发送之前不会收到消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;必须牢记这一基本区别。两种通道类型都支持通信，但只有一种提供同步。如果需要同步，必须使用无缓冲通道，无缓冲通道也可能更容易推理；缓冲通道可能导致模糊的死锁，这在无缓冲通道中会立即显现出来。在通知channel的情况下，通知是通过关闭channel ( &lt;code&gt;close(ch)&lt;/code&gt;) 处理的，使用缓冲通道不会带来任何好处，close channel后，还可以继续从channel中读取数据。&lt;/p&gt;
&lt;p&gt;使用缓冲通道的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在使用类似工作池的模式下，创建的goroutine轮训从共享通道获取数据执行；可以将缓冲通道大小与创建的 goroutines 数量联系起来。&lt;/li&gt;
&lt;li&gt;当使用通道来解决速率限制问题时。如果需要通过限制请求数量来强制资源利用，应该根据限制设置缓冲通道大小。例如，errorgroup 中的 sem chan struct{}(token) 就是用来设置最大执行的goroutine数目。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;决定一个准确缓冲通道大小不是一个容易的问题。首先，它是 CPU 和内存之间的平衡。值越小，可以面对的 CPU 争用越多；但是这个值越大，需要分配的内存就越多；需要基于场景下，基准压测来衡量。&lt;/p&gt;
&lt;h3 id=&#34;68忘记字符串格式化可能产生的副作用&#34;&gt;68.忘记字符串格式化可能产生的副作用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据竞争(data race), 文中举了一个etcd 例子中 一个goroutine通过&lt;code&gt;fmt.Sprintf(&amp;quot;%v&amp;quot;, ctx)&lt;/code&gt; 格式化成key, 对key进行watch操作， 通过ctx中的String方法读取ctx中的元数据进行格式化；另一个goroutine 通过context.WithValue 写入，这样产生了data race。修复 ( &lt;a href=&#34;https://github.com/etcd-io/etcd/pull/7816&#34;&gt;https://github.com/etcd-io/etcd/pull/7816&lt;/a&gt; ) pr中, 直接实现wrap一层自定义ctx，不依赖通过context.WithValue写入改变值的ctx；&lt;/li&gt;
&lt;li&gt;死锁(deadlock)，如果一个结构体的格式化String函数中使用了互斥锁，则对结构体对象格式化时，要考虑对应互斥锁的范围，如果上锁范围包括了格式化代码，则会重复上锁，导致相互等待，进而出现deadlock；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;69使用append操作产生数据竞争-重要&#34;&gt;69.使用append操作产生数据竞争 (重要)&lt;/h3&gt;
&lt;p&gt;发生数据竞争(data race)的情况是多个并发goroutines至少有一个写操作发生在一个共享空间中；对于slice切片结构，append在扩容的时候是否重新分配了内存空间，如果发生扩容则在在切片副本上使用，而不是原始切片，这样就不会发生数据竞争；更合理情况是直接在goroutine中进行copy一份切片副本进行append操作。&lt;/p&gt;
&lt;p&gt;多个goroutines 并发访问 slice和map时，发生数据竞争的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用至少一个更新值的 goroutine 访问同一个切片索引是一种数据竞争；goroutines 访问相同的内存位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无论操作如何访问不同的切片索引都不是数据竞争；不同的索引意味着不同的内存位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用至少一个goroutine更新访问同一个map（不管它是相同的还是不同的key）是一种数据竞争。为什么这与切片数据结构不同？map底层结构是个桶数组，每个桶都是一个指向键值对数组的指针；哈希算法用于确定桶的数组索引。因为该算法在map初始化期间包含一些随机性，所以一次执行可能导致相同的数组索引(相同bucket)，而另一次执行可能不会。竞争检测器通过发出警告来处理这种情况，而不管实际的数据竞争是否发生。&lt;/p&gt;
&lt;p&gt;tips: 与slice不同，go在map实现中内置了对并发读写的检测，即便不加入-race，一旦发现存在数据竞争(至少有一个写操作)直接fatal error。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;70对slice和map使用mutex不准确-重要&#34;&gt;70.对slice和map使用mutex不准确 （重要）&lt;/h3&gt;
&lt;p&gt;在数据既可变又共享的并发上下文中工作时，通常使用mutex对操作数据的临界区域进行同步互斥访问；&lt;/p&gt;
&lt;p&gt;具体map的内部结构在https://github.com/golang/go/blob/go1.20/src/runtime/map.go hmap查看源码(通过测试用例代码了解)；map是一个&lt;code&gt;runtime.hmap&lt;/code&gt;主要包含元数据（counter,flags,B等）以及2个指向数据桶(bucket)的指针的结构。所以对与map变量之间赋值操作&lt;code&gt;mp:=m&lt;/code&gt;不复制底层实际数据(buckets)。这个和slice切片的原理是一样，只不过需要注意append扩容情况，而map扩容的是底层buckets数据。&lt;/p&gt;
&lt;p&gt;了解了slice和map的结构，对于mutex保护操作共享的slice或者map的临界区间很有帮助，对于map遍历操作进行互斥访问，如果遍历处理的时间长，考虑到性能问题，可以深拷贝一份出来进行耗时的计算操作；&lt;/p&gt;
&lt;p&gt;在考虑使用mutex对slice或map进行互斥访问时，需要考虑好互斥的临界区域。&lt;/p&gt;
&lt;h3 id=&#34;71滥用-syncwaitgroup--重要&#34;&gt;71.滥用 sync.WaitGroup  （重要）&lt;/h3&gt;
&lt;p&gt;sync.WaitGroup是Go并发程序常用的用于等待一组goroutine退出的机制。通过Add和Done方法实现内部计数的调整。而Wait方法用于等待，直到内部计数器为0才会返回。文中提到的例子是比较经典的坑，在论文&lt;a href=&#34;https://arxiv.org/pdf/2204.00764.pdf&#34;&gt;&lt;strong&gt;A Study of Real-World Data Races in Golang&lt;/strong&gt;&lt;/a&gt;中也有提到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WaitGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint64&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;atomic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;AddUint64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;code&gt;sync.WaitGroup&lt;/code&gt;结构中拥有一个默认初始化为 0的计数器。可以使用&lt;code&gt;Add(int)&lt;/code&gt;方法递增此计数器，使用&lt;code&gt;Done()&lt;/code&gt;或使用Add负值来递减此计数器。如果想要等到计数器为0，则使用&lt;code&gt;Wait()&lt;/code&gt;阻塞等待并释放goroutine资源，这部分内容在 &lt;a href=&#34;https://weedge.github.io/post/notions/go-tips/go-tips-09-concurrency-practice/#64%E4%BD%BF%E7%94%A8-select-%E5%92%8C-channels-%E6%9C%9F%E5%BE%85%E7%A1%AE%E5%AE%9A%E6%80%A7%E8%A1%8C%E4%B8%BA-%E9%87%8D%E8%A6%81&#34;&gt;#64&lt;/a&gt; tips中也有提到，具体见源码客观分析：https://github.com/golang/go/blob/go1.20/src/sync/waitgroup.go (结合测试用例看疗效更好)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/runtime/sema.go&#34;&gt;https://github.com/golang/go/blob/go1.20/src/runtime/sema.go&lt;/a&gt; (Semaphore实现，&lt;a href=&#34;https://swtch.com/semaphore.pdf&#34;&gt;类似Linux的futex机制&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;了解了WaitGroup,  不难理解例子中的代码问题，将wg.Add(1)放在了goroutine执行的函数中，而没有像正确方法那样，将Add(1)放在goroutine创建启动之前，这样会导致对WaitGroup内部计数器形成了数据竞争，很可能因goroutine调度问题，Add(1)还未来的及调用，从而导致Wait提前返回，这组goroutine中还有在执行中的。&lt;/p&gt;
&lt;p&gt;在 论文&lt;a href=&#34;https://arxiv.org/pdf/2204.00764.pdf&#34;&gt;A Study of Real-World Data Races in Golang&lt;/a&gt; 中 还提到一个问题，就是goroutine中有多个defer 操作，defer Done 操作首先执行了，导致其他defer操作可能还未执行，Wait就已经返回了，导致后面依赖defer操作中的结果,进行判断处理的逻辑会出错。&lt;/p&gt;
&lt;p&gt;tips: 上一节tips中有提到cpu有使用&lt;em&gt;内存屏障(memory barrier)&lt;/em&gt;（也称为&lt;em&gt;内存栅栏(memory fence)&lt;/em&gt;）来确保顺序。Go 为实现内存屏障定义了语言层面的内存模型规范，这里在使用的&lt;code&gt;sync.WaitGroup&lt;/code&gt;，&lt;code&gt;wg.Add&lt;/code&gt; 和 &lt;code&gt;wg.Wait&lt;/code&gt;之间存在 happens-before 关系。&lt;/p&gt;
&lt;p&gt;这个是Go开发人员常见错误。使用&lt;code&gt;sync.WaitGroup&lt;/code&gt;，&lt;code&gt;Add&lt;/code&gt;操作必须在父 goroutine 中启动 goroutine 之前完成，而&lt;code&gt;Done&lt;/code&gt;操作必须在 goroutine 内完成。&lt;/p&gt;
&lt;h3 id=&#34;72忘记-synccond&#34;&gt;72.忘记 sync.Cond&lt;/h3&gt;
&lt;p&gt;在同步原语&lt;code&gt;sync&lt;/code&gt;包中，&lt;code&gt;sync.Cond&lt;/code&gt;可能是最少使用和理解的。但是，它提供了无法通过channel实现的功能。实现类似pub/sub 的多通道广播机制，可以认为pub/sub机制是包括了单通道广播的，sync.Cond的内部实现，其结构中L Locker 用来互斥访问条件逻辑，如果条件不成立，则检测是否copy，copy则直接panic, 否则添加到通知列表中，进行等待；如果条件成立，则执行对应逻辑。唤醒方式分为两种：Signal() 唤醒等待队中的一个goroutine来执行判断； Broadcast 唤醒等待队列中的全部goroutine来执行对应判断逻辑；具体见源码客观分析：https://github.com/golang/go/blob/go1.20/src/sync/cond.go (结合测试用例看疗效更好)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.20/src/runtime/sema.go&#34;&gt;https://github.com/golang/go/blob/go1.20/src/runtime/sema.go&lt;/a&gt; (Semaphore实现，&lt;a href=&#34;https://swtch.com/semaphore.pdf&#34;&gt;类似Linux的futex机制&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;对于Signal()方式，和使用 channel chan struct{} 非阻塞发送消息一样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}{}:&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;73不使用errorgroup&#34;&gt;73.不使用errorgroup&lt;/h3&gt;
&lt;p&gt;errorgroup这个包是google对go的一个扩展包：&lt;a href=&#34;https://pkg.go.dev/golang.org/x/sync/errgroup&#34;&gt;golang.org/x/sync/errgroup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;tips: &lt;code&gt;golang.org/x&lt;/code&gt;是一个提供标准库扩展的库。为sync包扩展了一个包：errgroup&lt;/p&gt;
&lt;p&gt;实现逻辑简单，主要是错误处理，如果其中有一个goroutine执行错误，则只记录第一次goroutine执行的错误，通过context告知了cancel状态，这个需要通过select+ctx.Done() 感知到；并且通知对应使用Wait()等待全部goroutine执行完成，并且返回记录的错误； 后面加入sem chan struct{}(token)，用来限制最大执行goroutine数，通过SetLimit来设置，并且提供了TryGo 非阻塞执行。&lt;/p&gt;
&lt;p&gt;如果想加入goroutine的执行超时时间，也是可以做到，只需在使用errgroup前，使用cancelCtx就行，如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;TestErrGroupWithTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cancel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;TODO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;cancel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errgroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;After&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;finished:%d\\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;canceled:%d\\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然如果想获取goroutine执行的全部错误则需要额外的错误数组来支持，Go中的函数返回错误必须为nil。&lt;/p&gt;
&lt;h3 id=&#34;74复制同步类型-重要&#34;&gt;74.复制同步类型 （重要）&lt;/h3&gt;
&lt;p&gt;sync包提供基本同步原语，例如 mutex, rwmutex, condition variable，waitgroup，pool，map等。对于所有这些结构体，有一个硬性规则要遵循：它们永远不应该被复制。以下是一个常见的错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Counter&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;mu&lt;/span&gt;       &lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Mutex&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// mu      *sync.Mutex
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;counters&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewCounter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Counter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;counters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}}&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// return Counter{counters: map[string]int{}, mu: &amp;amp;sync.Mutex{}}
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Increment1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;counters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Increment2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// Same code
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewCounter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Increment1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Increment1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Millisecond&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结构体接受者采用值传递，如果两个协程同时使用counter, 会复制一份结构，也会复制互斥锁，导致上锁失败，并发场景运行时出现data race,  data race可以 -race 进行检测；&lt;/p&gt;
&lt;p&gt;通过linter类型工具检查，比如静态编译检查vet，可以直接检查出来进行提示，&lt;code&gt;passes lock by value&lt;/code&gt; or &lt;code&gt;assignment copies lock value to&lt;/code&gt; ；一般IDE开发工具安装了静态检查工具就可以检查出来提示(如果不扫描里面的noCopy成员，则扫不出来错误进行提示)，最好的办法直接使用 go vet 在CI阶段检查，进而保证代码质量；&lt;/p&gt;
&lt;p&gt;这个noCopy的检测是怎么做到的呢？只要是实现了Locker 接口的Lock()和Unlock()方法的结构体，或者结构体成员实现了Locker接口，则可以通过go vet功能，来检查代码中该对象是否有被copy；比如自定义的结构体包涵值传递成员noCopy，noCopy结构体实现了Locker接口，则通过go vet检查是否copy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// noCopy may be added to structs which must not be copied
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// after the first use.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// See **&amp;lt;https://golang.org/issues/8005#issuecomment-190753527**&amp;gt;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// for details.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Note that it must not be embedded, due to the Lock and Unlock methods.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;noCopy&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Lock is a no-op used by -copylocks checker from `go vet`.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;noCopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;noCopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyStruct&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;nx&#34;&gt;noValCopy&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;noCopy&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// Copy *noCopy
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每当多个 goroutine 访问一个同步共享元素，必须确保它们都依赖于同一个实例。此规则适用于定义的所有同步类型。可以使用指针解决这个问题，结构传递者对象是指针，或者结构成员中的同步共享元素是指针类型。本质上是值传递和指针传递的问题。&lt;/p&gt;
&lt;h2 id=&#34;概括&#34;&gt;概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;了解context何时可以取消在传播它时需要注意，避免取消导致未执行完：例如，HTTP 处理程序在发送响应后取消context。&lt;/li&gt;
&lt;li&gt;避免泄漏意味着要注意，无论何时启动 goroutine，都应该有一个最终停止它的计划。&lt;/li&gt;
&lt;li&gt;为了避免 goroutines 和循环变量的错误，创建局部变量或调用函数而不是闭包。&lt;/li&gt;
&lt;li&gt;如果多个选项是可能的，那么理解&lt;code&gt;select&lt;/code&gt;多通道随机选择案例可以防止做出可能导致微妙的并发错误。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;chan struct{}&lt;/code&gt;类型发送通知。&lt;/li&gt;
&lt;li&gt;使用 nil channel应该成为并发工具集的一部分，从select语句中移除操作channel 的 case。&lt;/li&gt;
&lt;li&gt;考虑到问题，仔细决定要使用的正确channel类型。只有无缓冲通道才能提供强大的同步保证。&lt;/li&gt;
&lt;li&gt;应该有充分的理由为缓冲通道指定通道大小。&lt;/li&gt;
&lt;li&gt;意识到字符串格式可能会导致调用现有函数意味着要注意可能的死锁和其他数据竞争。&lt;/li&gt;
&lt;li&gt;并发 append并不总是没有数据竞争；因此，不应在共享切片上同时使用它。&lt;/li&gt;
&lt;li&gt;了解slice和map结构体，具体底层数据结构；对防止常见的数据竞争处理有所帮助。&lt;/li&gt;
&lt;li&gt;要准确使用&lt;code&gt;sync.WaitGroup&lt;/code&gt;，&lt;code&gt;Add&lt;/code&gt;在启动 goroutine 之前调用该方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sync.Cond&lt;/code&gt;可以使用 广播方式向多个 goroutines 发送重复的通知(唤醒)，也可以单播方式想一个goroutine发送通知(唤醒)。&lt;/li&gt;
&lt;li&gt;可以同步一组 goroutines 并使用&lt;code&gt;errgroup&lt;/code&gt;包处理错误和context。&lt;/li&gt;
&lt;li&gt;同步原语类型或者自定类型结构不应copy。&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>Go tips-笔记: 并发概念 55-60 mistakes</title>
      <link>https://weedge.github.io/post/notions/go-tips/go-tips-08-concurrency-foundations/</link>
      <pubDate>Fri, 17 Feb 2023 14:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/notions/go-tips/go-tips-08-concurrency-foundations/</guid>
      
        <description>&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;
&lt;h3 id=&#34;55混淆并发和并行&#34;&gt;55.混淆并发和并行&lt;/h3&gt;
&lt;p&gt;这个在处理大数据的场景中经常可以看到，可以这么抽象，比如将一个job 分成 很多的 task 事件， 比如 读取文件 task, 切割文件task, map key task, shuffle key task，reduce key task，sink task 等等，如果这个job 串行执行，同步处理task, 效率会很低，cpu资源也不会充分利用，比如文件io,网络io，系统缺页中断都会反生系统调用(同步或者异步)，这样cpu可能空闲出来了，串行执行的话， 需要等待这次系统调用处理完之后才能继续使用cpu, 所以处理起来很慢，吞吐量很低； 如果改成并发(取决于操作系统调度，基于时间片轮训抢占式调度)，将job进程分成的多个task事件一同工作，如果某个task发生了系统中断，则可以让出cpu给另外一个task来执行，比如读取文件io.Reader，sink io.Writer写入文件时产生了系统中断，则可以保存上下文让出cpu给其他task来执行，这样可以充分利用cpu资源，提高吞吐(这里task不能太多,涉及到上下文切换，反而会降低吞吐，需要需要用户合理编排运行时结构)；当cpu利用上了，那就使用多核cpu来同时处理，进一步提高吞吐(多核涉及到底层 &lt;a href=&#34;https://fgiesen.wordpress.com/2014/07/07/cache-coherency/&#34;&gt;&lt;strong&gt;cpu cache一致性&lt;/strong&gt;&lt;/a&gt; 问题)；单机吞吐上来了，如果数据量非常大，单机优化已经无法存放这么多数据了，那就copy多台机器分布式进行处理(单机变多机，协同和网络问题)；第一次提升使用的就是将job切成多个task一起来处理，就是使用并发机制充分cpu资源；第二次提升则是使用多核，增加cpu资源，将多个task分配到cpu上同时一起做(执行)，即所谓的并行，这样可以单机垂直扩容提升吞吐了；即使存在摩尔定律，但是单机还是有限制；数据无极限，那处理也需要无极限，copy多台机器，组成集群，将单机任务分发到多集群上进行调度执行，充分利用并发并行，利用计算和存储资源，水平扩容，这样就没有资源上的限制了(需要考虑资源的充分利用，因为成本上去了嘛；当然&lt;a href=&#34;https://www.intel.com/content/www/us/en/products/docs/processors/what-is-a-gpu.html&#34;&gt;GPU&lt;/a&gt;的利用应该同样适用，并行能力更强，但是单核计算能力相对cpu弱)。在并发并行处理时，task之间必然会存在协同关系，彼此分工合作，则需要沟通，共同处理共享资源，存在竞争，CSP理论中提倡通过沟通来共享资源，在Go中通过channel来协同，也有相关sync库来处理同步；分布式多机沟通则通过rpc和消息队列；其中涉及到分布式调度和计算。 这种并发和并行模式在开店做生意，银行排队，工厂流水线中都可以看到相同的处理模式。&lt;/p&gt;
&lt;p&gt;回到正题，引用Go设计者的一句话概括：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;—Rob Pike&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;并发是一次处理很多事情，并行是一次执行做很多事情；&lt;/p&gt;
&lt;p&gt;并发和并行是不同的。并发是关于结构的，可以通过引入分离并发线程可以处理的不同步骤，将顺序实现更改为并发实现。同时，并行性是关于执行的，可以通过添加更多并行线程在步骤级别使用它。理解这两个概念是成为一名熟练的 Gopher 的基础。&lt;/p&gt;
&lt;p&gt;附：&lt;strong&gt;&lt;a href=&#34;https://go.dev/blog/waza-talk&#34;&gt;Concurrency is not parallelism&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;56认为并发总是更快&#34;&gt;56.认为并发总是更快&lt;/h3&gt;
&lt;p&gt;在考虑并发性时，有两种类型的工作负载需要理解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU-Bound&lt;/strong&gt;：是一种永远不会造成 Goroutines 自然地进入和退出等待状态的情况的工作负载。是不断进行计算的job。将 Pi 计算到第 N 位的线程将受 CPU-Bound。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IO-Bound&lt;/strong&gt;：是一种导致 Goroutines 自然进入等待状态的工作负载。包括请求通过网络访问资源，或对操作系统进行系统调用(同步/异步)，或等待事件发生。需要读取文件的 Goroutine 是 IO-Bound。将导致 Goroutine 等待的同步事件（互斥锁、原子）包含在该类别中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于受CPU-Bound的工作负载，需要并行性来利用并发性。处理多个 Goroutines 的单个操作系统/硬件线程效率不高，因为 Goroutines 不会作为其工作负载的一部分进入和退出等待状态。拥有比操作系统/硬件线程更多的 Goroutine 会减慢工作负载的执行速度，因为将 Goroutine 移入和移出操作系统线程会产生延迟成本（花费的时间）。上下文切换正在为工作创建一个“Stop The World”事件，因为在切换期间任何工作负载都没有被执行，否则它可能会被执行。&lt;/p&gt;
&lt;p&gt;对于受IO-Bound的工作负载，不需要并行性来使用并发。单个操作系统/硬件线程可以高效地处理多个 Goroutines，因为 Goroutines 作为其工作负载的一部分自然地进入和退出等待状态。拥有比操作系统/硬件线程更多的 Goroutine 可以加快工作负载的执行速度，因为将 Goroutine 移入和移出操作系统线程的延迟成本不会产生“Stop The World”事件。工作负载自然停止，这允许不同的 Goroutine 有效地利用相同的操作系统/硬件线程，而不是让操作系统/硬件线程闲置。&lt;/p&gt;
&lt;p&gt;怎么知道每个硬件线程有多少 Goroutines 提供最佳吞吐量？Goroutines 太少，有更多的空闲时间；太多的 Goroutines 有更多的上下文切换延迟时间。如果不确定是否并发会更快，正确的方法可能是从一个简单的顺序版本开始，然后使用分析和基准测试，进行调优。&lt;/p&gt;
&lt;p&gt;附： &lt;a href=&#34;https://www.ardanlabs.com/blog/2018/12/scheduling-in-go-part3.html&#34;&gt;&lt;strong&gt;Scheduling In Go : Part III - Concurrency&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;57对何时使用channel或mutex感到困惑&#34;&gt;57.对何时使用channel或mutex感到困惑&lt;/h3&gt;
&lt;p&gt;channel最适合Goroutine之间传递数据所有权、分配工作单元和传达异步结果等情况，通过沟通来共享资源；&lt;/p&gt;
&lt;p&gt;想要共享状态或访问共享资源时，sync包中的mutex互斥锁同步原语会确保对该资源的独占访问。虽然channel也可以保证共享资源的互斥访问，但是与mutex相比，channel 会导致性能下降；当只需要锁定少量共享资源时，使用 mutex 非常有用。&lt;/p&gt;
&lt;h3 id=&#34;58不理解竞争race问题&#34;&gt;58.不理解竞争race问题&lt;/h3&gt;
&lt;p&gt;当则编写的并发应用程序中工作时，了解数据竞争 data race 不同于竞争条件 data condition 是很重要的。当多个 goroutine 同时访问同一内存位置并且其中至少一个正在写入时，就会发生数据竞争。数据竞争意味着意外行为。但是，无数据竞争的应用程序并不一定意味着确定性结果。一个应用程序可以没有数据竞争，但仍然有依赖于不受控制的事件的行为（例如 goroutine 执行，消息发布到通道的速度，或者对数据库的调用持续多长时间），这是一个竞争条件。理解这两个概念对于精通并发应用程序的设计至关重要。&lt;/p&gt;
&lt;h4 id=&#34;go-内存模型&#34;&gt;Go 内存模型&lt;/h4&gt;
&lt;p&gt;Go 内存模型是一种规范，它定义了在不同的 goroutine 中写入相同变量后可以保证从一个 goroutine 中的变量读取的条件. 换句话说，Go开发人员应牢记内存模型规范，避免做出可能导致数据竞争、竞争条件的错误假设。具体细节：&lt;a href=&#34;https://research.swtch.com/gomm&#34;&gt;https://research.swtch.com/gomm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;tips: 由于多核处理器cpu之间独立的L1/L2 cache，会出现cache line不一致的问题，为了解决这个问题，有相关协议模型，比如MESI协议来保证cache数据一致，同时由于CPU对「缓存一致性协议」进行的异步优化，对写和读分别引入了「store buffer」和「invalid queue」，很可能导致后面的指令查不到前面指令的执行结果（各个指令的执行顺序非代码执行顺序），这种现象很多时候被称作「CPU乱序执行」，为了解决乱序问题（也可以理解为可见性问题，修改完没有及时同步到其他的CPU），又引出了「内存屏障」的概念；内存屏障可以分为三种类型：写屏障，读屏障以及全能屏障（包含了读写屏障），屏障可以简单理解为：在操作数据的时候，往数据插入一条”特殊的指令”。只要遇到这条指令，那前面的操作都得「完成」。CPU当发现写屏障指令时，会把该指令「之前」存在于「store Buffer」所有写指令刷入高速缓存。就可以让CPU修改的数据马上暴露给其他CPU，达到「写操作」可见性的效果。读屏障也是类似的：CPU当发现读屏障的指令时，会把该指令「之前」存在于「invalid queue」所有的指令都处理掉。通过这种方式就可以确保当前CPU的缓存状态是准确的，达到「读操作」一定是读取最新的效果。由于不同CPU架构的缓存体系不一样、缓存一致性协议不一样、重排序的策略不一样、所提供的内存屏障指令也有差异，所以一些语言c++/java/go/rust 都有实现自己的内存模型，应该相互都有些借鉴吧。&lt;/p&gt;
&lt;h3 id=&#34;59不了解工作负载类型的并发影响&#34;&gt;59.不了解工作负载类型的并发影响&lt;/h3&gt;
&lt;p&gt;上文提到到工作负载分两种：CPU-Bound 和 IO-Bound 已经说明了一些问题，文中使用的工作池，也是依赖于使用场景的工作负载类型是CPU-Bound还是 IO-Bound ; 如果 worker 执行的工作负载是 I/O-bound，则该值主要取决于外部系统。相反，如果工作量是受 CPU 限制，goroutine 的最佳数量接近于可用线程的数量。在设计并发应用程序时，了解工作负载类型（I/O 或 CPU）至关重要。&lt;/p&gt;
&lt;p&gt;大多数情况下，应该通过基准来验证假设。并发不是直截了当的，很容易做出草率的假设，结果证明是无效的。&lt;/p&gt;
&lt;h3 id=&#34;60误解-go-context&#34;&gt;60.误解 Go Context&lt;/h3&gt;
&lt;p&gt;文中主要是介绍了各种context的使用场景，&lt;code&gt;WithCancel&lt;/code&gt; ，&lt;code&gt;WithTimeout&lt;/code&gt;，&lt;code&gt;WithDeadline&lt;/code&gt;，&lt;code&gt;WithValue&lt;/code&gt;，以及1.20新加入的 &lt;code&gt;WithCancelCause&lt;/code&gt;返回CancelCauseFunc 可以记录Cancel导致的错误原因，通过&lt;code&gt;Cause&lt;/code&gt;获取到；具体可以在开发文档中学习即可： &lt;a href=&#34;https://pkg.go.dev/context&#34;&gt;https://pkg.go.dev/context&lt;/a&gt; ;&lt;/p&gt;
&lt;p&gt;使用Context的程序应该遵循这些规则，以保持接口在包之间的一致性，并启用静态分析工具来检查context传播：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传递 Context 时，而应该显式地传入函数，并且放在参数列表第一个位置，通常命名为 ctx；&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;DoSomething&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arg&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// ... use ctx ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;不要传递 nil 的 Context，在不确定的时候应该传递 &lt;code&gt;context.TODO()&lt;/code&gt;；而不是传递空上下文&lt;code&gt;context.Background&lt;/code&gt;。&lt;code&gt;context.TODO()&lt;/code&gt;返回一个空上下文，但在语义上，它表示要使用的上下文不清楚或尚不可用（例如，尚未由父级传播）。&lt;/li&gt;
&lt;li&gt;使用 context 的 Value 相关方法时只应该用于传递和请求相关的元数据(metadata)，不要用它传递一些可选参数；比如traceId, spanId, 建设微服务经常会用到。&lt;/li&gt;
&lt;li&gt;WithValue中的key, 必须可比较的，并且不应是字符串类型或任何其他内置类型，以避免使用context的包之间发生冲突；最佳做法是创建一个未导出的自定义类型；比如在包中定义 &lt;code&gt;type favContextKey string&lt;/code&gt; ，即使另一个包也用&lt;code&gt;favContextKey&lt;/code&gt; 这个名字，不是同一个key了。这个在http中间件里经常出现，记录在访问日志中记录相关信息。&lt;/li&gt;
&lt;li&gt;同一个 context 可以传递到不同的 goroutine 中，且在多个 goroutine 可以安全访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;概括&#34;&gt;概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;了解并发和并行之间的根本区别是 Go 开发人员知识的基石。并发是关于结构的，而并行是关于执行的。&lt;/li&gt;
&lt;li&gt;要成为熟练的开发人员，必须承认并发并不总是更快。涉及最小工作负载并行化的解决方案不一定比顺序实施更快。对顺序解决方案与并发解决方案进行基准测试应该是验证假设的方法。&lt;/li&gt;
&lt;li&gt;在channel和mutex之间做出决定时，了解 goroutine 交互也很有帮助。通常，对于共享资源变量， goroutine竞争访问时， 需要同步，使用同步机制sync包中mutex；对于 goroutine之间需要协调和编排，则使用channel。&lt;/li&gt;
&lt;li&gt;精通并发也意味着理解数据竞争和竞争条件是不同的概念。当多个 goroutine 同时访问同一内存位置并且其中至少一个正在写入时，就会发生数据竞争。同时，无数据竞争并不一定意味着确定性执行。当行为取决于无法控制的事件的顺序或时间时，这就是竞争条件。&lt;/li&gt;
&lt;li&gt;了解 Go 内存模型以及在排序和同步方面的底层保证对于防止可能的数据竞争和竞争条件至关重要。&lt;/li&gt;
&lt;li&gt;创建一定数量的 goroutine 时，请考虑工作负载类型。创建 CPU-bound goroutines 意味着将这个数字限制在变量附近&lt;code&gt;GOMAXPROCS&lt;/code&gt;（默认情况下基于主机上的 CPU 核心数）。创建 I/O-bound goroutines 取决于其他因素，例如外部系统。&lt;/li&gt;
&lt;li&gt;Go Context也是 Go 并发的基石之一。Context允许携带截止日期、取消信号、键值元数据列表(metadata)。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Go tips-笔记: 错误管理 48-54 mistakes</title>
      <link>https://weedge.github.io/post/notions/go-tips/go-tips-07-error-management/</link>
      <pubDate>Thu, 16 Feb 2023 14:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/notions/go-tips/go-tips-07-error-management/</guid>
      
        <description>&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;
&lt;h3 id=&#34;48panic&#34;&gt;48.panic&lt;/h3&gt;
&lt;p&gt;Go 新手对错误处理感到困惑是很常见的。在 Go 中，错误通常由返回的函数或方法管理类型&lt;code&gt;error&lt;/code&gt;作为最后一个参数（这个是代码风格，error可以作为第一个参数）；先了解下panic调用时的情况：&lt;/p&gt;
&lt;p&gt;一旦&lt;code&gt;panic&lt;/code&gt;被调用，它就会停止当前函数的执行并向上调用栈，直到当前 goroutine 出栈返回或被&lt;code&gt;recover&lt;/code&gt;捕获；值得注意点是当前协程函数中panic了，如果有defer函数还是会执行，所以一般使用defer func(){recover()} 的形式来防止协程panic,  而且只能recover住当前协程panic, 这是因为当前协程未使用recover时已经出栈返回，函数栈帧已经无效了，调用者是没法recover的。&lt;/p&gt;
&lt;p&gt;panic一般使用在程序启动时，一个依赖项未能初始化它时，可以使用，但是一般的做法是打印fatal日志退出；在服务启动之后，不能panic，一般记录错误日志，并且在服务运行过程中，需要对当前协程 panic recover住，以防常见的空指针访问数据，服务down掉的情况。&lt;/p&gt;
&lt;h3 id=&#34;49忽略何时error-wrap&#34;&gt;49.忽略何时error wrap&lt;/h3&gt;
&lt;p&gt;在处理错误时，需要向错误添加额外的上下文和/或将错误标记为特定类型。分为三种error情况进行使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果需要标记错误，应该创建一个自定义错误类型，比如errorCode。&lt;/li&gt;
&lt;li&gt;如果只想添加额外的上下文，应该使用&lt;code&gt;fmt.Errorf %w&lt;/code&gt;格式指令生成wrapError类型错误，因为它不需要创建新的错误类型；wrapError会产生潜在的耦合，它使源错误通过Unwrap可供调用者使用。&lt;/li&gt;
&lt;li&gt;如果不想使用源错误追溯，不应该使用wrapError，而是错误转换，例如使用&lt;code&gt;fmt.Errorf %v&lt;/code&gt;格式指令生成新的errorString类型错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;50不准确地检查error类型-重要&#34;&gt;50.不准确地检查error类型 (重要)&lt;/h3&gt;
&lt;p&gt;这个其实就是弄懂Go1.13引入的wrapError类型错误，这个错误类型因为是层层包裹源错误，如果将以前老的代码返回的错误重构成wrapError的话，在调用的地方判断err的时候 需要用 error.Is 错误值和 error.As 错误类型 函数进行判断，Is是从error 链中递归地Unwrap err遍历是否有对应目标error值,  As是从error 链中递归地Unwrap err并查看其中一个错误是否是特定error类型；这两个函数都是用了反射，如果错误链路长的话，会有一些性能折损。&lt;/p&gt;
&lt;h3 id=&#34;51检查error值不准确-重要&#34;&gt;51.检查error值不准确 （重要）&lt;/h3&gt;
&lt;p&gt;这里介绍的是wrapError类型错误在==比较错误值时，应该采用error.Is来判断。&lt;/p&gt;
&lt;h3 id=&#34;52处理error两次&#34;&gt;52.处理error两次&lt;/h3&gt;
&lt;p&gt;这个在工程项目中，使用Go开发，打日志经常出现错误打印多条的情况，对于并发服务，如果不用logId,traceId来辅助定位，一般很难定位到一次逻辑交互的多条日志信息。这里的处理方式将多条错误通过wrap的方式 一条打印出整条逻辑链路的错误信息出来。工程实践小细节吧，如果考虑性能影响，需要折中考虑了。&lt;/p&gt;
&lt;h3 id=&#34;53不处理错误-工程规范&#34;&gt;53.不处理错误 (工程规范）&lt;/h3&gt;
&lt;p&gt;忽略错误都应该使用_标识符显式标示，在不处理错误的函数调用地方，加上对应注释上下文逻辑说明为什么可以忽略。。。&lt;/p&gt;
&lt;h3 id=&#34;54不处理延迟错误&#34;&gt;54.不处理延迟错误&lt;/h3&gt;
&lt;p&gt;如果函数返回的错误需要考虑defer函数中的函数调用是否返回错误，则在defer闭包函数中先判断函数中的err是否不为nil, 是则直接闭包函数返回，否则将defer 闭包函数中处理的逻辑函数错误赋值给err。如果想忽略它，使用_标识符标示。&lt;/p&gt;
&lt;h2 id=&#34;概括&#34;&gt;概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;panic&lt;/code&gt;是 Go 中处理错误的一个选项。它应该只在不可恢复的情况下谨慎使用：例如，发出程序员错误信号或加载强制依赖项失败时。&lt;/li&gt;
&lt;li&gt;包装错误允许标记错误和/或提供额外的上下文。但是，错误包装会产生潜在的耦合，因为它使源错误可供调用者使用。如果想防止这种情况发生，请不要使用错误包装。&lt;/li&gt;
&lt;li&gt;如果使用 Go 1.13 &lt;code&gt;fmt.Errorf %w&lt;/code&gt;指令返回wrapError类型错误，则必须分别使用&lt;code&gt;errors.As&lt;/code&gt; 或者&lt;code&gt;errors.Is&lt;/code&gt;将错误与类型或值进行比较。&lt;/li&gt;
&lt;li&gt;要传达预期的错误，请使用错误哨兵（错误值）。意外错误应该是特定的错误类型。&lt;/li&gt;
&lt;li&gt;在大多数情况下，一个错误应该只处理一次。记录错误就是处理错误。因此，必须在记录或返回错误之间做出选择。在许多情况下，错误包装是解决方案，因为它允许为错误提供额外的上下文并返回源错误。&lt;/li&gt;
&lt;li&gt;忽略错误，无论是在函数调用期间还是在函数中&lt;code&gt;defer&lt;/code&gt;，都应该使用_标识符显式标示。否则，未来的读者可能会混淆这是故意的还是失误。&lt;/li&gt;
&lt;li&gt;在许多情况下，不应该忽略函数返回的错误&lt;code&gt;defer&lt;/code&gt;。根据上下文，直接处理它或将其传播给调用者。如果想忽略它，使用_标识符标示。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Go tips-笔记: 函数和方法 42-47 mistakes</title>
      <link>https://weedge.github.io/post/notions/go-tips/go-tips-06-functions-methods/</link>
      <pubDate>Wed, 15 Feb 2023 14:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/notions/go-tips/go-tips-06-functions-methods/</guid>
      
        <description>&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;
&lt;h3 id=&#34;42结构体方法不知道使用哪种类型的接收者&#34;&gt;42.结构体方法不知道使用哪种类型的接收者&lt;/h3&gt;
&lt;p&gt;文中说了很多，感觉为了凑数，主要就是围绕着值传递还是指针传递，值传递给接收者，如果结构体中没有指针类型成员，则不会改变接收者的数据；如有指针传递，则会改变。选择哪种传递方式，主要取决于结构体中的成员是否都是只读操作，如果是只读，使用值传递，否则使用指针传递。至于是否大结构体数据，这个由结构体中的成员来决定，是否有指针成员；&lt;/p&gt;
&lt;h3 id=&#34;43从不使用命名结果参数--建议&#34;&gt;43.从不使用命名结果参数  (建议)&lt;/h3&gt;
&lt;p&gt;主要是为了函数/结构体方法返回的值，更具代码可读性，数据类型本身不能表示具体含义，除非type 别名； 在大多数情况下，在接口定义的上下文中使用命名结果参数可以提高可读性而不会导致任何副作用。但是在方法实现的上下文中没有严格的规则。 当有明显的好处时，应该谨慎使用命名结果参数。&lt;/p&gt;
&lt;h3 id=&#34;44具有命名结果参数的意外副作用-建议&#34;&gt;44.具有命名结果参数的意外副作用 （建议）&lt;/h3&gt;
&lt;p&gt;如果使用命名的结构参数，声明了结果的变量名，在函数方法体内进行初始定义，使用时注意不用被同名覆盖，特别是在处理错误逻辑时，错误的返回情况，所以 使用命名结果参数时保持谨慎，以避免潜在的副作用 。&lt;/p&gt;
&lt;h3 id=&#34;45返回一个-nil-接口-重要&#34;&gt;45.返回一个 nil 接口 (重要)&lt;/h3&gt;
&lt;p&gt;在处理自定义实现error接口的错误体结构，判断错误时需要注意的地方，如果接口error 为未赋值的自定义错误体结构，虽然错误体结构为nil，但是interface error不为nil, 其interface error 内部指向的错误体结构为nil， 所以需要判断erro为nil时， 直接返回nil值, 而不是为nil的错误体结构体指针；这个是Go中经常会遇到的坑。这种情况也可能发生在任何使用指针接收者实现的接口，需要保持谨慎。&lt;/p&gt;
&lt;h3 id=&#34;46使用文件名作为函数输入&#34;&gt;46.使用文件名作为函数输入&lt;/h3&gt;
&lt;p&gt;这个是属于设计问题了，函数操作的是共性数据时，应该采用接口作为函数的输入，以便解耦具体实现，方便测试和扩展，比如文中所提到扫描数据内容的行数，属于读操作，可以使用&lt;code&gt;io.Reader&lt;/code&gt; 接口作为参数，如果是写操作，使用io.Writer 等等，io包中封装了不同接口组合; bufio包中有对应方法接受接口参数进行读写操作；这样数据源只要实现对应读写接口方法即可。&lt;/p&gt;
&lt;h3 id=&#34;47忽略defer参数和接收者的计算方式-重要&#34;&gt;47.忽略defer参数和接收者的计算方式 (重要)&lt;/h3&gt;
&lt;p&gt;在传递defer 函数参数时，函数的参数是值拷贝传递，传入的值为当前值，比如defer f(a) 在f的定义中,传入参数对a值进行了值拷贝，所以外部a值怎么变，已经和defer函数中的参数值已经没有关系了，如果想继续使用的话， 提供了两种方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;defer 函数参数采用指针传递，比如f(&amp;amp;a)，这样指向同一地址空间，需要函数传入指针类型，这个对于已有封装好的函数是不可行的。&lt;/li&gt;
&lt;li&gt;使用闭包函数，defer func(){f(a)}() 这样可以引用到在return之前a的最终值，如果改成 defer func(a int){f(a)}(a), 则和原来值传递的情况一样。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意的地方，如果defer的是结构体实例的方法，比如 defer s.f() ，如果s是指针传递，则后续结构体实例s中的成员有变化，也会影响到defer s.f(); 如果采用值传递给接受者s, 则是当前s的值拷贝，后续怎么变都不影响；&lt;/p&gt;
&lt;h2 id=&#34;概括&#34;&gt;概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;应该根据类型、是否必须改变、是否包含无法复制的字段以及对象有多大等因素来决定是使用值还是指针接收器。如有疑问，请使用指针接收器。&lt;/li&gt;
&lt;li&gt;使用命名结果参数是提高函数/方法可读性的有效方法，尤其是在多个结果参数具有相同类型的情况下。在某些情况下，这种方法也很方便，因为命名的结果参数被初始化为它们的零值。但要注意潜在的副作用。&lt;/li&gt;
&lt;li&gt;返回接口时，注意不要返回一个 nil 指针，而是一个显式的 nil 值。否则，可能会导致意想不到的后果，因为调用者将收到一个非零值。&lt;/li&gt;
&lt;li&gt;将函数设计为接收&lt;code&gt;io.Reader&lt;/code&gt;类型而不是文件名可以提高函数的可重用性并使测试更容易。&lt;/li&gt;
&lt;li&gt;传递指向函数的指针&lt;code&gt;defer&lt;/code&gt;和将调用封装在闭包中是克服接收者参数立即求值的两种解决方案。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Go tips-笔记: string 36-41 mistakes</title>
      <link>https://weedge.github.io/post/notions/go-tips/go-tips-05-strings/</link>
      <pubDate>Tue, 14 Feb 2023 14:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/notions/go-tips/go-tips-05-strings/</guid>
      
        <description>&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;
&lt;p&gt;在 Go 中，string是一种不可变的数据结构，包含以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指向不可变字节序列的指针，指向一个byte类型的数组&lt;/li&gt;
&lt;li&gt;此序列中的总字节数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;string在Go中的内部结构是&lt;code&gt;reflect.StringHeader&lt;/code&gt;位于&lt;code&gt;reflect/value.go&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// StringHeader is the runtime representation of a string.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// It cannot be used safely or portably and its representation may
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// change in a later release.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Moreover, the Data field is not sufficient to guarantee the data
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// it references will not be garbage collected, so programs must keep
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// a separate, correctly typed pointer to the underlying data.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;StringHeader&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Len&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//uintptr  an unsigned integer large enough to store the uninterpreted bits of a pointer value
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;已通过unsafe.Poniter显示的将 string转换成&lt;code&gt;reflect.StringHeader&lt;/code&gt; 结构，进而可以获取结构中的Data指正，然后通过unsafe.Poniter显示转成数组，比如[5]byte， 数组大小不一定等于原始string长度，即使越界访问，因为是只读，如果写的话会出现panic，所以可以越界这样获取； 代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ViewStringStruct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;sh&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reflect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;StringHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0x%x\\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 5
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//arrPtr := (*[]byte)(ptr) // panic
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;//arrPtr := (*[3]byte)(ptr)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;//arrPtr := (*[100]byte)(ptr) // access violation, string just only read, so is ok
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;arrPtr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arrPtr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [104 101 108 108 111]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arrPtr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//arrPtr[3] = 100 // panic, string cann&amp;#39;t change
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;[]byte 和 string的相互转换，在读取字符串的场景下经常使用到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Str2Bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;36不理解rune的概念-重要&#34;&gt;36.不理解rune的概念 （重要）&lt;/h3&gt;
&lt;p&gt;字符集和编码之间的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符集(charset)是一组字符。例如，Unicode 字符集包含 2^21 个字符。&lt;/li&gt;
&lt;li&gt;编码(encoding)是字符列表的二进制转换。例如，UTF-8 是一种编码标准，能够将所有 Unicode 字符编码为可变字节数（从 1 到 4 字节）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UTF-8 将字符编码为 1 到 4 个字节，因此最多为 32 位, rune 是 int32的别名；需要清楚以下概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符集是一组字符，而编码描述了如何将字符集转换为二进制。&lt;/li&gt;
&lt;li&gt;在 Go 中，string引用任意字节的不可变切片。&lt;/li&gt;
&lt;li&gt;Go 源代码使用 UTF-8 编码。因此，所有字符串文字都是 UTF-8 字符串。但是因为字符串可以包含任意字节，如果它是从其他地方（不是源代码）获得的，则不能保证它是基于 UTF-8 编码的。&lt;/li&gt;
&lt;li&gt;rune对应于 Unicode 码位(code point)的概念，请参考：&lt;a href=&#34;https://en.wikipedia.org/wiki/Code_point&#34;&gt;code point&lt;/a&gt;，由单个值表示。&lt;/li&gt;
&lt;li&gt;使用 UTF-8，可以将 Unicode 码位(code point)编码为 1 到 4 个字节。&lt;/li&gt;
&lt;li&gt;在 Go 中使用&lt;code&gt;len&lt;/code&gt;字符串返回字节数，而不是rune数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想准确获取到有符文(rune)字符串的长度，可以使用&lt;code&gt;utf8.RuneCountInString&lt;/code&gt; 函数&lt;/p&gt;
&lt;h3 id=&#34;37不准确的字符串迭代&#34;&gt;37.不准确的字符串迭代&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;position %d: %c\\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上代码，没有遍历每个rune，而是迭代rune的每个起始索引；&lt;/p&gt;
&lt;p&gt;如果想遍历字符串的符文(rune)，可以使用&lt;code&gt;range&lt;/code&gt;直接在字符串上循环，必须记住，**索引对应的不是符文索引，而是符文字节序列的起始索引；**因为一个符文可以由多个字节组成，如果要访问符文本身，应该使用 的值变量&lt;code&gt;range&lt;/code&gt;，而不是字符串中的索引;&lt;/p&gt;
&lt;p&gt;如果想获取第i个字符串的符文(rune)，在大多数情况下应该将字符串转换为一段 runes。&lt;/p&gt;
&lt;h3 id=&#34;38滥用-trim-函数&#34;&gt;38.滥用 trim 函数&lt;/h3&gt;
&lt;p&gt;Go中的strings包，开发者可能经常混淆使用TrimRight 和 TrimSuffix， 或者 TrimLeft 和 TrimPrefix&lt;/p&gt;
&lt;p&gt;TrimRight向后遍历每个符文；如果符文是提供的集合的一部分，则该函数将其删除。如果不是，该函数将停止迭代并返回剩余的字符串。TrimLeft 向前遍历同理。  Trim 函数 两边遍历也是一样。&lt;/p&gt;
&lt;p&gt;如果想匹配整体的字符串进行删除的话， 应该使用 TrimSuffix 和 TrimPrefix，如果两边移除分别调用这两个方法。&lt;/p&gt;
&lt;h3 id=&#34;39优化不足的字符串连接&#34;&gt;39.优化不足的字符串连接&lt;/h3&gt;
&lt;p&gt;如果使用 s += str 的方式连接字符串，会有性能问题，因为字符的数据是不可变的，每次字符串 + 连接操作都会重新分配一次内存空间(allocator)；&lt;/p&gt;
&lt;p&gt;应该使用 strings.Builder 结构来拼接字符串， Builder结构中有一个byte切片 buf []byte用于数据拼接，WriteString 内部使用append来操作，前面提到append操作会出发自动扩容，这样不用每次拼接的时候分配一次新的内存空间，提高了性能； 如果可以获取到拼接字符串的长度，那就可以直接通过 Grow函数来一次初始化拼接buf byte切片内存空间，这样性能可以得到进一步的提升(与 21. 切片初始化效率低下 分析一样)。类似WriteString方法对应string 类型，还有一下三总方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字节切片使用&lt;code&gt;Write&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;单字节使用&lt;code&gt;WriteByte&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;单个符文使用&lt;code&gt;WriteRune&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然如果拼接的短字符串就那么几个，则没有必要使用strings.Builder 结构来拼接字符串，性能提升可以忽略，但是代码量可读性方面就降低了，可读性不如使用运算符&lt;code&gt;+=&lt;/code&gt;或&lt;code&gt;fmt.Sprintf&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;40无用的字符串转换&#34;&gt;40.无用的字符串转换&lt;/h3&gt;
&lt;p&gt;比如 string 转[]byte,  []byte 转string， 如果是直接 []byte(string) 或者 string([]byte)，转换都会有额外的内存分配，而且转换后的string是不可变的； 所以在进行字符串操作的时候，尽量都使用[]byte类型，避免转换string带来的额外操作，&lt;code&gt;strings&lt;/code&gt;包也有替代品包&lt;code&gt;bytes&lt;/code&gt;，大多数 I/O Buffer 都是操作 &lt;code&gt;[]byte&lt;/code&gt;，字符串的拼接Builder结构也是对[]byte的操作。&lt;/p&gt;
&lt;h3 id=&#34;41子字符串和内存泄漏&#34;&gt;41.子字符串和内存泄漏&lt;/h3&gt;
&lt;p&gt;在 Go 中使用子字符串操作时，字符串的结构可知：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供的间隔是基于字节数，而不是符文数。&lt;/li&gt;
&lt;li&gt;子字符串操作可能会导致内存泄漏，因为生成的子字符串将与初始字符串共享相同的底层数组。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;防止这种情况发生的解决方案是手动执行字符串复制，或者从 Go 1.18 开始引入&lt;code&gt;strings.Clone&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;概括&#34;&gt;概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;了解符文对应于 Unicode 码位(code point)的概念，它可以由多个字节组成，应该是 Go 开发人员准确处理字符串的核心知识的一部分。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;range&lt;/code&gt;运算符迭代字符串会迭代符文，其索引对应于符文字节序列的起始索引。要访问特定的符文索引（例如第三个符文），请将字符串转换为&lt;code&gt;[]rune&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strings.TrimRight&lt;/code&gt;/&lt;code&gt;strings.TrimLeft&lt;/code&gt;删除给定集合中包含的所有向后/向前符文返回，而&lt;code&gt;strings.TrimSuffix&lt;/code&gt;/&lt;code&gt;strings.TrimPrefix&lt;/code&gt;删除提供后缀/前缀的字符串&lt;code&gt;返回&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;应该连接字符串列表&lt;code&gt;strings.Builder&lt;/code&gt;以防止在每次迭代期间分配新字符串。&lt;/li&gt;
&lt;li&gt;记住&lt;code&gt;bytes&lt;/code&gt;包提供与包相同的操作&lt;code&gt;strings&lt;/code&gt;可以帮助避免额外的字节/字符串转换。&lt;/li&gt;
&lt;li&gt;使用副本而不是子字符串可以防止内存泄漏，因为子字符串操作返回的字符串将由相同的字节数组支持。&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>Go tips-笔记: 控制语句 30-35 mistakes</title>
      <link>https://weedge.github.io/post/notions/go-tips/go-tips-04-control-structures/</link>
      <pubDate>Tue, 14 Feb 2023 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/notions/go-tips/go-tips-04-control-structures/</guid>
      
        <description>&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;
&lt;h3 id=&#34;30忽略了元素在-for-range循环中被复制-重要&#34;&gt;30.忽略了元素在 for range循环中被复制 (重要)&lt;/h3&gt;
&lt;p&gt;需要注意，&lt;code&gt;range&lt;/code&gt;循环中的值元素是一个复制的副本。因此，如果值是需要改变结构，只会更新副本，而不是元素本身，除非修改的值或字段是指针。在经典for循环或者for range循环中，通过索引访问元素来进行修改。&lt;/p&gt;
&lt;h3 id=&#34;31忽略了参数在for-range循环中的计算方式-重要&#34;&gt;31.忽略了参数在for range循环中的计算方式 (重要)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pointer&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;len&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;cap&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;// debug check slice array ptr (bp[0]), 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// if append happen slicegrow, array ptr change -&amp;gt; new array
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;bp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0x%x\\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;notice&lt;/strong&gt;： 这段代码在原文中分析过程是有误的，但不影响整体结果；range s 之后会发生值拷贝出现copy s, 在append之前，copy s 和 s的array ptr指向同一地址空间；当发生append之后，s 发生来扩容，s的ptr指向了新的地址空间，copy s还是指向原来的地址空间，两者的ptr指向的地址空间已经不同了；&lt;/p&gt;
&lt;p&gt;对于ch chan 同理 ， range ch 之后会发生值拷贝出现copy ch；对copy ch进行遍历;&lt;/p&gt;
&lt;p&gt;对应数组arr […]int{1,2,3} 也是同理，range arr 之后会发生值拷贝出现copy arr; 对copy arr进行遍历， 如果想想改变对应arr的值，可以使用下标访问，或者 range &amp;amp;arr 之后 反生copy 数组引用&amp;amp;arr 指向同一地址空间;&lt;/p&gt;
&lt;h3 id=&#34;32忽略了在for-range中使用指针元素的影响--重要&#34;&gt;32.忽略了在for range中使用指针元素的影响  (重要)&lt;/h3&gt;
&lt;p&gt;由于 for _, val := range   &amp;amp;val的地址是一个常量，每次迭代指向不同的值，但是地址是同一个，所以在使用&amp;amp;val， 需要特别注意，如果存放&amp;amp;val值，循环迭代完之后，&amp;amp;val指向最后一个元素；如何解决呢， 两个主要的解决方案： 1. 值拷贝，然后赋予地址；2. 直接只用下标对应值的地址；&lt;/p&gt;
&lt;h3 id=&#34;33在map迭代期间做出错误的假设-重要&#34;&gt;33.在map迭代期间做出错误的假设 (重要)&lt;/h3&gt;
&lt;p&gt;一种是错误的有序性假设， map是无序的，每次循环是随机获取key，就是说，插入顺序和读取的顺序不一致，每次循环读取的顺序都不同；应该清楚这些map无序行为，这样代码就不会基于错误的假设；&lt;/p&gt;
&lt;p&gt;那么为什么 Go 有这样一种令人惊讶的方式来遍历map呢？这是语言设计者有意识的选择。他们想添加某种形式的随机性，以确保开发人员在使用map时永远不会依赖任何顺序假设（请参阅http://mng.bz/M2JW）；&lt;/p&gt;
&lt;p&gt;一种是迭代map时插入k/v，在 Go 中，允许在迭代期间更新map（插入或删除元素）；它不会导致编译错误或运行时错误。但是，在迭代期间在map中添加条目时，应该考虑这种情况，以避免出现不确定的结果。出现的情况：&lt;/p&gt;
&lt;p&gt;在Go中，&lt;em&gt;如果在迭代过程中创建了map条目，则可以在迭代过程中产生或跳过。对于创建的每个条目以及从一个迭代到下一个迭代，选择可能会有所不同。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;必须牢记这种行为，以确保代码不会产生不可预测的输出。如果想在迭代map的同时更新map并确保添加的条目不是迭代的一部分，一种解决方案是copy map，迭代map, 在用新的copy map中添加条目；&lt;/p&gt;
&lt;p&gt;总而言之，当使用map时，不应该依赖以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按键排序的数据&lt;/li&gt;
&lt;li&gt;保留插入顺序&lt;/li&gt;
&lt;li&gt;确定性迭代顺序&lt;/li&gt;
&lt;li&gt;在添加元素的同一迭代中生成的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;记住这些行为应该有助于避免基于错误假设的常见错误。&lt;/p&gt;
&lt;h3 id=&#34;34忽略-break-语句是如何工作的&#34;&gt;34.忽略 break 语句是如何工作的&lt;/h3&gt;
&lt;p&gt;在Go中， 一个基本规则是&lt;code&gt;break&lt;/code&gt;语句终止的执行最里面的&lt;code&gt;for&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, 或&lt;code&gt;select&lt;/code&gt;语句。&lt;/p&gt;
&lt;p&gt;如何编写代码来打破循环呢？ 最惯用的方法是使用标签， 从对应的标签代码块中break; 或者对标签块代码封装成函数，直接return;&lt;/p&gt;
&lt;h3 id=&#34;35在循环中使用-defer&#34;&gt;35.在循环中使用 defer&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;defer&lt;/code&gt;时，必须记住它会在周围函数返回时安排函数调用。因此，&lt;code&gt;defer&lt;/code&gt;在循环内调用将堆叠所有调用：它们不会在每次迭代期间执行，例如，如果循环未终止，这可能会导致内存泄漏。解决这个问题最方便的方法是在每次迭代中引入另一个函数来调用。但是，如果性能至关重要，那么一个缺点就是函数调用增加的开销。如果有这样的情况并且想要防止这种开销，应该在循环之前摆脱&lt;code&gt;defer&lt;/code&gt;并手动处理延迟调用。&lt;/p&gt;
&lt;h2 id=&#34;概括&#34;&gt;概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;循环中的值元素&lt;code&gt;range&lt;/code&gt;是一个副本。因此要改变一个结构，例如，通过其索引或通过经典&lt;code&gt;for&lt;/code&gt;循环访问它（除非修改的元素或字段是指针）。&lt;/li&gt;
&lt;li&gt;了解传递给运算符的表达式&lt;code&gt;range&lt;/code&gt;在循环开始之前仅计算一次可以帮助避免常见错误，例如通道或切片迭代中的低效赋值。&lt;/li&gt;
&lt;li&gt;使用局部变量或使用索引访问元素，可以防止在循环内复制指针时出错。&lt;/li&gt;
&lt;li&gt;为确保在使用map时可预测输出，请记住map数据结构
&lt;ul&gt;
&lt;li&gt;不按键排序数据&lt;/li&gt;
&lt;li&gt;不保留插入顺序&lt;/li&gt;
&lt;li&gt;没有确定的迭代顺序&lt;/li&gt;
&lt;li&gt;不保证在迭代期间添加的元素将在本次迭代中生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;语句终止的执行最里面的&lt;code&gt;for&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, 或&lt;code&gt;select&lt;/code&gt;语句，使用标签，可以从对应的标签代码块中break。&lt;/li&gt;
&lt;li&gt;提取函数内部的循环逻辑会导致&lt;code&gt;defer&lt;/code&gt;在每次迭代结束时执行一条语句。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Go tips-笔记: 数据类型 17-29 mistakes</title>
      <link>https://weedge.github.io/post/notions/go-tips/go-tips-03-data-types/</link>
      <pubDate>Mon, 13 Feb 2023 20:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/notions/go-tips/go-tips-03-data-types/</guid>
      
        <description>&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;
&lt;h3 id=&#34;17与八进制文字混淆&#34;&gt;17.与八进制文字混淆&lt;/h3&gt;
&lt;p&gt;Go 可以处理二进制、十六进制、虚数和八进制数。八进制数字以 0 开头。但是，为了提高可读性并避免未来代码阅读器可能犯的错误，请使用前缀明确表示八进制数字&lt;code&gt;0o&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;18忽略整数溢出&#34;&gt;18.忽略整数溢出&lt;/h3&gt;
&lt;p&gt;在处理大数字或进行转换成小数字，进行运算时，可能会出现溢出。溢出会产生一些bug, 所以需要再一些可能溢出的场景中增加检测判断是否溢出，溢出则直接panic,或者进行错误返回&lt;/p&gt;
&lt;h3 id=&#34;19不理解浮点数&#34;&gt;19.不理解浮点数&lt;/h3&gt;
&lt;p&gt;以&lt;code&gt;float64&lt;/code&gt;类型为例。&lt;code&gt;math.SmallestNonzeroFloat64&lt;/code&gt;（&lt;code&gt;float64&lt;/code&gt;最小值）和&lt;code&gt;math.MaxFloat64&lt;/code&gt;（最大值）之间存在无限多个实数值&lt;code&gt;float64&lt;/code&gt;。但是该&lt;code&gt;float64&lt;/code&gt;类型有有限位数：64。因为不可能将无限值放入有限空间，所以必须使用近似值，因此可能会失去精度。同样的逻辑适用于类型&lt;code&gt;float32&lt;/code&gt;。所以在使用&lt;code&gt;==&lt;/code&gt;运算符比较两个浮点数可能会导致不准确，浮点计算的结果取决于实际的处理器。最多处理器有一个浮点单元 (FPU) 来处理此类计算。不能保证在一台机器上执行的结果在另一台具有不同 FPU 的机器上是相同的。&lt;code&gt;testify&lt;/code&gt;测试( &lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;https://github.com/stretchr/testify&lt;/a&gt; ) 有一个&lt;code&gt;InDelta&lt;/code&gt;功能断言两个值在彼此给定的误差范围内。&lt;/p&gt;
&lt;p&gt;Go&lt;code&gt;float32&lt;/code&gt;和&lt;code&gt;float64&lt;/code&gt;是近似值。必须牢记一些规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比较两个浮点数时，检查它们的差异是否在可接受的范围内。&lt;/li&gt;
&lt;li&gt;执行加法或减法时，将具有相似数量级的运算分组以获得更好的准确性。&lt;/li&gt;
&lt;li&gt;为了保证准确性，如果一系列运算需要加、减、乘或除，请先执行乘除运算。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;20不了解切片长度和容量&#34;&gt;20.不了解切片长度和容量&lt;/h3&gt;
&lt;p&gt;平常代码中经常用到是的slice, 和数组不是一个概念，这个是在Go中最容易犯得错误，需要了解slice结构，对于只读操作，可以在slice结构指向的数组进行复用，而无需重新分配空间（注意复用后是否需要回收）；但是在append操作时，需要考虑什么时候扩容，重新分配了数组空间；书中有个错误地方，也是很多文章介绍slice grow时不准确的地方，在1.18版本之后，slicegrow方法有所改进，具体查看 &lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.18/src/runtime/slice.go&#34;&gt;https://github.com/golang/go/blob/release-branch.go1.18/src/runtime/slice.go&lt;/a&gt;  growslice函数；&lt;/p&gt;
&lt;h3 id=&#34;21切片初始化效率低下&#34;&gt;21.切片初始化效率低下&lt;/h3&gt;
&lt;p&gt;切片在初始化时，尽量分配好容量，如果经常append操作，对于未初始化容量的slice, 在append 进行slicegrow扩容操作时，会分配一个临时的内存空间，导致 GC 需要付出额外的努力来清理所有这些临时分配的内存空间。也尽量初始化slice长度大小，这样直接可以用数组下标进行操作，效率更高，对于性能有要求的场景选择后者；&lt;/p&gt;
&lt;h3 id=&#34;22对-nil-和空切片感到困惑&#34;&gt;22.对 nil 和空切片感到困惑&lt;/h3&gt;
&lt;p&gt;比如 这个在开发api返回json数据时经常会遇到，一般情况会返回一个空切片，防止调用端未判断nil而导致panic；具体根据上下文初始化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var s []string&lt;/code&gt;如果不确定最终长度并且切片可以为空&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]string(nil)&lt;/code&gt;作为创建 nil 和空切片的语法糖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make([]string,&lt;/code&gt; &lt;code&gt;length)&lt;/code&gt;如果未来的长度已知&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23没有正确检查切片是否为空&#34;&gt;23.没有正确检查切片是否为空&lt;/h3&gt;
&lt;p&gt;不管是空切片还是nil, 通过检查长度len(slice)是最好的选择, 都是0&lt;/p&gt;
&lt;h3 id=&#34;24没有正确使用切片copy&#34;&gt;24.没有正确使用切片copy&lt;/h3&gt;
&lt;p&gt;其实就是了解copy函数，复制到目标切片的元素数量为源切片和目标切片长度最小值min(len(dst),len(src))，而且不能混淆参数来，copy(dst,src []Type)，还有一种替换方案：&lt;code&gt;dst := append([]int(nil), src...)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;25使用切片附加的意外副作用&#34;&gt;25.使用切片附加的意外副作用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;s3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// s1=[1 2 10],len(s1)=3,cap(s1)=3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// s2=[2],len(s2)=1,cap(s2)=2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// s3=[2 10],len(s3)=2,cap(s3)=2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里和第20个一样的道理，理解切片的接口，以及什么时候扩容，不扩容时，共享底层数组，打印数据有长度大小决定，如果在容量范围内想要获取溢出的数据，也是可以做到的，需要引入不安全的指针操作，比如想越界获取s2[1]的值，如下 ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;bp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ss2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ss2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// s1=[1 2 100],len(s1)=3,cap(s1)=3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// s2=[2,100],len(s2)=2,cap(s2)=2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// s3=[2 100],len(s3)=1,cap(s3)=2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果不想改变s1和s2指向的数组数据，可以进行copy操作，然后在append数据给s3&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;s3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// s3 := append([]int(nil),s2...)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// s1=[1 2 3],len(s1)=3,cap(s1)=3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// s2=[2],len(s2)=1,cap(s2)=2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// s3=[2 10],len(s3)=2,cap(s3)=2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;完整切片表达式&lt;/em&gt;: &lt;code&gt;s[low:high:max]&lt;/code&gt;。max没有赋值默认为原始数据容量大小，如果max值超过原始数据容量则会在运行时panic；生成的切片的容量等于&lt;code&gt;max - low&lt;/code&gt;，长度等于&lt;code&gt;high-low&lt;/code&gt;，数据范围在[low,high) 左闭右开区间进行切片。&lt;/p&gt;
&lt;p&gt;所以使用切片时，可能会面临导致意想不到的副作用的情况。如果生成的切片的长度小于其容量，&lt;code&gt;append&lt;/code&gt;则可以改变原始切片。如果想限制可能的副作用的范围，可以使用切片copy或完整的切片表达式，这会阻止进行复制。&lt;/p&gt;
&lt;h3 id=&#34;26切片和内存泄漏-重要&#34;&gt;26.切片和内存泄漏 (重要）&lt;/h3&gt;
&lt;p&gt;切片中导致内存泄露的原因是，切片一直在复用，未被gc释放，每次重新使用又会重新分配一次内存空间，一直重复分配，导致内存泄露，比如，在网络请求中，消息数据大于32KB，需要对网络的消息协议进行解包之后处理保存数据， 首先从网络中获取消息，然后从消息中获取协议头，通过切片方式复用对应消息，下次从网络请求中获取消息数据，又重新从堆上分配了新的内存空间，以前复用的空间还未释放，最终导致内存泄露；解决这个问题的方案，从消息中获取协议头，只copy协议头部分数据进行处理，处理完，由gc来释放内存空间；&lt;/p&gt;
&lt;p&gt;根据经验，请记住对大切片或数组进行切片可能会导致潜在的高内存消耗。剩余的空间不会被 GC 回收，尽管只使用了几个元素，但可以保留一个大的后备数组。copy切片是防止这种情况的解决方案。通过runtime.ReadMemStats 函数可以获取运行时内存alloctor的统计信息MemStats,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printAlloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MemStats&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ReadMemStats&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d KB\\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Alloc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;介绍了两个潜在的内存泄漏问题:&lt;/p&gt;
&lt;p&gt;第一个是关于对现有切片或数组进行切片以保留容量；如果处理大型切片并将它们重新切片以仅保留一小部分，则大量内存将保持分配状态但未使用。&lt;/p&gt;
&lt;p&gt;第二个问题是，当对指针或具有指针字段的结构使用切片操作时，需要知道 GC 不会回收这些元素。&lt;/p&gt;
&lt;p&gt;在这种情况下，两个选项是执行复制或将剩余元素字段显式标记为&lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;27低效的map初始化&#34;&gt;27.低效的map初始化&lt;/h3&gt;
&lt;p&gt;在使用slice切片时，如果预先知道要添加到切片中的元素数量，就可以使用给定的大小或容量对其进行初始化。这避免了必须不断重复昂贵的切片增长操作。这个想法与map类似。这样可以尽量减少map的扩容，重新分配新的空间，以及扩容后的rehash平衡所有元素。&lt;/p&gt;
&lt;h3 id=&#34;28map和内存泄漏&#34;&gt;28.map和内存泄漏&lt;/h3&gt;
&lt;p&gt;向map中添加&lt;em&gt;n个&lt;/em&gt;元素，然后删除所有元素，意味着在内存中保留相同数量的桶。因为 Go map 的大小只会增加，所以它的内存消耗也会增加。没有自动策略来缩小它。如果这导致高内存消耗，可以尝试不同的方法，例如强制 Go 重新创建map(这种方式不太可取，在复制之后和下一次垃圾回收之前，可能会在短时间内消耗当前内存的两倍) 或 val存放指向数据的指针；&lt;/p&gt;
&lt;p&gt;tips： 需要了解map的结构，以及map中的key （可比较类型）&lt;/p&gt;
&lt;h3 id=&#34;29错误地比较值&#34;&gt;29.错误地比较值&lt;/h3&gt;
&lt;p&gt;具体可比较的类型见官方最新文档： (重要)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://go.dev/ref/spec#Comparison_operators&#34;&gt;The Go Programming Language Specification - The Go Programming Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑到文档中这些行为，如果必须比较两个切片、两个map或两个包含不可比较类型的结构，有哪些选择？如果坚持使用标准库，一个选择是使用运行时反射&lt;code&gt;reflect&lt;/code&gt;包中的&lt;code&gt;reflect.DeepEqual&lt;/code&gt;方法， 但是由性能损失，一般不用于生产环境，主要用于单元测试返回的值是否是预期值，还有类似的三方库用于测试时的期望值比较，比如&lt;code&gt;go-cmp&lt;/code&gt; ( &lt;a href=&#34;https://github.com/google/go-cmp&#34;&gt;https://github.com/google/go-cmp&lt;/a&gt; ) 或&lt;code&gt;testify&lt;/code&gt;( &lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;https://github.com/stretchr/testify&lt;/a&gt; )；如果性能在运行时至关重要，那么实施自定义方法可能是最佳解决方案；&lt;/p&gt;
&lt;h2 id=&#34;概括&#34;&gt;概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;阅读现有代码时，请记住以 0 开头的整数文字是八进制数。此外，为了提高可读性，通过在八进制整数前加上&lt;code&gt;0o&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;因为整数上溢和下溢在 Go 中是静默处理的，所以可以实现自己的函数来捕获它们。&lt;/li&gt;
&lt;li&gt;在给定的误差范围内进行浮点比较可以确保代码是可移植的。&lt;/li&gt;
&lt;li&gt;执行加法或减法时，将具有相似数量级的运算分组以提高准确性。此外，在加减法之前执行乘法和除法。&lt;/li&gt;
&lt;li&gt;了解切片长度和容量之间的差异应该是 Go 开发人员核心知识的一部分。切片长度是切片中可用元素的数量，而切片容量是后备数组中元素的数量。&lt;/li&gt;
&lt;li&gt;创建切片时，如果其长度已知，则使用给定的长度或容量对其进行初始化。这减少了分配的数量并提高了性能。map的逻辑相同，需要初始化它们的大小。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt;如果两个不同的函数使用由同一数组支持的切片，则使用复制或完整切片表达式是一种防止产生冲突的方法。但是，如果想缩小一个大切片，只有切片copy可以防止内存泄漏。&lt;/li&gt;
&lt;li&gt;要使用内置函数将一个切片复制到另一个切片&lt;code&gt;copy&lt;/code&gt;，请记住复制的元素数对应于两个切片长度之间的最小值。&lt;/li&gt;
&lt;li&gt;使用指针切片或具有指针字段的结构，可以通过标记&lt;code&gt;nil&lt;/code&gt;为切片操作排除的元素来避免内存泄漏。&lt;/li&gt;
&lt;li&gt;为了防止常见的混淆，例如在使用&lt;code&gt;encoding/json&lt;/code&gt;or&lt;code&gt;reflect&lt;/code&gt;包时，需要了解 nil 和空切片之间的区别。两者都是零长度、零容量的切片，但只有 nil 切片不需要分配。&lt;/li&gt;
&lt;li&gt;要检查切片是否不包含任何元素，请检查其长度。无论切片是否为&lt;code&gt;nil&lt;/code&gt;空，此检查都有效。map也是如此。&lt;/li&gt;
&lt;li&gt;要设计明确的 API，不应该区分 nil 和空切片。&lt;/li&gt;
&lt;li&gt;map可以在内存中增长，但永远不会缩小。因此，如果它导致一些内存问题，可以尝试不同的选项，例如强制 Go 重新创建map或使用指针。&lt;/li&gt;
&lt;li&gt;要在 Go 中比较类型，如果两种类型是可比较的，则可以使用&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;!=&lt;/code&gt;运算符：布尔值、数字、string、指针、channel和由可比较类型组成的结构体。否则，可以使用&lt;code&gt;reflect.DeepEqual&lt;/code&gt;反射并为此付出代价，也可以使用自定义实现和库。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Go tips-笔记: 代码和项目组织 1-16 mistakes</title>
      <link>https://weedge.github.io/post/notions/go-tips/go-tips-02-code-project-organization/</link>
      <pubDate>Mon, 13 Feb 2023 14:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/notions/go-tips/go-tips-02-code-project-organization/</guid>
      
        <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;从错误中学习效率更高，而且从错误失败的场景下学习，往往比直接交代正确性的理论知识，没有上下文的结果去 记忆巩固知识，在错误失败场景下往往印象更深刻；可以帮助更好地避免错误并做出更明智、更有意识的决定，因为现在了解了错误背后的基本原理，有种该死的，恍然大悟的感觉，拨开雨雾见月明；&lt;/p&gt;
&lt;p&gt;涵盖了可能导致各种软件错误的案例，包括数据竞争、泄漏、逻辑错误和其他缺陷。虽然准确的测试应该是尽早发现此类错误的一种方式，但有时可能会因为时间限制或复杂性等不同因素而错过案例。因此，使用Golang开发，确保避免常见错误至关重要。&lt;/p&gt;
&lt;p&gt;有些坑可能曾经踩过，通过这些mistakes产生共鸣，加深印象，同时可以继续追加一些新的坑来填充,比如系统性能调优，包括IO,  网络，数据编解码压缩，分布式系统，业务系统组织架构，逐步学习实践试错过程。学习笔记开个头。&lt;/p&gt;
&lt;p&gt;代码地址：&lt;a href=&#34;https://github.com/teivah/100-go-mistakes&#34;&gt;https://github.com/teivah/100-go-mistakes&lt;/a&gt; ; 可以直接查看里面的示例，进行CR，如果知道坑的缘由，说明已经避坑了 :）&lt;/p&gt;
&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;
&lt;h3 id=&#34;1变量隐藏&#34;&gt;1.变量隐藏&lt;/h3&gt;
&lt;p&gt;需要理解golang中变量的作用域，在块中声明的变量名可以在内部块中重新声明(:=)；常见于err变量名的重用的情况，需要考虑是否需要重新命名；使用 vet lint工具进行检测&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow
go vet --vettool&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;which shadow&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;go file&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2不必要的嵌套代码工程规范&#34;&gt;2.不必要的嵌套代码（工程规范）&lt;/h3&gt;
&lt;p&gt;这个就是代码风格问题了，google code style里，或者代码质量中经常会提到的，和编程语言无关联，尽量保持在一层嵌套(happy path)，经常出现的判断前置；&lt;/p&gt;
&lt;h3 id=&#34;3滥用初始化函数&#34;&gt;3.滥用初始化函数&lt;/h3&gt;
&lt;p&gt;init 函数是golang规定package初始化函数，不能直接显示调用， 而且调用顺序按照包名字母顺序依次调用执行，即使未使用(_), 也会调用包的init方法；还可以在包中声明多个init函数依次执行； 所以对于初始化依赖资源服务，需要单测的场景，不能使用包中的init函数，而是使用自定义的初始化函数，并且可以返回具体初始化实例，可用于依赖注入，工程化经常会使用； 但是仅仅是简单的初始化，静态的罗列，彼此没有关联， 可以用init初始化， 比如 net/http/pprof包直接在init中初始化了路由注册的服务接口函数句柄；&lt;/p&gt;
&lt;h3 id=&#34;4过度使用-getter-和-setter工程规范&#34;&gt;4.过度使用 getter 和 setter（工程规范）&lt;/h3&gt;
&lt;p&gt;这个在面向对象语言c++/java中经常会出现的情况，将私有成员封装成方法调用，隐藏内部一些逻辑细节； golang不会强制约束这样做，比如time.Timer结构 成员C 是公开的，相对比较自由；另外如果使用getter封装私有成员的函数名，不需要Get前缀，这个仅仅是 统一的代码风格问题，遵循业界标准Google Style就行；&lt;/p&gt;
&lt;h3 id=&#34;5interface-污染&#34;&gt;5.interface 污染&lt;/h3&gt;
&lt;p&gt;设计抽象接口函数的粒度，记住Go 中的一个著名谚语 ( &lt;a href=&#34;https://www.youtube.com/watch?v=PAAkCSZUG1c&amp;amp;t=318s&#34;&gt;https://www.youtube.com/watch?v=PAAkCSZUG1c&amp;amp;t=318s&lt;/a&gt; )&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The bigger the interface, the weaker the abstraction.&lt;/p&gt;
&lt;p&gt;—Rob Pike&lt;/p&gt;
&lt;p&gt;As Einstein said, “Everything should be made as simple as possible, but no simpler.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接口可以进行组合使用，尽量保持单一原则吧~ golang的设计深受UNIX哲学的影响( &lt;a href=&#34;https://web.archive.org/web/20100724002941/http://herpolhode.com/rob/&#34;&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;Rob Pike&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;&lt;/a&gt; 是贝尔实验室unix小组成员）；&lt;/p&gt;
&lt;p&gt;接口抽象可以和实现解耦，进行依赖反转，代码不依赖具体实现，新增或者更改方法不影响整体抽象流程结构，也方便整体mock测试，Liskov 替换原则（ Robert C. Martin 的 SOLID 设计原则中的L)，在使用golang实现DDD业务领域模型中经常会使用到；&lt;/p&gt;
&lt;p&gt;接口限制，比如一个配置结构体只需要读配置内容， 则这个结构体只需要一个只读接口成员，限制结构体的接口行为，以便这个结构体可以以组合方式加入新的接口行为&lt;/p&gt;
&lt;p&gt;对于不需要抽象的场景，则不应该使用interface来抽闲一层，直接调用对应实现函数即可，无需过度依赖接口设计，在代码中创建抽象时应该谨慎——抽象应该被发现，而不是创建。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t design with interfaces, discover them.&lt;/p&gt;
&lt;p&gt;—Rob Pike&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;6生产者侧-interface&#34;&gt;6.生产者侧 interface&lt;/h3&gt;
&lt;p&gt;就是提供给外部使用的包中没有抽象时，不应该过度设计接口，在接口中定义过多方法，这些方法在消费接口端使用时不会用到这些过多的方法，存在过度的接口设计；golang允许在包外消费侧来定义接口，如果在生产侧定义接口，抽象应该是被发现是通用的，而且接口中方法粒度尽可能的小，方便消费侧使用方组合；&lt;/p&gt;
&lt;h3 id=&#34;7返回-interface&#34;&gt;7.返回 interface&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Be conservative in what you do, be liberal in what you accept from others.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;—Transmission Control Protocol&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实还是接口抽象时的原则： 抽象应该被发现，而不是创建。总之，在大多数情况下，不应该返回接口，而是返回具体的实现。否则，由于包依赖性，它会使设计更加复杂，并且会限制灵活性，因为所有使用端都必须依赖相同的抽象。同样，结论与前面的部分类似：如果知道（不是预见）抽象对使用端有帮助，可以考虑返回一个接口。否则，不应该强制抽象；他们应该被使用端发现。如果使用端出于某种原因需要抽象实现，它仍然可以在使用端执行此操作。&lt;/p&gt;
&lt;h3 id=&#34;8anyinterface-says-nothing&#34;&gt;8.any(interface{}) says nothing&lt;/h3&gt;
&lt;p&gt;在 Go 中，指定零个方法的接口类型称为空接口，interface{}. 在 Go 1.18 中，预先声明的类型any成为空接口的别名；因此，所有interface{}出现的地方都可以替换为any。在许多情况下，any可以被认为是过度概括；正如 Rob Pike 所提到的，它没有传达任何信息（&lt;a href=&#34;https://www.youtube.com/watch?v=PAAkCSZUG1c&amp;amp;t=7m36s&#34;&gt;https://www.youtube.com/watch?v=PAAkCSZUG1c&amp;amp;t=7m36s&lt;/a&gt; ）;&lt;/p&gt;
&lt;p&gt;any(interface{})如果确实需要接受或返回任何可能的类型（例如，当涉及到marshaling or formatting时），它会很有帮助。一般来说，应该不惜一切代价避免过度概括编写的代码。如果能提高其他方面（例如代码表达能力），也许一点点重复代码偶尔会更好。&lt;/p&gt;
&lt;h3 id=&#34;9对何时使用泛型感到困惑&#34;&gt;9.对何时使用泛型感到困惑&lt;/h3&gt;
&lt;p&gt;尽管泛型在特定情况下会有所帮助，但是应该谨慎选择何时使用它们以及何时不使用它们。一般来说，如果要回答何时不使用泛型，可以找到与何时不使用接口的相似之处。事实上，泛型引入了一种抽象形式，必须记住，不必要的抽象会带来复杂性。&lt;/p&gt;
&lt;p&gt;同样，不要用不必要的抽象污染代码，专注于解决具体问题。这意味着不应该过早地使用类型参数。等到即将编写样板代码时再考虑使用泛型。而且泛型现在还存在一些性能上的问题，可以参考： &lt;a href=&#34;https://planetscale.com/blog/generics-can-make-your-go-code-slower&#34;&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;Generics can make your Go code slower&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;10没有意识到类型嵌入可能存在的问题&#34;&gt;10.没有意识到类型嵌入可能存在的问题&lt;/h3&gt;
&lt;p&gt;想要封装在结构中并使外部客户端不可见的东西，在这种情况下不应该将其设为嵌入字段；&lt;/p&gt;
&lt;p&gt;如果决定使用类型嵌入，需要牢记两个主要约束：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它不应该单独用作一些语法糖来简化对字段的访问（例如Foo.Baz()代替Foo.Bar.Baz()）。如果这是唯一的理由，就不要嵌入内部类型，而是使用字段。&lt;/li&gt;
&lt;li&gt;它不应该提升想要从外部隐藏的数据（字段）或行为（方法）：例如，如果它允许客户端访问应该对结构保持私有的锁定行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如对一个开源的日志库进行二次封装，可以直接嵌入至结构体中，使用对应日志库结构体中的公有方法。&lt;/p&gt;
&lt;h3 id=&#34;11不使用功能选项模式工程规范&#34;&gt;11.不使用功能选项模式（工程规范）&lt;/h3&gt;
&lt;p&gt;GO中不像python有默认参数，通过参数可变配置来new一个对象；如果GO实现，可变配置可以通过… Option方式配置，配置项通过With* 设置返回闭包函数操作， 在初始化对象时传入With** 方法对配置项进行设置，参数个数可选，未设置则使用默认配置项；这个方式经常用于程序启动时通过加载配置进行初始化操作。&lt;/p&gt;
&lt;h3 id=&#34;12项目组织不当工程规范&#34;&gt;12.项目组织不当（工程规范）&lt;/h3&gt;
&lt;p&gt;GO官方没有提供标准的项目组织结构，一般情况使用GitHub golang-standards 组织下的项目布局（&lt;a href=&#34;https://github.com/golang-standards/project-layout&#34;&gt;https://github.com/golang-standards/project-layout&lt;/a&gt;），但是这个不是绝对的，因项目而异稍有不同；主要是项目中的层级不能嵌套太深，而且重要的一点是不能出现循环嵌套引用包； 不要过早封包，抽象一层时，尽量上层依赖下层子目录，子目录高度内聚， 业务逻辑层依赖公共层；如果不确定是否导出一个元素，应该默认不导出它；后面发现需要导出，可以调整代码。对于大型项目，有多个子模块，可以使用workspace进行管理；&lt;/p&gt;
&lt;p&gt;Tips: 如果使用DDD &lt;a href=&#34;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;clean-architecture&lt;/a&gt; 架构思想开发业务，可以使用 &lt;a href=&#34;https://github.com/bxcodec/go-clean-arch&#34;&gt;go-clean-arch&lt;/a&gt; 这个项目结构。&lt;/p&gt;
&lt;h3 id=&#34;13创建实用程序包工程规范&#34;&gt;13.创建实用程序包（工程规范）&lt;/h3&gt;
&lt;p&gt;包命名，应该是包对应功能，而不是通用意义上的名称比如utils、common或base，这些可以作为具体包的归档。类似net包中的组织形式&lt;/p&gt;
&lt;h3 id=&#34;14忽略包名称冲突工程规范&#34;&gt;14.忽略包名称冲突（工程规范）&lt;/h3&gt;
&lt;p&gt;变量名与包名冲突，应该避免，这个staticcheck 工具就可以直接检测出来提示; 可以使用包别名；&lt;/p&gt;
&lt;h3 id=&#34;15缺少代码文档工程规范&#34;&gt;15.缺少代码文档（工程规范）&lt;/h3&gt;
&lt;p&gt;这个属于代码工程规范问题了，对于开放出去的包，需要提供代码文档，表明其目的和内容，方便使用者查看文档，其实这个因人而异了，最好结合源码和用例来理解，有时候代码更新，文档却未更新，在代码中经常可以看到(各种pr修改)。 最好类似rust那样，在文档中加入一些测试用例；对于后续不维护的方法，可以通过// Deprecated:这种方式使用注释弃用导出的元素， 这个不同的开发语言都有类似功能；&lt;/p&gt;
&lt;h3 id=&#34;16不使用-linters&#34;&gt;16.不使用 linters&lt;/h3&gt;
&lt;p&gt;应该使用Go提供的检测工具来写出统一质量高的代码，Linters 类工具和格式化程序是提高代码库质量和一致性的有效方法。花时间了解这些工具，并确保自动执行它们（例如 CI 或 Git 预提交挂钩，比如开源项目中在经常使用staticcheck 和 golangci-lint 进行分析,&lt;code&gt;golangci-lint run --out-format=github-actions --path-prefix=. -E gofumpt&lt;/code&gt;）；学会使用工具分析代码质量问题；&lt;/p&gt;
&lt;h2 id=&#34;概括&#34;&gt;概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;避免隐藏变量有助于防止错误，例如引用错误的变量或混淆读者。&lt;/li&gt;
&lt;li&gt;避免嵌套级别并保持快乐路径在左侧对齐，可以更轻松地构建心智代码模型。&lt;/li&gt;
&lt;li&gt;初始化变量时，请记住 init 函数具有有限的错误处理，并使状态处理和测试更加复杂。在大多数情况下，初始化应作为特定函数处理。&lt;/li&gt;
&lt;li&gt;强制使用 getter 和 setter 在 Go 中不是惯用的。务实并在效率和盲目遵循某些成语之间找到正确的平衡应该是要走的路。&lt;/li&gt;
&lt;li&gt;抽象应该被发现，而不是被创造。为避免不必要的复杂性，请在需要时创建接口，而不是在预见需要时创建接口，或者至少可以证明抽象是有效的。&lt;/li&gt;
&lt;li&gt;将接口保留在客户端可以避免不必要的抽象。&lt;/li&gt;
&lt;li&gt;为了防止在灵活性方面受到限制，函数在大多数情况下不应返回接口，而应返回具体实现。相反，函数应该尽可能接受接口。&lt;/li&gt;
&lt;li&gt;仅any在需要接受或返回任何可能的类型时使用，例如 json. Marshal. 否则，any不会提供有意义的信息，并可能通过允许调用者调用具有任何数据类型的方法而导致编译时问题。&lt;/li&gt;
&lt;li&gt;依赖泛型和类型参数可以防止编写样板代码来分解元素或行为。但是，不要过早地使用类型参数，只有当你看到对它们的具体需求时才使用。否则，它们会引入不必要的抽象和复杂性。&lt;/li&gt;
&lt;li&gt;使用类型嵌入也有助于避免样板代码；但是，请确保这样做不会导致某些字段本应隐藏的可见性问题。&lt;/li&gt;
&lt;li&gt;要以 API 友好的方式方便地处理选项，请使用功能选项模式。&lt;/li&gt;
&lt;li&gt;遵循诸如 project-layout 之类的布局可能是开始构建 Go 项目的好方法，尤其是当正在寻找现有约定来标准化新项目时。&lt;/li&gt;
&lt;li&gt;命名是应用程序设计的关键部分。创建诸如common、util和 之类的包shared不会为读者带来太多价值。将此类包重构为有意义且特定的包名称。&lt;/li&gt;
&lt;li&gt;为避免变量和包之间的命名冲突，从而导致混淆甚至错误，请为每个变量使用唯一的名称。如果这不可行，请使用导入别名来更改限定符以区分包名称和变量名称，或者考虑一个更好的名称。&lt;/li&gt;
&lt;li&gt;为了帮助客户和维护者理解的代码的用途，记录导出的元素。&lt;/li&gt;
&lt;li&gt;要提高代码质量和一致性，请使用 linters 和格式化程序。&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>设计-直播间赠送礼物功能</title>
      <link>https://weedge.github.io/post/zb-gift/</link>
      <pubDate>Mon, 21 Nov 2022 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/zb-gift/</guid>
      
        <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;直播线上互动，已成为当下生活的一部分，特别是受疫情影响，成为互联网的主要流量入口；研究了下各个平台直播间送礼物的功能，发现大同小异，在礼物分组，一些定制化的礼物有区分，整体交互流程大致相同，主要是直播间主播上播，用户通过礼物打赏给主播们(一个直播间可能有多名主播在互动)，礼物是通过虚拟币(**币) 换算，早期互联网用户线上互动礼物，玩家最多的应该是QQ币了，只不过以前的打赏赠送场景是在web2.0刚开始的时候，交互的大多是文字和图片，相关产品场景，虚拟空间(个人空间，博客，种菜等娱乐互动场景)；随着底层网络基建的发展，4G之后出现了大量的视频网站，用户可以录一些视频内容来互动；到后来音视频流媒体的发展，相关的在线直播间开始涌现，用户之间享受一波直播红利带来的互动，当然影响相对于前面的形式更加实时和直接；现在的5G和未来6G，以及物联网都会给直播形式带来新的互动场景,比如：虚拟会场，人机互动；其中早期培养起来的打赏送礼行为功能经常用于有主播的娱乐互动直播中，也是增值盈利的一部分；&lt;/p&gt;
&lt;p&gt;tips: 除了送礼功能，根据不同直播场景，还有语音视频连麦，电商带货商品，没有主播，节目直播/转播，会议直播，自习室，基本的点赞，计数，聊天基础服务功能；还有些抽奖功能，答题功能(教育类直播居多)，投票，红包这些功能服务可在开播时设置，是否启用；有用户基础的流量平台可能还会以竞价排名的方式推荐一波；这些功能可以作为一个可管理的插件，通过组合的方式应用于直播中，方便管理，后续可以添加新功能满足某类型直播场景。&lt;/p&gt;
&lt;h2 id=&#34;需求设计&#34;&gt;需求设计&lt;/h2&gt;
&lt;p&gt;设计一个简单礼物打赏功能: A用户(观众)赠送礼物给B用户(主播)，可以给多个主播赠送礼物；&lt;/p&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;礼物：直播平台通过虚拟币来统一等价交换的虚拟物品，而虚拟币是需要通过用户充值购买；发送礼物可以获得一些积分；&lt;/p&gt;
&lt;p&gt;A用户发送礼物给B用户，A的虚拟币扣除，B的虚拟币相应增加；需要保证赠送和收到的数量一致；&lt;/p&gt;
&lt;p&gt;需要考虑并发场景，对于热门主播高峰期的流量值100w观众用户在线互动，每秒送礼的请求数量也可能高于这个值，用户可能连击送出多次(连击行为客户端可以缓冲一次发送给后端)， 而且为了保证数据一致和吞吐，尽量减少锁的使用，或者说采用&lt;a href=&#34;https://en.wikipedia.org/wiki/Optimistic_concurrency_control&#34;&gt;OCC&lt;/a&gt;，乐观锁的方式来处理事务，交由业务服务程序来处理，尽量减少或减短数据库中心存储服务上的锁操作，原理就是：夯主后，就呆萌了，资源未释放，请求资源一增多，导致整个服务吞吐下降，一直持续下去随时都会down掉，而且锁是建立在索引数据之上的， 如果没有相关降级处理，弄不好整体服务就&lt;a href=&#34;https://www.youtube.com/watch?v=4m48GqaOz90&#34;&gt;galigeigei&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;100W 观众A向同一个主播B 赠送礼物，对于主播B的虚拟币累计写操作比较大，同一时间可能100W+的w 操作 主播B 虚拟币这条记录，如果直接同步操作在数据库层面会出现行锁，会等待夯主整个赠送流程，所以需要把这些集中写，通过消息队列异步去更新虚拟币数目，进而提高观众送礼接口的吞吐量，&lt;/p&gt;
&lt;p&gt;观众虽然操作自己的虚拟币数目行记录，但是直接操作数据库，即使对用户资产表进行分库分表操作，也会有大量的磁盘i/o，所以直播间的互动数据直接在缓存中操作，把观众的操作记录消息队列的方式异步落库；&lt;/p&gt;
&lt;p&gt;缓存的方式操作，需要把观众的用户资产信息前置预热至缓存中，直播中直接操作缓存， 操作缓存需要保证并发操作事务的原子性，保证观众的虚拟币不能多扣或者少扣；&lt;/p&gt;
&lt;p&gt;并发场景下，为了减少大量用户冲击底层数据库，减少磁盘io, 送礼物这些互动直接读写用户缓存数据，这些缓存数据的操作类型分为是/否更新频繁；&lt;/p&gt;
&lt;p&gt;更新不频繁数据：用户，直播间，物料详情等信息，这些缓存数据在进入直播间的时候直接从数据库以cacheAside pattern获取填充，填充的时候采用singleflight方式；物料信息还可以服务本地缓存一份；变更数据时，远端缓存数据可以通过CDC订阅数据库操作日志(比如：binlog)来主动异步更新缓存数据，或者使用延时双删来被动更新，本地缓存可根据通过控制平面配置下发来触发从远端缓存更新数据；&lt;/p&gt;
&lt;p&gt;更新频繁数据： 这个主要发生在用户直播互动，赠送礼物场景，多次并发操作，变更的实体数据 观众/主播虚拟资产扣除/增加，这些数据以writeThrough/Behind parttern方式直接更新缓存，队列异步落库；因为直播场景用户的数据都在缓存中，数据实时更新查看，不影响用户体验；直播监控后台从数据库里订阅近实时查看用户的虚拟资产，会有一个批量窗口的处理延迟；&lt;/p&gt;
&lt;p&gt;缓存数据初始化，可以在用户刚打开app的时候初始化，也可以在进入/创建好直播间的时候初始化好用户直播间缓存数据；&lt;/p&gt;
&lt;p&gt;以上可以将操作分2个关键步骤： 观众赠送礼物和异步更新观众和主播的资产信息；通过消息队列来解耦，提高送礼接口吞吐和请求响应延迟，以及以pull方式消费，缓解数据库实例的读写压力；&lt;/p&gt;
&lt;p&gt;观众赠送礼物： 礼物是通过虚拟货币进行等价交换的，通过礼物id获取到对应消费的虚拟资产，对中心远端缓存分片中的观众虚拟资产进行事务扣除处理，事务提交之后，发送事务消息；这里采用cas方式处理，一种是watch key(string 读写io是O(1), 不用hash是因为读取全部资产信息io是O(n))+事务方式，一种是lua的形式直接写业务提交脚本给redis核心主线程去处理；这里可能会想到直接用 hash incr原子操作，但是这里不行，因为需要读出key对应的虚拟资产，用于判断虚拟资源是否充足，读出来在扣除写入，需要一起执行，保证事务原子性；除了核心流程，还有发送礼物成功后，需要推送消息到直播间，根据产品礼品策略判断是否展示特效; 以及增加用户活动积分，增加互动积极性；&lt;/p&gt;
&lt;p&gt;异步更新观众和主播数据库落地资产信息：为了减少对数据库的行锁的并发压力，可采用CAS的方式来更新数据库的数据，前提是单个用户资产操作，如果想单个事务单个事务处理，可以通过消息队列事务消息方式串起来(pipeline)；如果是多个用户资产操作在同一服务事物里操作的话，则不能使用CAS的方式处理了，只能以整体事务方式处理(默认RR级别)；&lt;/p&gt;
&lt;p&gt;消息队列：涉及到金钱，为了提高吞吐，需要保证数据准确，数据最终一致(&lt;a href=&#34;https://www.allthingsdistributed.com/2008/12/eventually_consistent.html&#34;&gt;&lt;strong&gt;BASE&lt;/strong&gt;&lt;/a&gt;)，采用支持事务消息的分布式消息队列，比如：&lt;a href=&#34;https://rocketmq.apache.org/zh/docs/featureBehavior/04transactionmessage/&#34;&gt;rocketMQ&lt;strong&gt;事务消息&lt;/strong&gt;&lt;/a&gt;，这里可能有个疑问如果刚开始发送事务消息就失败了，可能是网络抖动,或者服务负载高等原因，一般是启用failover权重&lt;a href=&#34;https://en.wikipedia.org/wiki/Exponential_backoff&#34;&gt;指数退避&lt;/a&gt;策略重试到不同机房的rocketMQ集群，可以查看&lt;a href=&#34;https://rocketmq.apache.org/zh/docs/featureBehavior/05sendretrypolicy#%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6&#34;&gt;消息发送重试机制&lt;/a&gt; 和 &lt;a href=&#34;https://rocketmq.apache.org/zh/docs/bestPractice/15bestpractice&#34;&gt;最佳实践&lt;/a&gt;, &lt;a href=&#34;https://aws.amazon.com/cn/builders-library/timeouts-retries-and-backoff-with-jitter/&#34;&gt;timeouts-retries-and-backoff-with-jitter&lt;/a&gt;；如果重试还是失败打印错误日志记录发送详情，通过实时数据流将异常行为写入db中，以便后续补发；&lt;/p&gt;
&lt;p&gt;Tips: 如果使用阿里云rocketMQ, 需要注意支持版本提供的SDK，5.0 版本 &lt;a href=&#34;https://github.com/apache/rocketmq-clients&#34;&gt;client SDK&lt;/a&gt; ; 4.0相关版本有些开发语言不支持tcp方式，仅提供http的方式(会少了一些功能，比如批量发送普通消息)；选用新版的5.0版本的SDK开发(golang版client SDK可以用来生产消息，对应消息类型都已支持); 如果有自建运维能力，直接使用开源方案来搭建一套，比如用&lt;a href=&#34;https://www.amazonaws.cn/solutions/apache-rocketmq-on-aws/&#34;&gt;rocketMQ on aws&lt;/a&gt;，然后可以基于OTEL的metric标准采集到Promethues中，通过Grafana加上监控报警(监控系统也可以自建，或者用云服务比如aliyun ARMS，同样分布式db/cache也有相应监控解决方案,数据指标采集上报以pull方式居多,相对于业务服务常见以push方式)；并且使用5.0可以实现一层mq-proxy(本地代理和中心代理)，计算存储分离;&lt;/p&gt;
&lt;p&gt;题外话: 现在分布式消息队列&lt;a href=&#34;https://kafka.apache.org/33/documentation/streams/architecture&#34;&gt;kafka-streams&lt;/a&gt;, &lt;a href=&#34;https://github.com/apache/rocketmq-streams&#34;&gt;rocketmq-streams&lt;/a&gt; 支持数据流(stream)处理大数据实时场景，支持一些简单算子操作和SQL(&lt;a href=&#34;https://github.com/confluentinc/ksql&#34;&gt;ksql&lt;/a&gt;, &lt;a href=&#34;https://github.com/alibaba/rsqldb&#34;&gt;rsql&lt;/a&gt;)；这个和flink对应功能是重合了，flink也在往table store上发力满足数据堆积的能力; 一波流～&lt;/p&gt;
&lt;h3 id=&#34;调研&#34;&gt;调研&lt;/h3&gt;
&lt;p&gt;以pc端抓http包为例，手机端接口一样，传输格式可能不同，pb/json&lt;/p&gt;
&lt;h4 id=&#34;抖音接口&#34;&gt;抖音接口&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://live.douyin.com/webcast/gift/send/?aid=6383&amp;amp;live_id=1&amp;amp;device_platform=web&amp;amp;language=zh-CN&amp;amp;enter_from=web_live&amp;amp;cookie_enabled=true&amp;amp;screen_width=2048&amp;amp;screen_height=1152&amp;amp;browser_language=zh-CN&amp;amp;browser_platform=MacIntel&amp;amp;browser_name=Chrome&amp;amp;browser_version=107.0.0.0&amp;amp;browser_online=true&amp;amp;engine_name=Blink&amp;amp;engine_version=107.0.0.0&amp;amp;os_name=Mac+OS&amp;amp;os_version=10.15.7&amp;amp;cpu_core_num=8&amp;amp;device_memory=8&amp;amp;platform=PC&amp;amp;downlink=10&amp;amp;effective_type=4g&amp;amp;round_trip_time=50&amp;amp;channel=channel_pc_web&amp;amp;app_name=douyin_web&amp;amp;webid=7167235205950047744&amp;amp;user_agent=Mozilla%2F5.0+(Macintosh%3B+Intel+Mac+OS+X+10_15_7)+AppleWebKit%2F537.36+(KHTML,+like+Gecko)+Chrome%2F107.0.0.0+Safari%2F537.36&amp;amp;fp=verify_lam4f5i1_plZJSYeB_iUgU_4z2o_9JHF_d7Z0Z60sLg33&amp;amp;did=0&amp;amp;referer=https:%2F%2Flive.douyin.com%2F444452144000%3Fcover_type%3D0%26enter_from_merge%3Dweb_live%26enter_method%3Dweb_card%26game_name%3D%26is_recommend%3D1%26live_type%3Dgame%26more_detail%3D%26request_id%3D2022111814283801020916816201004237%26room_id%3D7167220081737468683%26stream_type%3Dvertical%26title_type%3D1%26web_live_page%3Dhot_live%26web_live_tab%3Dall&amp;amp;target=&amp;amp;device_id=7167235205950047744&amp;amp;msToken=aOEoMNHAEI98H45Z0n-zUTffiNgv7HNkGU0lwFptk-JBg00tEs0I74G4sYXgG670cAdhSmXNcKlRU3-QaxW7Pflt-p8YAmyU5eC3EGJQfp7Mk7JpmP_P&amp;amp;X-Bogus=DFSzswVL0qCmAcoQS8MuBN7TlqS8&amp;amp;_signature=_02B4Z6wo00001Heu8JQAAIDD43irmgubdKx3rvQAAH6ktTtRdH7gtQJWp3SjldUkeBB51lpkXUQ700UnFEXODUicQ0r1ccxSxq4OwWIjvxuNe8Acl-gJzChe99W43SojHkPp9aa82Qzi9VoTd2&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;authority: live.douyin.com&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;accept: application/json, text/plain, */*&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;accept-language: zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;content-type: application/x-www-form-urlencoded&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;cookie: xgplayer_user_id=502915240928; csrf_session_id=f5161482adac52884f25a91fa758d7b0; ttcid=5cd5ff73751f4ab39911c85e57f9ca7479; passport_csrf_token=46e48d1e7b4df245f8caab8a34b64935; passport_csrf_token_default=46e48d1e7b4df245f8caab8a34b64935; home_can_add_dy_2_desktop=%220%22; n_mh=Qo43cptpX41bfwDmWyVyRUGMZnsucxhgcWJqKjjWkvI; sso_uid_tt=a84f8e3ae1f0c8301f5a882b05abe3f0; sso_uid_tt_ss=a84f8e3ae1f0c8301f5a882b05abe3f0; toutiao_sso_user=a28a6e92e7dc7d690b4f6b9a59077692; toutiao_sso_user_ss=a28a6e92e7dc7d690b4f6b9a59077692; passport_assist_user=Cjyr0IY04IJK-7Hxgl87vzPKZIfpFS29oAG2arITfMftUANM_d6SDxwAksiJEuVqZgZdE_BYyvcjLLGAQaYaSAo8zVwGiPnNM3S7eRNlXwMkuS7yNVm17pbNfKqXsXj3Rgk9Nm08DWh_PY0JRbH8FQeLxabRAoqM4bPJTzQ8EM_DoQ0Yia_WVCIBAxToQPk%3D; sid_ucp_sso_v1=1.0.0-KGIxM2FlNmE2MDdiNWE5MDA1YmIwZjg5OWVkNTUxMTBhMzdhYWE2OTIKHQjhrMGYrgIQt8vcmwYY7zEgDDDHuNHRBTgGQPQHGgJobCIgYTI4YTZlOTJlN2RjN2Q2OTBiNGY2YjlhNTkwNzc2OTI; ssid_ucp_sso_v1=1.0.0-KGIxM2FlNmE2MDdiNWE5MDA1YmIwZjg5OWVkNTUxMTBhMzdhYWE2OTIKHQjhrMGYrgIQt8vcmwYY7zEgDDDHuNHRBTgGQPQHGgJobCIgYTI4YTZlOTJlN2RjN2Q2OTBiNGY2YjlhNTkwNzc2OTI; passport_auth_status=ba24f5319c0f02c6232d484fd51c2187%2C; passport_auth_status_ss=ba24f5319c0f02c6232d484fd51c2187%2C; sid_guard=ea2e466c926c317f4f552f0d3982a458%7C1668752823%7C5184000%7CTue%2C+17-Jan-2023+06%3A27%3A03+GMT; uid_tt=23c596f546d448da13c0098152ef5d17; uid_tt_ss=23c596f546d448da13c0098152ef5d17; sid_tt=ea2e466c926c317f4f552f0d3982a458; sessionid=ea2e466c926c317f4f552f0d3982a458; sessionid_ss=ea2e466c926c317f4f552f0d3982a458; sid_ucp_v1=1.0.0-KDRiMzcyMDVkZmZhMWIxNjhjNDM4YjBiZDA4Y2E5ZTBmN2IxNTE1NjIKFwjhrMGYrgIQt8vcmwYY7zEgDDgGQPQHGgJsZiIgZWEyZTQ2NmM5MjZjMzE3ZjRmNTUyZjBkMzk4MmE0NTg; ssid_ucp_v1=1.0.0-KDRiMzcyMDVkZmZhMWIxNjhjNDM4YjBiZDA4Y2E5ZTBmN2IxNTE1NjIKFwjhrMGYrgIQt8vcmwYY7zEgDDgGQPQHGgJsZiIgZWEyZTQ2NmM5MjZjMzE3ZjRmNTUyZjBkMzk4MmE0NTg; FOLLOW_NUMBER_YELLOW_POINT_INFO=%22MS4wLjABAAAAt_v5oVMmcxuNnLLRzi6Ey1GKVQr_2XVFt2jPbkhZPI8%2F1668787200000%2F0%2F1668752826051%2F0%22; strategyABtestKey=%221668752909.101%22; __ac_nonce=06377261b0070042789c9; __ac_signature=_02B4Z6wo00f01JfP74gAAIDDAxm0hJMbmiiX7-sAAEaJTk9YXvYiEKlcYbhZnUTqyIVISJ6Z9uR3UEye00i7MfEP1dAywrmbnaQAIP3m1.7zOA8BmpqIWhyYJal-u6k6LMxVpsCtyakYsz3325; live_can_add_dy_2_desktop=%221%22; tt_scid=PpJHVbeNWnhY54EQ6vWraqXl5A8SZDtl3dn9JTaQQNLPo37ztPaJz.xoJHxyhNYScf8e; s_v_web_id=verify_lam4f5i1_plZJSYeB_iUgU_4z2o_9JHF_d7Z0Z60sLg33; ttwid=1%7C-XDacSDIgDIHmJqBxLj6Op91O91Ww4nvf96AveJpNeE%7C1668752951%7C0275ac24a410dd06b5f87dc4d84188f6eedaf20ed69cc9d0e979559df7df461e; download_guide=%223%2F20221118%22; odin_tt=3a02e4ad7a6c9042e1c42ece6d0d4a1aeeb37ed334f3450eb4adf57a6d0e09938523f8954816d90d557b27f5d3cbea85; msToken=1GTirdFSckP7H_txAPOKIMLWleKhlwccm-ts_3OviXegeQ2cr0B56jMAqfB3SqEGnxPEBjXRWsmg-sxVW3okb1s-acOAnBkIVDA_47g5aZFOqMKEzI-N; msToken=aOEoMNHAEI98H45Z0n-zUTffiNgv7HNkGU0lwFptk-JBg00tEs0I74G4sYXgG670cAdhSmXNcKlRU3-QaxW7Pflt-p8YAmyU5eC3EGJQfp7Mk7JpmP_P&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;origin: https://live.douyin.com&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;referer: https://live.douyin.com/444452144000&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;sec-ch-ua: &amp;#34;Google Chrome&amp;#34;;v=&amp;#34;107&amp;#34;, &amp;#34;Chromium&amp;#34;;v=&amp;#34;107&amp;#34;, &amp;#34;Not=A?Brand&amp;#34;;v=&amp;#34;24&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;sec-ch-ua-mobile: ?0&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;sec-ch-ua-platform: &amp;#34;macOS&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;sec-fetch-dest: empty&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;sec-fetch-mode: cors&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;sec-fetch-site: same-origin&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;x-secsdk-csrf-token: 000100000001c39118162052c6b50f6dadb067cc07c073c9b93f035ea22242c67c43f5951903172899f1bc355042&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --data-raw &lt;span class=&#34;s1&#34;&gt;&amp;#39;room_id=7167220081737468683&amp;amp;to_room_id=7167220081737468683&amp;amp;sec_to_user_id=MS4wLjABAAAAOgGR5D9qmmPglgaT08-30j8vnjeeAdmgXhJY_8Q7oLk&amp;amp;to_episode_id=0&amp;amp;send_type=4&amp;amp;send_scene=1&amp;amp;gift_source=0&amp;amp;buff_level=0&amp;amp;count=1&amp;amp;price=2&amp;amp;gift_id=2002&amp;amp;is_first_combo=true&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --compressed -iv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;响应&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;nt&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Insufficient Fund&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;prompts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;余额不足&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
 &lt;span class=&#34;nt&#34;&gt;&amp;#34;extra&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;now&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1668755929438&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
 &lt;span class=&#34;nt&#34;&gt;&amp;#34;status_code&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;40001&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;快手接口&#34;&gt;快手接口&lt;/h4&gt;
&lt;p&gt;请求&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://live.kuaishou.com/live_graphql&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Connection: keep-alive&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Cookie: clientid=3; did=web_0d47b6546f1fd39fe4d1236703ae2b16; kuaishou.live.bfb1s=9b8f70844293bed778aade6e0a8f9942; client_key=65890b29; kpn=GAME_ZONE; userId=553458447; kuaishou.live.web_st=ChRrdWFpc2hvdS5saXZlLndlYi5zdBKgAV6EW8_dkcqveTyN6yy6uaMZd7O2c9rYOi19Fb3FhhOTPjtHtkb7lPQxQ4QaygTV0J-_Z0E7-4E5lFUZ2MRRzwjNAgbEEeSbf5duEVRtpGJnR_EEjJeZ3yyPMWPsJelIVcpSHGX02esKljXrWSXcbMWU709r4hxtaNHdMQtnvmLt1nijHxRE7lio0ZRYM5n-EK65VJq2EUpFqHFY_jFqxm0aEhrHsWfESUHgv806qk-5eqStgCIgOVwse70J74NPwA2TbGfOv-Ze0M-TVQJ0kHcHOHiTkKooBTAB; kuaishou.live.web_ph=75bafd83e69f9caf80b760c47f7b9c976d31; userId=553458447; ksliveShowClipTip=true&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Origin: https://live.kuaishou.com&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Referer: https://live.kuaishou.com/u/YiGe6666&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sec-Fetch-Dest: empty&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sec-Fetch-Mode: cors&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sec-Fetch-Site: same-origin&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;accept: */*&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;content-type: application/json&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;sec-ch-ua: &amp;#34;Google Chrome&amp;#34;;v=&amp;#34;107&amp;#34;, &amp;#34;Chromium&amp;#34;;v=&amp;#34;107&amp;#34;, &amp;#34;Not=A?Brand&amp;#34;;v=&amp;#34;24&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;sec-ch-ua-mobile: ?0&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;sec-ch-ua-platform: &amp;#34;macOS&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --data-raw &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;operationName&amp;#34;:&amp;#34;SendTokenGift&amp;#34;,&amp;#34;variables&amp;#34;:{&amp;#34;e&amp;#34;:&amp;#34;UJfUx05OooLVLeaLzurAD7t0ycf7qHV57YPA64hWOh5Nslk4cNv5GCO5UIhUfygGimZNaBMDaQF7CWigSoxuOG4KmX6PBg7Nw/BxK3lCQ/MeVM8H3VRD7RIv7A9H4Zt+z/43c25jpTuaQrjLpxrWXzNYORIKJRjga9ZUGPCbNwatxYFMuVGEJcn8SZxFdd2rr1HMsQV2HXhl1PcILcXZ5fcnu7+VARIIj26snB4TOiQ=&amp;#34;,&amp;#34;iv&amp;#34;:&amp;#34;yLelD2PBybOSK8LM&amp;#34;,&amp;#34;giftId&amp;#34;:114,&amp;#34;liveStreamId&amp;#34;:&amp;#34;sOuGkqrHrOs&amp;#34;,&amp;#34;count&amp;#34;:1,&amp;#34;comboKey&amp;#34;:&amp;#34;IZLFwC_9lDBi2YL6_1668754497884&amp;#34;,&amp;#34;giftToken&amp;#34;:&amp;#34;CkMQj7b0hwIaNIECAoICgwLHAgmLAowCjQIOENsBnAGfAt8B4AEhoQLhAakCKXFysgLyAfYBtwL3AfgB+QEgNCi36OokEIzc0szIMBqQARbIi9FshY8J3yb72Pi3Kf3b4VlRZ8dHHr2d64OWA545YQ6SBsTaqA6ERQ9DQbGDCXK3L5MoVtVL/wy4cLlD+XTMYIYjEYUU/0IwTbvhrTXWdll64SIP1APvRQXCjDugMBShDAqlMCBPqREhchX0t8tXHhYO2h+h6k3+kwe3yAdSioapP7i5NxtuLxCFTYPiVA==&amp;#34;},&amp;#34;query&amp;#34;:&amp;#34;mutation SendTokenGift($e: String, $iv: String, $giftId: Int, $liveStreamId: ID, $count: Int, $comboKey: String, $giftToken: String) {\n  sendTokenGift(e: $e, iv: $iv, giftId: $giftId, liveStreamId: $liveStreamId, count: $count, comboKey: $comboKey, giftToken: $giftToken) {\n    result\n    ksCoin\n    styleType\n    __typename\n  }\n}\n&amp;#34;}&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --compressed -iv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;响应&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;sendTokenGift&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;result&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;//成功&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;ksCoin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;styleType&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;__typename&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;SendGiftResult&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;快手给端上的接口使用的&lt;a href=&#34;https://spec.graphql.org/draft/&#34;&gt;graphql&lt;/a&gt;统一中心化了入口，方便后续规范化管理接口；整体交互也有些差别，一个是后置判断，一个是前置判断礼物是否可以赠送，但是对于赠送礼物接口还是需要判断是否满足赠送的金额；前置对于用户体验会好些，少了些交互吧; 接口数据都有token加密验证，防止三方黑产中途拦截，后者对整体赠送数据也是压缩加密了(用户行为打点数据也是压缩上报的)；&lt;/p&gt;
&lt;p&gt;Tips: 貌似礼物的价格在各个直播平台都一样的，不像商品价格有相对波动，只是会有些直播场景定制化的礼物，有种非理性情感冲动消费的感觉，搞直播类用户产品，社会心理学貌似挺重要的，老铁带一波节奏 666～&lt;/p&gt;
&lt;h3 id=&#34;设计&#34;&gt;设计&lt;/h3&gt;
&lt;h4 id=&#34;整体设计服务模块流程&#34;&gt;整体设计服务模块流程&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weedge/mypic/master/%E7%9B%B4%E6%92%AD%E4%BA%92%E5%8A%A8-%E8%B5%A0%E9%80%81%E7%A4%BC%E7%89%A9%E8%AE%BE%E8%AE%A1.drawio.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;db&#34;&gt;DB&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;gift 礼物表&lt;/strong&gt;：有限集，这个物料数目是固定的，没有SKU这一概念，可以直接定义好配置之后，直接存放在数据库中；便于后续缓存至远端或者服务本地；&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;giftId&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;UK  唯一键&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;礼物名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;currencyCn&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;价格：虚拟货币数目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unit&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;虚拟货币度量单位，对应资产类型：金币/钻石/X币&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;giftCategory&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;礼物类别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iconUrl&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;礼物icon地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sendRule&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;赠送规则&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;effectsUrl&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;礼物特效地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;createdAt&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;创建时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updatedAt&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;更新时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;user_asset 用户拥有的虚拟资产表&lt;/strong&gt;：  用户当前拥有的虚拟币余额， 建库建表按照userId进行hash 分库分表分区/分片(Region) (写更新热点) 数据量按中国总人口计算，一张物理表存放1000w数据&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;userId&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;用户id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assetCn&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;资产数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assetType&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;资产类型 1. 金币 2.钻石 3. X币 &lt;del&gt;4. X优惠卷&lt;/del&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;version&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;更新版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;createdAt&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;创建时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updatedAt&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;更新时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* local mysql innodb(index B+TREE) */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dbpartitions&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dbpartitions&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_assert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tinyint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createdAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatedAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_user_assertType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8mb4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partitions&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dbpartitions&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_assert$&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tbpartitions&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;like&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_assert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* create table add this for tidb tikv(index LSM-TREE) */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* eg: partitions*2^min(SHARD_ROW_ID_BITS,PRE_SPLIT_REGIONS) = 128 regions, echo regions 96MB(compressed) */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* if don&amp;#39;t use regions, those regions will be recycled */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*T! SHARD_ROW_ID_BITS=4 PRE_SPLIT_REGIONS=3 */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tinyint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createdAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatedAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_user_assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8mb4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SHARD_ROW_ID_BITS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRE_SPLIT_REGIONS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partitions&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* create db table for polardb-x innodb(index B+TREE) */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* PARTITION_MODE drds/sharding (db,table), auto/partitioning use partitioning */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* create database `pay` PARTITION_MODE=sharding; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PARTITION_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partitioning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tinyint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createdAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatedAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_user_assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8mb4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partitions&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*dbpartition by hash(`userId`) tbpartition by hash(`userId`) tbpartitions 16*/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topology&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SHOW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于&lt;strong&gt;单个用户资产修改&lt;/strong&gt;；如果存在 &lt;strong&gt;select 资产，然后根据不同产品策略进行业务逻辑计算出更新后资产，最后update 更新&lt;/strong&gt; 场景，在并发场景下，三种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;服务直接通过分布式锁来处理，这种方式不能防住其他其他服务或者脚本直接操作数据库的情况，除非在操作之前也去获取一次锁，而且引入外部依赖；可以考虑自举方式，服务资源实例自己来上锁；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;悲观锁 select for update事务实现&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTOCOMMIT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BEGIN&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FOR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;incrCn&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;乐观锁 CAS的方式，没有更新继续循环，直到更新ok&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldAssetCn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newAssetCn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;incrCn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newAssetCn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newAssetCn&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldAssetCn&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;存在ABA问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;考虑如下操作：&lt;/p&gt;
&lt;p&gt;并发1（上）：获取出数据的初始值是A，后续计划实施CAS乐观锁，期望数据仍是A的时候，修改才能成功&lt;/p&gt;
&lt;p&gt;并发2：将数据修改成B&lt;/p&gt;
&lt;p&gt;并发3：将数据修改回A&lt;/p&gt;
&lt;p&gt;并发1（下）：CAS乐观锁，检测发现初始值还是A，进行数据修改&lt;/p&gt;
&lt;p&gt;并发1在修改数据时，虽然还是A，但已经不是初始条件的A了，中间发生了A变B，B又变A的变化，此A已经非彼A，数据却成功修改，可能导致错误&lt;/p&gt;
&lt;p&gt;ABA问题导致的原因，是CAS过程中只简单进行了“值”的校验，再有些情况下，“值”相同不会引入错误的业务逻辑（例如库存），有些情况下，“值”虽然相同，却已经不是原来的数据了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;加上版本字段version, 对版本进行CAS更新&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldAssetCn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldVersion&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newAssetCn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;incrCn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newAssetCn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newVersion&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldVersion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetCn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newAssetCn&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newVersion&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assetType&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldVersion&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;想一想：mysql为了高可用和读写分离，生产环境部署的实例集群是主从架构，存在主从延迟，其实这个是不影响的，最终都是CAS的update更新，更新成功会返回affect rows为1，没有更新则为0；&lt;/p&gt;
&lt;p&gt;Notice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;select for update 加排斥锁和所建的索引有关(间隔(gap)锁，临键(next-key)锁，锁行/表)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果使用mongodb来存放，直接使用findAndModify来操作即可，当然防止重复数据，需要加唯一索引(锁文档)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;user_asset_record 用户虚拟币交易流水表&lt;/strong&gt;：记录虚拟币增加和减少数据详情，这个提供后台查看，用于重复请求幂等处理， 建库建表按照userId进行hash 分库分表分区 / 分片(Region)； (写插入热点) , notice: 这里冗余设计了，可以按照第三范式，一个事件有多人参与，一个人可以参与多个事件，分出一个用户事件关联表(user_event)，一个事件表(event_record)；主要是方便按用户维度获取流水记录；这里如果标准字段换成存放操作用户opUser和接受用户toUser，如果按照opUser维度拆分，查询toUser的流水数据就不方便，虽然polardb-x可以使用&lt;a href=&#34;https://help.aliyun.com/document_detail/311522.html&#34;&gt;全局二级索引&lt;/a&gt;来解决这个问题，但是换个建表维度思路既可以满足当前这个业务场景，同时也通用统一使用userId进行拆分，如果是ToB场景，可以使用租户id(tenantId)分库(物理库)，用户userId分表，这里ToC场景用户维度，直接userId分区即可。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;userId&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;用户id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;opUserType&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;1.操作者，2.接收者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bizId&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;直播场景：roomId，充值场景：订单Id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bizType&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;业务类型：1.直播互动，2.充值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eventId&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;事件Id: 直播互动场景下，互动事件id 用于贯彻整个送礼物流水链路,进行幂等处理; 用户充值场景下，订单事件id,  UUID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eventType&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;事件类型，interactGift,  orderApple, orderWX, orderAlipay, orderDouyin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;objId&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;操作对象id, giftId, transactionId/outOrderNo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;record&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;记录行为&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;recordOp&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;操作记录 虚拟币增加和减少&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;createdAt&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;创建时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updatedAt&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;更新时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* local mysql innodb(index B+TREE) */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dbpartitions&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_assert_record&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opUserType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tinyint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bizId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bizType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tinyint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recordOp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createdAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatedAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_user_opUserType_event&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opUserType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8mb4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PARTITIONS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dbpartitions&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_assert_record$&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tbpartitions&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;like&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_assert_record&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* create table add this for tidb tikv(index LSM-TREE) */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* eg: partitions*2^min(SHARD_ROW_ID_BITS,PRE_SPLIT_REGIONS) = 256 regions, echo regions 96MB(compressed) */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* if don&amp;#39;t use regions, those regions will be recycled */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*T! SHARD_ROW_ID_BITS=4 PRE_SPLIT_REGIONS=5 */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset_record&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opUserType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tinyint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bizId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bizType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tinyint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recordOp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createdAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatedAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_user_opUserType_event&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opUserType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8mb4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SHARD_ROW_ID_BITS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRE_SPLIT_REGIONS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PARTITION&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HASH&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PARTITIONS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset_record&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* create db table for polardb-x innodb(index B+TREE) or tokudb(index Fractal tree) or x-engine(index LSM-TREE) ,for this scene use innodb */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* PARTITION_MODE drds/sharding (db,table), auto/partitioning use partitioning */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* create database `pay` PARTITION_MODE=sharding; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PARTITION_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partitioning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset_record&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opUserType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tinyint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bizId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bizType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tinyint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recordOp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createdAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatedAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uk_user_opUserType_event&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opUserType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*tokudb/xengine*/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PARTITION&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HASH&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PARTITIONS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*dbpartition by hash(`userId`) tbpartition by hash(`userId`) tbpartitions 16*/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset_record&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topology&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset_record&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_asset_record&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SHOW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;资源评估：用抖音看下卡塔尔世界杯，支持下梅老板的阿根廷🇦🇷队直播，去估算下吧～～&lt;/p&gt;
&lt;p&gt;Tips: 采用分布式数据库，对其资源评估，建表，索引，事务，查询优化等操作；请参考规范和最佳实践：&lt;a href=&#34;https://docs.pingcap.com/zh/tidb/stable/tidb-best-practices&#34;&gt;tibd 最佳实践&lt;/a&gt; &lt;a href=&#34;https://docs.pingcap.com/zh/tidb/stable/high-concurrency-best-practices&#34;&gt;TiDB 高并发写入场景最佳实践&lt;/a&gt; &lt;a href=&#34;https://cn.pingcap.com/best-practice-detail/best-practices-for-developing-applications-with-tidb&#34;&gt;tidb开发规范&lt;/a&gt; &lt;a href=&#34;https://help.aliyun.com/document_detail/308293.html&#34;&gt;palordb-x最佳实践&lt;/a&gt; ;&lt;/p&gt;
&lt;p&gt;题外话：Tidb 底层存储tikv分片采用的范围分片，如果没有指定分片数，默认1个，当tikv上一个region写满了，会动态分裂出一个新的region, 可以提前分配好分片数，以防潮汐流量热点写入，比如这里的热门主播资产信息，以及资产流水记录，通过配置 SHARD_ROW_ID_BITS 参数通过tidb自身服务隐藏ROW_ID hash打散写入热点，类似mr任务数据倾斜时的再次hash打散，与redis/程序中的map rehash不同，redis rehash解决碰撞查找效率低和空间使用率低问题，通过loadFactor阈值，触发扩容和缩容，golang中map rehash仅触发扩容，这里所谈的是流量倾斜导致负载不均衡重新rehash； 而polardb-x的负载扩容 则类似于redis的rehash机制扩容，数据倾斜的问题是不能通过扩容来解决，可参考&lt;a href=&#34;https://help.aliyun.com/document_detail/309469.html&#34;&gt;polardb-x如何分析数据分布不均衡&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在支付中台，某个互动涉及到多个用户资产的变更，需要把多个写操作关联到一个本地事务进行处理，保证数据扣减和增减一致，需要开启本地事务来处理多表数据；以下gist为并发mysql本地事务处理测试demo&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/weedge/1700dd7053a87a4ab35ba4fce0ebea6a.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/weedge/fd731ce8549cd99ccfc9491f6025ae8e.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;cache&#34;&gt;Cache&lt;/h4&gt;
&lt;h5 id=&#34;key设计&#34;&gt;key设计：&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;th&gt;ex&lt;/th&gt;
&lt;th&gt;是否频繁更新&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;用户虚拟资产信息&lt;/td&gt;
&lt;td&gt;I.asset.{userId}.{assetType.string()}&lt;/td&gt;
&lt;td&gt;string/hash&lt;/td&gt;
&lt;td&gt;user_asset(json)&lt;/td&gt;
&lt;td&gt;1 d&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;type: String vs Hash tradeoff &lt;!-- raw HTML omitted --&gt;1. String 对于redis读详情数据效率高，但是写操作资产数目需要json decode/encode get/set，如果操作是在业务应用逻辑服务器上操作可以使用(有对应优化json库)，结合watch+事务cas方式; &lt;!-- raw HTML omitted --&gt;2. Hash 相对string读详情数据效率低些，但是写操作资产数目仅需hincrby(hget/hset)操作即可，如果操作是在数据中心redis上执行lua脚本原子操作可以使用，redis lua 使用cjson库相对解析效率低些，特别是大json，参考&lt;a href=&#34;https://blog.codingnow.com/2014/07/sproto.html&#34;&gt;sproto&lt;/a&gt;，并发量大容易增加redis数据中心负载，降低吞吐； 结合具体场景使用(尽量计算存储分离)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;礼物信息&lt;/td&gt;
&lt;td&gt;I.gift.{giftId}&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;gift(json)&lt;/td&gt;
&lt;td&gt;7 d&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用户信息&lt;/td&gt;
&lt;td&gt;I.user.{userId}&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;user(json)&lt;/td&gt;
&lt;td&gt;1 d&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;直播间信息&lt;/td&gt;
&lt;td&gt;I.room.{roomId}&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;room(json)&lt;/td&gt;
&lt;td&gt;1 d&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取用户虚拟资产分布式锁&lt;/td&gt;
&lt;td&gt;L.asset.{userId}.{tag}   &lt;!-- raw HTML omitted --&gt;(tag:assetType.String())&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;token&lt;/td&gt;
&lt;td&gt;60 s&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;AP型锁，加锁单个线程从db中获取数据写入缓存，初始化送礼用户资产信息，锁的是热更新资源；存在数据复制的延迟可能带来的数据写后读（read-after-write）不一致问题，所以&lt;strong&gt;从follower读取数据必须是强一致性读(tidb支持)/全局一致性读(polardb-x支持)，否则从leader/master上读取&lt;/strong&gt;；&lt;!-- raw HTML omitted --&gt;这里使用redlock，如果运行锁失效多次读写入缓存幂等操作,竞争条件是可以接受，直接用单集群实例redlock就行；否则需要多集群redlock加锁，具体详情：&lt;a href=&#34;https://redis.io/docs/manual/patterns/distributed-locks/&#34;&gt;distributed-locks&lt;/a&gt; PS: 类似使用数据库锁也可以使用redlock算法来实现分布式可靠加锁;  锁的粒度，可以先分散到本地锁(需要加等待超时时间，防止夯主服务，超时上游可以重试)，然后分布式锁只有单个线程获取数据去设置缓存，降低分布式锁的竞争，最多部署进程实例数目竞争,高并发场景下很大幅度减少网络IO。 如下场景：&lt;strong&gt;很多观众给热门女主播送礼物，这个女主播同时给热门男主播送礼物&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;资产变更消息&lt;/td&gt;
&lt;td&gt;M.asset.{userId}.{eventId}&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1 d&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;1. 保证幂等：类似Once done 原子操作(event事务维度)； &lt;!-- raw HTML omitted --&gt;2.事务消息回调RC可见(原子操作)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;资源评估：用抖音看下卡塔尔世界杯，支持下梅老板的阿根廷🇦🇷队直播，去估算下吧～～&lt;/p&gt;
&lt;p&gt;并发场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;缓存从db中获取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;频繁增/减用户虚拟资产缓存存量数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;热key:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户维度的用户虚拟资产信息，通过userId进行分散即可， 如果多用户/租户 对 共享缓存资源频繁操作(比如 优惠卷/商卷)，突破了单redis实例的读写瓶颈，需要对key进行再次切分；如果是读多场景，更新不频繁缓存可以缓存在本地服务进程中；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大key:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存放的value值比较大，一般是list, set，zset, hash这些集合结构，存储的item/field数目一般在5000个左右，需要按比例切分，读放大的问题可以并发控制读取；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;watch+事务，lua原子操作 demo代码如下：&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/weedge/2b473c5baf0ac59d8d0c8b1ddc5692f5.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/weedge/c2d830dceef4163acc6dd749a05493db.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;消息队列&#34;&gt;消息队列&lt;/h4&gt;
&lt;h5 id=&#34;topic&#34;&gt;Topic&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;读/写队列数&lt;/th&gt;
&lt;th&gt;消息类型&lt;/th&gt;
&lt;th&gt;消息key&lt;/th&gt;
&lt;th&gt;消息tag&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TOPIC_ASSET_CHANGE_EVENT&lt;/td&gt;
&lt;td&gt;default: 8/8&lt;/td&gt;
&lt;td&gt;事务消息&lt;/td&gt;
&lt;td&gt;eventId&lt;/td&gt;
&lt;td&gt;{eventType} ( || 间隔多个tag)&lt;/td&gt;
&lt;td&gt;用户事件资产变更&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Tips:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;topic tag: 长度不能超过 127 (Byte.MAX_VALUE )；&lt;/li&gt;
&lt;li&gt;读写队列数由消费集群和生产集群吞吐量决定，开发可以使用默认8/8；&lt;/li&gt;
&lt;li&gt;事务消息不支持批量生产和延时生产，即使在生产侧设置延时发送事务消息，rocketmq 4.7.0之后的不会生效，&lt;a href=&#34;https://github.com/GenerousMan/rocketmq/commit/5a584d056a07350911954dd269bb1ee5c80dfd11&#34;&gt;commit&lt;/a&gt; ;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/rocketmq/wiki/RIP-50-RocketMQ-Transaction-Message-Improvement&#34;&gt;RocketMQ事务消息改进&lt;/a&gt; 这个改进提案暂时还未发布；&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;message&#34;&gt;Message&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;eventId&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;变更事件id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;opUserId&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;操作者id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eventType&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;变更事件类型，interactGift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;messageBody&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;消息数据，更具消息事件类型定义，格式可以为json 以便跟踪查看&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;producer GroupName/GroupID: P_GID_GIFT_ASSET_CHANGE&lt;/p&gt;
&lt;p&gt;consumer GroupName/GroupID: C_GID_GIFT_ASSET_CHANGE   5.0版本尽量采用&lt;a href=&#34;https://mp.weixin.qq.com/s/UFWULymSblrs1hIGP5e7YQ&#34;&gt;POP consumer模式&lt;/a&gt; , 比如执行如下命令切换成&lt;code&gt;POP&lt;/code&gt;模式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./mqadmin setConsumeMode -c DefaultCluster -t &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -g testGroup -m POP -n namesrv:9876
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;消息大小不能超过4M, 可参考 &lt;a href=&#34;https://help.aliyun.com/document_detail/440347.html&#34;&gt;5.0版限制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;消息重试默认16次, 设置重试延迟级别(level)，设置的延迟级别下标(level-1)如下延迟数组&lt;code&gt;delayLevelArray&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[1s, 5s, 10s, 30s, 1m, 2m, 3m, 4m, 5m, 6m, 7m, 8m, 9m, 10m, 20m, 30m, 1h, 2h]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果不在指定延迟级别内，使用默认 &lt;code&gt;delayLevelArray[2:]&lt;/code&gt;延迟数组依次重试16次；&lt;/p&gt;
&lt;h5 id=&#34;消费侧需要关注的参数&#34;&gt;消费侧需要关注的参数&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pullBatchSize&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;每次发起pull请求到broker，客户端需要指定一个最大batch size，表示这一次拉取消息最多批量拉取多少条；范围在 [1,1024]; 为了提高吞吐，一般都大于1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;consumeMessageBatchMaxSize&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;批量消费的最大消息条数；范围在 [1,1024]；如果消费逻辑支持批量处理，可以设置值大于1； 处理业务逻辑的批量msgs的最大大小是consumeMessageBatchMaxSize和pullBatchSize的较小值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maxReconsumeTimes&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;-1 默认16次重试；0或者小于-1 不重试；大于0，则为设置的重试次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;消费侧从broker pull message流程：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;NewPushConsumer -&amp;gt; GetOrNewRocketMQClient -&amp;gt; GetOrNewRocketMQClient-&amp;gt; 注册RegisterRequestFunc  ReqResetConsumerOffset事件的回调func -&amp;gt; 触发 resetOffset -&amp;gt; ResetOffset-&amp;gt; resume -&amp;gt; doBalance -&amp;gt; updateProcessQueueTable写入拉去请求到prCH中

Start -&amp;gt; RegisterConsumer -&amp;gt; start
异步 select 轮训从prCh中获取拉去请求pr -&amp;gt; 异步 pullMessage(pr)-&amp;gt;
	异步 select 轮训处理pr中的处理队列和消息队列 submitToConsume(pr.pq, pr.mq) (一个是顺序orderly处理，一个是普通currently处理)
	
	-&amp;gt;pq.putMessage(msgs)从broker中请求的消息放入处理队列中的msgCh中
	
	-&amp;gt;普通处理consumeMessageCurrently() -&amp;gt; pq.getMessages 从处理队列中的msgCh中获取消息-&amp;gt; 
		拉取到的一批消息会拆分成N（取决于consumeMessageBatchMaxSize）个小批消息subMsgs -&amp;gt; 
		异步 consumeInner(ctx,subMsgs) -&amp;gt; 调用业务定义的回调业务函数callback.f(ctx, subMsgs...)-&amp;gt;
	处理完成返回响应
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于普通消息的处理，可以看出批量拉去拆分成N(PullBatchSize/min(ConsumeMessageBatchMaxSize,PullBatchSize))个批量msgs, 每次获取批量msgs处理都是并发的，不会相互等待；拉完一批触发偏移事件继续拉去下一批到本地pr队列中，直到broker队列中没有可消费的数据；重试有对应topic重试队列不会阻塞当前topic队列的正常消费；&lt;/p&gt;
&lt;p&gt;其他参考：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/27397055&#34;&gt;客户端配置详解&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;rocketmq-重试-死信-系统-topic&#34;&gt;RocketMQ 重试, 死信, 系统 Topic&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%RETRY%C_GID_GIFT_ASSET_CHANGE&lt;/td&gt;
&lt;td&gt;对应消费组重试topic，重试次数默认16次&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%DLQ%C_GID_GIFT_ASSET_CHANGE&lt;/td&gt;
&lt;td&gt;对应消费组死信队列topic, 超过重试次数放入该队列中&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SCHEDULE_TOPIC_XXXX&lt;/td&gt;
&lt;td&gt;延迟消息队列topic&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;TBW102&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;默认用于创建不存在topic时使用这个默认topic来创建&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RMQ_SYS_TRACE_TOPIC&lt;/td&gt;
&lt;td&gt;开启消息跟踪的topic 用于消息轨迹&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RMQ_SYS_TRANS_HALF_TOPIC&lt;/td&gt;
&lt;td&gt;记录所有的半事务消息，消费端不可见&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RMQ_SYS_TRANS_OP_HALF_TOPIC&lt;/td&gt;
&lt;td&gt;记录已经COMMIT或ROLLBACK的半事务消息，tags是&amp;quot;d&amp;quot; 逻辑删除&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TRANS_CHECK_MAX_TIME_TOPIC&lt;/td&gt;
&lt;td&gt;未知状态的事务消息超过最大回查次数，默认15次，会存在这个队列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;具体生产，消费用户资产事务消息demo如下: (demo中使用 &lt;a href=&#34;https://github.com/apache/rocketmq-client-go&#34;&gt;rocketmq-client-go&lt;/a&gt; &lt;strong&gt;客户端生产消费配置了 trace，rocketmq broker也需要配置traceTopicEnable=true，用于查看消息轨迹&lt;/strong&gt;；除此之外，可以在消息属性中加上全链路追踪的traceId，用于整体系统服务进行串联，如果想把rocketmq客户端生产和消费加入OTEL进行全链路追踪, 可以参考 &lt;strong&gt;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/instrumentation/github.com/Shopify/sarama/otelsarama&#34;&gt;kafka-otel-sarama&lt;/a&gt;&lt;/strong&gt; 实现不难)&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/weedge/fcbc8e4a2889c6230d62f6f35de6862d.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/weedge/37839a2fcb3c11f77228ce43a713dee7.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;
&lt;p&gt;前台统一入口接口参数安全验证&lt;/p&gt;
&lt;p&gt;接口公共响应 BaseResp&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;errCode&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;错误码，0代表成功，非0错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;errMsg&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;错误信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;extra&lt;/td&gt;
&lt;td&gt;Map&amp;lt;string,string&amp;gt;&lt;/td&gt;
&lt;td&gt;额外信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;errCode分配：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务&lt;/th&gt;
&lt;th&gt;分配范围&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;互动&lt;/td&gt;
&lt;td&gt;[10000,20000)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;支付&lt;/td&gt;
&lt;td&gt;[20000,30000)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息&lt;/td&gt;
&lt;td&gt;[30000,40000)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;互动中台：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;赠送礼物接口&lt;/li&gt;
&lt;li&gt;获取直播间礼物列表接口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;支付中台：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;变更用户虚拟资产接口&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;BizAssetChangesReq 请求：(批量并发控制统一收敛至支付中台，调用方无须并发获取)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;bizAssetChanges&lt;/td&gt;
&lt;td&gt;list&amp;lt;\BizEventAssetChange/&amp;gt;&lt;/td&gt;
&lt;td&gt;业务资产变更列表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;BizEventAssetChange&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;eventId&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;操作事件id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;opUserId&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;操作者id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eventType&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;事件类型: interactGift,  orderApple, orderWX, orderAlipay, orderDouyin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bizId&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;业务场景id: 直播(roomId), 充值(orderId)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bizType&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;业务类型 1.直播，2.充值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;objId&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;操作对象id, giftId, transactionId/outOrderNo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;opUserAssetChange&lt;/td&gt;
&lt;td&gt;UserAssetChangeInfo&lt;/td&gt;
&lt;td&gt;操作用户资产变更&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;toUserAssetChange&lt;/td&gt;
&lt;td&gt;UserAssetChangeInfo&lt;/td&gt;
&lt;td&gt;对方用户资产变更&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;UserAssetChangeInfo&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;userId&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;用户id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assetType&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;资产类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;incr&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;+增加/-减少多少资产&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;BizAssetChangesResp 响应&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bizAssetChangeResList&lt;/td&gt;
&lt;td&gt;list&amp;lt;\BizEventAssetChangerRes/&amp;gt;&lt;/td&gt;
&lt;td&gt;资产变更结果列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;baseResp&lt;/td&gt;
&lt;td&gt;BaseResp&lt;/td&gt;
&lt;td&gt;公共响应信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;BizEventAssetChangerRes&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;eventId&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;操作事件id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;opUserAsset&lt;/td&gt;
&lt;td&gt;UserAsset&lt;/td&gt;
&lt;td&gt;操作者的用户资产&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;changeRes&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;1 成功， 0 失败&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;failMsg&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;失败信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;UserAsset&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;userId&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;用户id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assetType&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;资产类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assetCn&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;资产数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;获取用户虚拟资产接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取用户资产变更流水接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;更新数据库中的用户资产 消费逻辑&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;消息服务： &lt;a href=&#34;https://weedge.github.io/post/jxzbim/&#34;&gt;https://weedge.github.io/post/jxzbim/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;开发&#34;&gt;开发&lt;/h3&gt;
&lt;p&gt;借助开源工具，从0到1开始搭建蓝图，&amp;gt;1由业务驱动宏图&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;搭建本地基础环境，tidb/polardb-x, redis, rocketmq 1d&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#just for mac os local brew install&lt;/span&gt;
brew install redis
brew install mysql
&lt;span class=&#34;c1&#34;&gt;#list services to view is ok &lt;/span&gt;
brew services list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;#redis-cluster-single-docker-compose.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#https://github.com/bitnami/bitnami-docker-redis-cluster/issues/3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;single-redis-cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;redis-cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;grokzen/redis-cluster:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;26379-26384:26379-26384&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;INITIAL_PORT=26379&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;MASTERS=3&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;SLAVES_PER_MASTER=1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;SENTINEL=false&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;REDIS_CLUSTER_IP=0.0.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;IP=0.0.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;BIND_ADDRESS=0.0.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# redis-cluster docker local deploy&lt;/span&gt;
docker-compose -f redis-cluster-single-docker-compose.yaml up -d
&lt;span class=&#34;c1&#34;&gt;# check cluster state is ok &lt;/span&gt;
redis-cli -c -p &lt;span class=&#34;m&#34;&gt;26379&lt;/span&gt; cluster info

&lt;span class=&#34;c1&#34;&gt;# rocketmq docker local deploy    &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# https://github.com/apache/rocketmq-docker&lt;/span&gt;
git clone https://github.com/apache/rocketmq-docker.git
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; image-build
sh build-image.sh 5.0.0 alpine
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
sh stage.sh 5.0.0
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; stages/5.0.0
&lt;span class=&#34;c1&#34;&gt;# change data/broker/conf/broker.conf add brokerIP1={localIp}, add traceTopicEnable=true&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# docker run -d -v `pwd`/data/broker/logs:/home/rocketmq/logs -v `pwd`/data/broker/store:/home/rocketmq/store -v `pwd`/data/broker/conf/broker.conf:/opt/rocketmq-5.0.0/conf/broker.conf --name rmqbroker --link rmqnamesrv:namesrv -e &amp;#34;NAMESRV_ADDR=namesrv:9876&amp;#34; -p 10909:10909 -p 10911:10911 -p 10912:10912 apache/rocketmq:5.0.0${TAG_SUFFIX} sh mqbroker -c /opt/rocketmq-5.0.0/conf/broker.conf&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# run simple single node docker&lt;/span&gt;
./play-docker.sh alpine

&lt;span class=&#34;c1&#34;&gt;# rocketmq dashboard local deploy&lt;/span&gt;
docker pull apacherocketmq/rocketmq-dashboard:latest
docker run -d --name rocketmq-dashboard -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;JAVA_OPTS=-Drocketmq.namesrv.addr={localIp}:9876&amp;#34;&lt;/span&gt; -p 8181:8080 -t apacherocketmq/rocketmq-dashboard:latest
&lt;span class=&#34;c1&#34;&gt;# view http://127.0.0.1:8181/&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#tidb local deploy&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# notice:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# docker is not support&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# u should use deploy local tidb by tiup tool&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# see this https://docs.pingcap.com/tidb/dev/quick-start-with-tidb&lt;/span&gt;
tiup playground

&lt;span class=&#34;c1&#34;&gt;#polardb-x docker local deploy by pxd tool&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#see this &lt;/span&gt;

pxd tryout
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试demo, redis cluster集群下的缓存事务和 tidb分布式缓存事务，rocketmq 分布式消息事务；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;核心服务模块开发支付中台接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写makefile, dockerfile, 打包成docker镜像， 整体解决方案依赖组件也可以通过docker-compose部署至docker容器中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写相关k8s资源 (configmap,secret,deployment+service,ingress)通过minikube/kind 部署至本地k8s集群&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将服务网格化istio(xds流控, 可用于全链路监控, A/B测试，特别是产品新特性/模型策略场景)  (like this: &lt;a href=&#34;https://mp.weixin.qq.com/s/SAn-H5p53IfvSy_Y3Mcz_Q&#34;&gt;https://mp.weixin.qq.com/s/SAn-H5p53IfvSy_Y3Mcz_Q&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;k8s/istio operator&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;开源开发框架和组件选择(在标准化，规范模块化的前提下，尽量自动化，提高研发效能，focus on 核心业务逻辑)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;开发语言：golang + lua5.1(&lt;a href=&#34;https://redis.io/docs/manual/programmability/lua-debugging/&#34;&gt;redis lua debugging&lt;/a&gt;) + shell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发框架：&lt;a href=&#34;https://www.cloudwego.io/zh/docs/kitex/overview/&#34;&gt;kitex&lt;/a&gt;(统一规范化了RPC框架，支持gRPC和thrift的脚手架，常支持内部微服务，泛化调用+ proxyless xds流控, 参考&lt;a href=&#34;https://mp.weixin.qq.com/s/G8vmlJyaimux_K-548kFbA&#34;&gt;brpc&lt;/a&gt;) + &lt;a href=&#34;https://www.cloudwego.io/zh/docs/hertz/overview/&#34;&gt;hertz&lt;/a&gt;(http协议框架，常支持外部业务前/后台, 数据渲染,请求校验)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DB：mysql, 高可用集群方案：不推荐自建sharding+proxy的方式；推荐使用支持mysql协议的分布式数据库，且无需在业务代码中考虑分库分表操作，以及分库分表的分布式事务；比如：开源方案 &lt;a href=&#34;https://docs.pingcap.com/zh/&#34;&gt;tidb&lt;/a&gt;(shared nothing,scale out)，云厂商：&lt;a href=&#34;https://polardbx.com/document&#34;&gt;polardb-x&lt;/a&gt; (shared nothing, scale out)/&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/AuroraUserGuide/Aurora.AuroraMySQL.html&#34;&gt;aurora mysql&lt;/a&gt; (shared disk, scale up, aurora相关解读可以看下&lt;a href=&#34;youtube.com/watch?v=jJSh54J1s5o&#34;&gt;mit 6.824 Cloud Replicated DB, Aurora&lt;/a&gt;),   &lt;a href=&#34;https://gorm.io/&#34;&gt;gorm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tips: 对应分布式事务操作tidb有所不同，tidb和原生的mysql innodb引擎事务操作sql语句有些区别: &lt;a href=&#34;https://docs.pingcap.com/zh/tidb/dev/transaction-overview&#34;&gt;tidb transaction&lt;/a&gt;, &lt;a href=&#34;https://docs.pingcap.com/zh/tidb/dev/dev-guide-sample-application-golang&#34;&gt;tidb-gorm-sample&lt;/a&gt;；&lt;a href=&#34;https://doc.polardbx.com/features/topics/distributed-transaction.html&#34;&gt;polardb-x 分布式事务&lt;/a&gt; 和 aurora 则原生支持事务操作sql语句;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache:  redis, 高可用集群方案 开源方案&lt;a href=&#34;https://redis.io/docs/management/scaling/&#34;&gt;redis-cluster&lt;/a&gt;, &lt;a href=&#34;https://github.com/RedisLabs/redis-cluster-proxy&#34;&gt;redis-cluster-proxy&lt;/a&gt;；云厂商proxy代理方式：&lt;a href=&#34;https://help.aliyun.com/document_detail/52228.html&#34;&gt;阿里云redis&lt;/a&gt;,  或者支持redis cluster协议 底层利用rocksdb/leveldb 作为kv存储引擎的开源方案，比如&lt;a href=&#34;https://github.com/apache/incubator-kvrocks&#34;&gt;kvrocks&lt;/a&gt;(watch命令暂未支持，可以使用lua脚本命令),  &lt;a href=&#34;https://redis.uptrace.dev/guide/&#34;&gt;go-redis&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MQ: rocketMQ, &lt;a href=&#34;https://github.com/apache/rocketmq-client-go&#34;&gt;rocketmq-client-go&lt;/a&gt;,  如果使用阿里云rocketMQ使用对应&lt;a href=&#34;https://github.com/apache/rocketmq-clients/tree/master/golang&#34;&gt;client SDK&lt;/a&gt; (producer已支持全部消息类型)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务编排流量治理：&lt;a href=&#34;https://kubernetes.io/zh-cn/docs/home/&#34;&gt;k8s&lt;/a&gt; + &lt;a href=&#34;https://istio.io/latest/docs/&#34;&gt;istio&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;tips: 在本地开发，可以通过docker compose 本地部署； 还可以通过docker+minikube/kind+helm 来部署本地节点的多pod集群版本数据库(mysql/tidb/polardb-x)，redis-cluster，以及集群版rocketMQ；以及开发完业务服务应用后，也可以部署在本地pod的容器中, 以便后续CI/CD自动化集成部署至多云容器服务/自托管的容器服务中，具体可参考&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/practice/ci-cd.html&#34;&gt;k8s ci/cd&lt;/a&gt; , GitOps实践: &lt;a href=&#34;https://cloudyuga.guru/blog/jenkins-argo&#34;&gt;github-jenkins-argo&lt;/a&gt; , &lt;a href=&#34;https://www.jokerbai.com/archives/ji-yu-jenkins-he-argocd-shi-xian-devops&#34;&gt;使用gitlab,Jenkins和Argocd实现CI/CD&lt;/a&gt;, &lt;a href=&#34;https://www.jokerbai.com/archives/shi-yong-argorollouts-shi-xian-jin-si-que-fa-bu&#34;&gt;使用argo rollouts实现金丝雀发布&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;无状态服务快速开发迭代大致自动化构建部署如下：&lt;/p&gt;
&lt;p&gt;CI:  begin -&amp;gt; build(local makefile/test build, dockerfile build) -&amp;gt; push docker registry(自建&lt;a href=&#34;https://goharbor.io/docs/2.6.0/&#34;&gt;harbor&lt;/a&gt;或者云服务) -&amp;gt; end  (gitlab/jenkins CI)&lt;/p&gt;
&lt;p&gt;CD: 分开发，测试，预发和生产环境，开发，测试直接单pod部署实例；预发双pod;  生产环境则分阶段部署和回滚：蓝绿部署/金丝雀(灰度)部署 (&lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/&#34;&gt;argo CD&lt;/a&gt;, &lt;a href=&#34;https://argoproj.github.io/argo-rollouts/&#34;&gt;argo Rollouts&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;有状态数据存储服务通过operator部署：&lt;/p&gt;
&lt;p&gt;polardb-x operator: &lt;a href=&#34;https://doc.polardbx.com/operator/&#34;&gt;https://doc.polardbx.com/operator/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tidb-operator: &lt;a href=&#34;https://github.com/pingcap/tidb-operator&#34;&gt;https://github.com/pingcap/tidb-operator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis-cluster:   &lt;a href=&#34;https://github.com/bitnami/charts/tree/main/bitnami/redis-cluster&#34;&gt;https://github.com/bitnami/charts/tree/main/bitnami/redis-cluster&lt;/a&gt; , &lt;a href=&#34;https://kubedb.com/docs/v2022.10.18/guides/redis/clustering/redis-cluster/&#34;&gt;https://kubedb.com/docs/v2022.10.18/guides/redis/clustering/redis-cluster/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RocketMQ-operator on k8s: &lt;a href=&#34;https://github.com/apache/rocketmq-operator&#34;&gt;https://github.com/apache/rocketmq-operator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题外话：或者进一步的直接使用无服务serverless 函数计算，开源方案&lt;a href=&#34;https://www.cncf.io/online-programs/event-driven-architecture-with-knative-events/&#34;&gt;&lt;strong&gt;Knative&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.openfaas.com/deployment/kubernetes/&#34;&gt;openfaas on k8s&lt;/a&gt;, 或者使用云服务比如&lt;a href=&#34;https://aws.amazon.com/cn/campaigns/lambda/&#34;&gt;aws lambda&lt;/a&gt;(transform, not transport data), 专注于业务逻辑，减少&amp;rsquo;胶水&amp;rsquo;代码，缺少了开发框架的依赖，常用于数据事件处理,比如直播音视频离线/实时处理（DevOps-&amp;gt;AppOps)， &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PiQ_eZFO2GU&amp;amp;list=PL2yQDdvlhXf_lYR5Ntvr9V5iVYv5rcbNc&amp;amp;index=6&#34;&gt;AWS re:Invent 2022 - Best practices for advanced serverless developers&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&#34;https://catalog.workshops.aws/complete-aws-sam/en-US&#34;&gt;The Complete AWS SAM workshop&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码地址&lt;/strong&gt;： &lt;a href=&#34;https://github.com/weedge/craftsman/tree/main/cloudwego&#34;&gt;https://github.com/weedge/craftsman/tree/main/cloudwego&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码结构：(放在一个git仓库(svn)中主要是为了方便提交开发查看整体开发框架哈，如果想多人玩可以建个组织拆分哈,通过submodule组合在一起CP git flow，g*yhub)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;├── aws	-------------- use aws cloud develop, focus on biz logic by use lambda / step functions
│   └── cdk ------ deploy infrastructure ECS, VPC, EKS, S3, cache,db/search,mq etc for severless 
├── cloudwego	----------------- use cloudwego framwork develop
│   ├── common	----------------- biz common for idl,dto,dict enum; rpc service/client, pkg
│   │   ├── idl
│   │   ├── kitex_gen
│   │   │   ├── base
│   │   │   ├── common
│   │   │   └── payment
│   │   │       ├── base
│   │   │       ├── da
│   │   │       │   └── paymentservice
│   │   │       └── station
│   │   │           └── paymentservice
│   │   └── pkg
│   │       └── constants
│   ├── kitex-contrib ------------------------ kitex rpc framwork contrib (add new)
│   │   ├── gorm
│   │   └── obs-opentelemetry
│   │       └── logging
│   │           └── zap
│   └── payment		---------------------------- app payment have http ui/gateway, rpc station,da service/server
│       ├── bin		---- go build cmd output to bin
│       ├── build	---- makefile, dockerfile,docker-compose.yml to build, run
│       ├── cmd		---- main.go to load da/station/gw cmd to run
│       │   ├── da
│       │   ├── gw
│       │   └── station
│       ├── conf	---------- env biz config for local/dev/test/pre/stress/gray/prod 
│       │   ├── dev
│       │   ├── gray
│       │   ├── local
│       │   ├── pre
│       │   ├── prod
│       │   ├── stress
│       │   └── test
│       ├── data	-------------- sql data, encode/decode meta data
│       ├── docs	-------------- app help doc
│       ├── internal ----------- internal don&amp;#39;t be used by out package, code biz logic
│       │   ├── da	------------------------ dal 
│       │   │   ├── consumer ---- event drive consumer
│       │   │   ├── dao      ---- db table data persistence op
│       │   │   ├── domain   ---- domain entries, interface, errors
│       │   │   │   └── mocks ---- mock for test
│       │   │   ├── model    ---- table entry model 
│       │   │   ├── repository ---- impl domain db repository interface
│       │   │   │   └── mysql
│       │   │   └── usecase ----- biz logic use repositories 
│       │   ├── gw	------------------------ ui/gateway
│       │   │   └── middleware -------- middleware handle
│       │   └── station -------------------- biz logic station by using cache 
│       │       └── consumer ---- event drive consumer for cache
│       │       ├── domain   ---- domain entries, interface, errors
│       │       ├── repository ---- impl domain cache, mq produce repository interface
│       │       │   ├── redis
│       │       │   │   └── lua
│       │       │   └── rmq
│       │       └── usecase  ----- biz logic use repositories 
│       ├── manifests -------------- k8s/istio configmap,secret,deployment+service,ingress resource workload and traffic/flow control
│       │   ├── traffic
│       │   │   └── istio
│       │   └── workloads
│       └── pkg --------------------- app common pkg
│           ├── configparser
│           ├── constants
│           ├── injectors
│           ├── subscriber
│           ├── utils
│           │   ├── logutils
│           │   └── netutils
│           └── version 
├── kratos	----------------- use kratos framwork develop
└── opentelemetry-go-contrib ----- otel go contrib just for new one, if change, it&amp;#39;s not origin, u can fork, go mod edit -replace
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务可以通过多个service组合成一个单体server，也可以从一个单体server拆分成多个微服务server，以便企业内部组织架构来调整服务(基于上下文软件架构原则 &lt;strong&gt;&lt;a href=&#34;https://martinfowler.com/bliki/ConwaysLaw.html&#34;&gt;Conway&amp;rsquo;s law&lt;/a&gt;&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;服务内部各个模块组件采用DDD &lt;a href=&#34;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;clean-architecture&lt;/a&gt; 架构，接口隔离实现，依赖反转(&lt;strong&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Dependency_inversion_principle&#34;&gt;Dependency Inversion Principle&lt;/a&gt;&lt;/strong&gt;)，木有循环依赖，既方便mock，也方便组装，golang都是以组合方式来构建，面向对象编程语言 java/c++ 通过接口/继承来实现多态，golang则没有继承通过接口的方式来实现多态，前者是运行时查找编译时生成的函数表(itable/vtable)进行动态绑定，后者则是编译时指针直接进行绑定(实现接口分指针类型和结构体类型，后者有参数拷贝操作，开发中使用前者指针类型；编译时非空interface iface中的itab.inter指向对应接口名, itab._type 指向对应实例对象以及函数数组指针fun指向对应结构实体中的实现方法；运行时将初始化实例对象分配在堆中，然后将实例化对象指针赋给itab._type, 调用对应实体的函数方法时在分配的栈空间中进行运行；通过 &lt;a href=&#34;https://golang.google.cn/src/cmd/compile/doc.go?h=go+tool+compile&#34;&gt;go tool complie&lt;/a&gt; 在对应硬件平台查看编译的Plan9汇编代码为准)，以组合的方式构建项目(原则: &lt;strong&gt;任何构造函数都不应调用另一个构造函数&lt;/strong&gt;, 在程序初始化时进行构造注入实体)，以防类继承过度抽象设计；interface相关可参考：&lt;a href=&#34;https://www.toptal.com/go/golang-oop-tutorial&#34;&gt;golang-oop-tutorial&lt;/a&gt; &lt;a href=&#34;https://halfrost.com/go_interface/&#34;&gt;go-interface&lt;/a&gt; &lt;a href=&#34;https://github.com/cch123/golang-notes/blob/master/assembly.md&#34;&gt;golang-assembly&lt;/a&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/teh-cmc/go-internals/blob/master/chapter2_interfaces/README.md&#34;&gt;go-internals-interfaces&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://planetscale.com/blog/generics-can-make-your-go-code-slower&#34;&gt;generics-can-make-your-go-code-slower&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽量使用工具来生成规范化，结构化的代码; 常用工具如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://gorm.io/gen/index.html&#34;&gt;gorm-gen&lt;/a&gt; diy生成数据库持久访问层模型,可以用sql来推演业务逻辑，然后直接生成对应dao操作model/entry读写方法，提供给上层repository 进行接口实例化注入，如果业务逻辑非简单的CURD, 提供一层usecase来分离业务具体实现，以及组合repository来实现具体业务场景逻辑，实现 domain领域驱动 满足 业务对内对外的api接口 以及 事件驱动；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/wire/blob/main/docs/guide.md&#34;&gt;wire &lt;/a&gt;依赖注入，将db/cache/mq/rpc/http client -&amp;gt; dao, repository  -&amp;gt; usecase -&amp;gt; api/subscribe handler  -&amp;gt; service  =&amp;gt; server 依次注入实体组装成server，提供服务；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/mock&#34;&gt;GoMock mockgen&lt;/a&gt;(golang官方出品)，可以结合 &lt;a href=&#34;github.com/vektra/mockery&#34;&gt;mockery&lt;/a&gt; (相对开发友好)工具来mock 接口 ， 这样在前期不用实现具体场景实体类，直接可以测试驱动(BDD/TDD)进行业务逻辑推演；可以认为前期搭开发框架架子，不仅需要满足现在需求，而且需要对后续易变需求可进行扩展开发，无需改动以往逻辑(业务逻辑实体合理抽象以及对应方法接口)；也可以使用hack的方式 通过 &lt;a href=&#34;https://bou.ke/blog/monkey-patching-in-go/&#34;&gt;gomonkey&lt;/a&gt; 进行打桩注入进行mock，虽然简单直接，但是依赖底层编译硬件平台架构,有限制不推荐；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://onsi.github.io/ginkgo/&#34;&gt;ginkgo&lt;/a&gt; 编写公有函数测试用例，覆盖业务逻辑分支&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之保持 &lt;strong&gt;KISS&lt;/strong&gt; 姿势，让工具来解放生产力（好的工具可以规范化写代码流程, 前提是工程最佳实践沉淀）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keep it simple stupid “K.I.S.S”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;附：&lt;a href=&#34;https://google.github.io/styleguide/go/&#34;&gt;google golang style&lt;/a&gt;  , &lt;a href=&#34;https://rakyll.org/deprecated/&#34;&gt;Deprecation notices in Go&lt;/a&gt; ,  &lt;a href=&#34;https://research.swtch.com/gomm&#34;&gt;GOMM&lt;/a&gt; , &lt;a href=&#34;https://medium.com/@ankur_anand/a-visual-guide-to-golang-memory-allocator-from-ground-up-e132258453ed&#34;&gt;Go Memory Allocator&lt;/a&gt; , &lt;a href=&#34;https://tip.golang.org/doc/gc-guide&#34;&gt;gc-guide&lt;/a&gt; , &lt;a href=&#34;https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html&#34;&gt;garbage-collection-in-go&lt;/a&gt; , &lt;a href=&#34;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html&#34;&gt;scheduling-in-go&lt;/a&gt; , &lt;a href=&#34;https://go101.org/article/channel-closing.html&#34;&gt;channel-closing&lt;/a&gt; , &lt;a href=&#34;https://www.google.com.hk/search?q=kavya%20golang#fpstate=ive&amp;amp;vld=cid:089b5108,vid:KBZlN0izeiY&#34;&gt;Understanding Channels&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;p&gt;基本功能逻辑测试，并发场景下的扣减和新增数据一致；然后加上 业务/基础服务/中间件服务监控，日志，在开始压测，给出性能报告，调优；最终给出接口/整体服务吞吐和延时上限，采用服务流控对服务接口加上接口/服务限流，以及超时重试，服务相关降级策略；然后模拟线上场景继续压测，触发对应报警和限流，降级策略；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;模块测试, 主要是 pkg中的基础函数benchmark测试，以及internal中的业务逻辑测试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加上服务监控，日志，报警，重点关注核心链路指标：资源U.S.E, 应用R.E.D; 参考: &lt;a href=&#34;http://www.infoq.com/articles/monitoring-SRE-golden-signals&#34;&gt;&lt;strong&gt;Monitoring SRE’s Golden Signals&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://sre.google/sre-book/monitoring-distributed-systems/#xref_monitoring_golden-signals&#34;&gt;monitoring_golden-signals L.E.T.S&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单个接口压测, 主要是接口中操作数据中心db的读写吞吐，以及引入缓存后，进行异步处理的读写吞吐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;核心前端接口整体压测, 需要流量和数据存储环境隔离，整体通过服务治理框架进行流控，打上stress标签染色，请求流量和数据流通过stress标签将数据存放于影子逻辑存储(cache KV, 表/集合/索引，队列)中; 参考：&lt;a href=&#34;https://mp.weixin.qq.com/s/vofrpFGvnptj3MNAv1hQ-w&#34;&gt;Rhino&lt;/a&gt; &lt;a href=&#34;https://tech.meituan.com/2018/09/27/quake-introduction.html&#34;&gt;Quake&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;混沌测试，尽量覆盖触发边界场景，面向故障编程，测试; 参考：&lt;a href=&#34;https://mp.weixin.qq.com/s/kZ_sDdrbc-_trVLNCWXyYw&#34;&gt;混沌工程实践&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业务功能调优：优先业务功能大方向调优，分布式数据库下的查询语句，算子下推，索引效率 (空间换时间，k/v 操作 B+tree,LSM-tree)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Profiling 调优：通过相关trace/perf工具关注耗时，使用系统内核优化的调用函数，以及系统参数调整，内存(减少gc，频繁操作小对象池化复用，内存分配管理，局部性原则)，cpu(亲和性)，I/O(网络，磁盘I/O 尽量异步处理,) ，buff(缓冲，batch)等&lt;/p&gt;
&lt;p&gt;tips: 业务整体设计方案ok的情况下，同机房整体性能优化收益： 硬件(cpu/GPU浮点运算/TPU，内存/nvm，磁盘/ssd，网卡带宽拆解包校验) &amp;gt; 内核系统调用 &amp;gt; 业务代码(数据结构,语言层面编译优化opcode)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;面对大量并发请求的用户交互场景，涉及到用户金额等事务场景，整体思路是预热快速路径响应用户的交互请求行为，然后异步队列解耦，执行慢路径，慢路径上通过本地事务(同服务多表更新)，或者分布式事务(多服务对应表更新)，来保证数据整体一致，尽量通过批量处理(单分片事务组提交)提高吞吐；快路径尽量使用原子操作(服务主逻辑单线程执行)或者乐观锁用户程序自旋执行事务，按用户维度切分减少block, 以及通过提前规划分布式存储均匀打散读写热点(分库分表分区分片/槽Region/Slot)，规避节点负载倾斜不均衡问题(大流量,大数据),多维度查询的话可以采用数据异构方式(空间换时间)，如果涉及到跨数据中心则需要考虑数据同构迁移问题(比如国际化数据隐私&lt;em&gt;PIPL&lt;/em&gt; &lt;em&gt;GDPR&lt;/em&gt;)；对于数据并发同步获取至缓存，则需要加分布式互斥锁自旋block一段时间，防止并发操作加锁尽量前置处理(warm up to run fast~),减少block；本质上都是将并行变成串行，只不过内存操作比磁盘,网络IO操作要快很多(理论上，lua脚本在master主线程内存中原子执行相对watch+事务方式处理效率要高些)；还有服务异常时的降级措施，以及服务过载时的限流，以及消息数据流的反压措施。&lt;/p&gt;
&lt;p&gt;题外话：没有银弹，充分利用开源(工程规范) ☁️红利(硬件计算存储资源)； &lt;em&gt;纸上得来终觉浅，绝知此事要躬行&lt;/em&gt;， step by step, maybe day day up~  hope expand your horizons&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/Cmw3QExqCfBAz9V0AlsS9A&#34;&gt;https://mp.weixin.qq.com/s/Cmw3QExqCfBAz9V0AlsS9A&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/cn/builders-library/timeouts-retries-and-backoff-with-jitter/&#34;&gt;https://aws.amazon.com/cn/builders-library/timeouts-retries-and-backoff-with-jitter/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/jznfR9Jc-U-uCXioHXjeew&#34;&gt;https://mp.weixin.qq.com/s/jznfR9Jc-U-uCXioHXjeew&lt;/a&gt; , &lt;a href=&#34;https://mp.weixin.qq.com/s/AV4E0Y9d4k5VYTL7n2TNug&#34;&gt;https://mp.weixin.qq.com/s/AV4E0Y9d4k5VYTL7n2TNug&lt;/a&gt; , &lt;a href=&#34;https://mp.weixin.qq.com/s/cT9b2GDsUinVNoA6gyqs_g&#34;&gt;https://mp.weixin.qq.com/s/cT9b2GDsUinVNoA6gyqs_g&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.52im.net/thread-3515-1-1.html#26&#34;&gt;http://www.52im.net/thread-3515-1-1.html#26&lt;/a&gt; , &lt;a href=&#34;http://www.52im.net/thread-3994-1-1.html&#34;&gt;http://www.52im.net/thread-3994-1-1.html&lt;/a&gt; , &lt;a href=&#34;http://www.52im.net/thread-3376-1-1.html&#34;&gt;http://www.52im.net/thread-3376-1-1.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://coolshell.cn/articles/8239.html,&#34;&gt;https://coolshell.cn/articles/8239.html,&lt;/a&gt; &lt;a href=&#34;https://time.geekbang.org/column/article/4050&#34;&gt;https://time.geekbang.org/column/article/4050&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://redis.io/docs/manual/transactions/&#34;&gt;https://redis.io/docs/manual/transactions/&lt;/a&gt; , &lt;a href=&#34;https://redis.io/docs/manual/programmability/&#34;&gt;https://redis.io/docs/manual/programmability/&lt;/a&gt; , &lt;a href=&#34;https://redis.io/docs/reference/cluster-spec/&#34;&gt;https://redis.io/docs/reference/cluster-spec/&lt;/a&gt; , &lt;a href=&#34;https://redis.com/blog/redis-clustering-best-practices-with-keys/&#34;&gt;https://redis.com/blog/redis-clustering-best-practices-with-keys/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/articles/serverless.html&#34;&gt;https://martinfowler.com/articles/serverless.html&lt;/a&gt;  &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/usecases/serverless.html&#34;&gt;https://jimmysong.io/kubernetes-handbook/usecases/serverless.html&lt;/a&gt; , &lt;a href=&#34;https://www.youtube.com/playlist?list=PL2yQDdvlhXf_lYR5Ntvr9V5iVYv5rcbNc&#34;&gt;https://www.youtube.com/playlist?list=PL2yQDdvlhXf_lYR5Ntvr9V5iVYv5rcbNc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/apache/incubator-kvrocks/wiki/Kvrocks-%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88%E7%AE%80%E4%BB%8B&#34;&gt;https://github.com/apache/incubator-kvrocks/wiki/Kvrocks-%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88%E7%AE%80%E4%BB%8B&lt;/a&gt;  &lt;a href=&#34;https://www.qin.news/kvrocks-qian-xi/&#34;&gt;https://www.qin.news/kvrocks-qian-xi/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tidb.net/blog/09cc69f4&#34;&gt;https://tidb.net/blog/09cc69f4&lt;/a&gt; , &lt;a href=&#34;https://cn.pingcap.com/best-practice-detail/best-practices-for-developing-applications-with-tidb&#34;&gt;https://cn.pingcap.com/best-practice-detail/best-practices-for-developing-applications-with-tidb&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/UFWULymSblrs1hIGP5e7YQ&#34;&gt;https://mp.weixin.qq.com/s/UFWULymSblrs1hIGP5e7YQ&lt;/a&gt; , &lt;a href=&#34;https://github.com/apache/rocketmq/wiki/RIP-50-RocketMQ-Transaction-Message-Improvement&#34;&gt;https://github.com/apache/rocketmq/wiki/RIP-50-RocketMQ-Transaction-Message-Improvement&lt;/a&gt;&lt;/strong&gt; , &lt;strong&gt;&lt;a href=&#34;https://xie.infoq.cn/article/ad16bac16b4c172e268225cfa&#34;&gt;https://xie.infoq.cn/article/ad16bac16b4c172e268225cfa&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLy7NrYWoggjziYQIDorlXjTvvwweTYoNC&#34;&gt;https://www.youtube.com/playlist?list=PLy7NrYWoggjziYQIDorlXjTvvwweTYoNC&lt;/a&gt; , &lt;a href=&#34;https://www.youtube.com/watch?v=vgPFzblBh7w&amp;amp;list=PL8t1FdN2Tj3ZVAzTY-FvsS0qy-mEfRdoj&amp;amp;index=5&#34;&gt;https://www.youtube.com/watch?v=vgPFzblBh7w&amp;amp;list=PL8t1FdN2Tj3ZVAzTY-FvsS0qy-mEfRdoj&amp;amp;index=5&lt;/a&gt; , &lt;a href=&#34;https://www.youtube.com/watch?v=-U9E1PhrM3o&#34;&gt;https://www.youtube.com/watch?v=-U9E1PhrM3o&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tonybai.com/2022/08/15/developing-kubernetes-operators-in-go-part1/&#34;&gt;https://tonybai.com/2022/08/15/developing-kubernetes-operators-in-go-part1/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/istio/istio/tree/master/samples/bookinfo&#34;&gt;https://github.com/istio/istio/tree/master/samples/bookinfo&lt;/a&gt; , &lt;a href=&#34;https://github.com/cloudwego/biz-demo&#34;&gt;https://github.com/cloudwego/biz-demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/n4eVf2KZRIp2yKACk88qJA&#34;&gt;https://mp.weixin.qq.com/s/n4eVf2KZRIp2yKACk88qJA&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>让ML跑起来</title>
      <link>https://weedge.github.io/post/let-ml-go/</link>
      <pubDate>Tue, 08 Nov 2022 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/let-ml-go/</guid>
      
        <description>&lt;h3 id=&#34;介绍&#34;&gt;介绍&lt;/h3&gt;
&lt;p&gt;上文提到通过用户的行为数据存放在S3中，这些数据包括结构化和非结构化数据，怎么让这些数据变得有价值呢？一种是人为进行数据挖掘，对相关指标转化率进行评估；还有一种是通过这些数据来训练模型，然后将预测模型用于生产环境中进行A/B测试，选出适合的模型，这个模型需要不断更新迭代，并且自动化半自动化运行起来；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.aws.amazon.com/zh_cn/sagemaker/latest/dg/images/ml-concepts-10.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据准备&#34;&gt;数据准备&lt;/h3&gt;
&lt;h4 id=&#34;特征工程&#34;&gt;特征工程&lt;/h4&gt;
&lt;h3 id=&#34;模型训练&#34;&gt;模型训练&lt;/h3&gt;
&lt;p&gt;相关库：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xgboost.ai/&#34;&gt;XGBoost&lt;/a&gt;,  &lt;a href=&#34;https://en.wikipedia.org/wiki/Gradient_boosting&#34;&gt;Gradient Boosting&lt;/a&gt;框架下实现机器学习算法。XGBoost 提供了一种并行树提升（也称为 &lt;a href=&#34;https://developers.google.com/machine-learning/decision-forests/intro-to-gbdt&#34;&gt;GBDT&lt;/a&gt;、GBM），可以快速准确地解决许多数据科学问题。支持在多台机器上进行分布式训练，包括 AWS、GCE、Azure 和 Yarn 集群；可与 Flink、Spark 等云数据流系统集成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果说把机器学习问题分成，常规机器学习（conventional machine learning）和深度学习（deep learning）的话，那么XGBoost就是在常规ML竞赛获奖最多的算法。&lt;a href=&#34;https://github.com/dmlc/xgboost&#34;&gt;XGBoost&lt;/a&gt; 的全称是 Extreme Gradient Boosting，是gradient boosting的一种开源实现。gradient boosting 把若干弱模型通过决策树的方式聚合（ensemble）在一起， 形成一个最终的模型，这个过程是一个持续的、不断迭代优化过程，每次迭代优化的方向通过计算loss function的梯度来实现，然后采取梯度下降的方式不断的降低loss function，从而得到一个最终的模型。&lt;/p&gt;
&lt;p&gt;XGBoost最常用来解决常规ML中的分类（regression）和回归（classification）问题。回归问题，举例来说：根据一个人的年龄、职业、居住环境等个人信息推算出这个人的收入，这种推理的结果是一个连续的值（收入）的情况就是一个回归问题；分类问题，比如在欺诈检测中，根据有关交易的信息，来判断交易是不是欺诈，这里的判断是或者否就是一个二分类问题。通常这两类问题都是给出一个表格类型数据，表格中的每列数据都是跟推理的目标（属于某个分类或者推理值）有着潜在关系的数据，XGBoost特别擅长处理这类的表格数据（tabular data），并据此作出推断。对于表格数据，无非由行、列来组成，在ML中对于表格数据中的行和列，我们有很多约定俗称的称谓，在各种关于ML的文章中这些称谓会经常出现，为了便于大家理解，在这里对这些叫法做一个梳理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行（row），叫做一个观察（observation），或者一个样本（sample）&lt;/li&gt;
&lt;li&gt;列（column） ，也叫字段（field），属性（attribute），或者特征（feature）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://keras.io/zh/&#34;&gt;keras&lt;/a&gt;: 深度学习模型库，高级神经网络,同时支持卷积神经网络和循环神经网络，以及两者的组合。&lt;/p&gt;
&lt;h3 id=&#34;模型评估&#34;&gt;模型评估&lt;/h3&gt;
&lt;h3 id=&#34;模型部署&#34;&gt;模型部署&lt;/h3&gt;
&lt;p&gt;如果使用&lt;a href=&#34;https://www.tensorflow.org/&#34;&gt;TF&lt;/a&gt;(tensorflow)框架, 使用TF &lt;a href=&#34;https://github.com/tensorflow/serving&#34;&gt;serving&lt;/a&gt;来支持加载训练好的模型发布到生产环境，并且可以进行A/B测试；&lt;/p&gt;
&lt;p&gt;操作demo参考：https://www.tensorflow.org/tfx/tutorials/serving/rest_simple&lt;/p&gt;
&lt;h3 id=&#34;用于生产环境需要考虑的问题&#34;&gt;用于生产环境需要考虑的问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;训练模型的数据来源，以及采集存放(格式和压缩)；这些数据根据使用场景而定，比如demo中的电商场景，识别物品，需要大量的非结构化图片数据，这些用户上传的原始图片和加工后的图片存放于对象存储中比如S3，OSS，COS；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特征数据清洗过滤存放；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据如何快速训练；数据量一般很大，PB级别，单机肯定是加载不了这么多数据训练，即使分割成多个小文件，单机处理需要大量中间结果存放，处理效率非常低；所以模型训练需要考虑集群模式，进行&lt;a href=&#34;https://openmlsys.github.io/chapter_distributed_training/index.html&#34;&gt;分布式训练模型&lt;/a&gt;，需要一个训练平台来支持，充分调度计算资源(CPU,GPU,TPU,FPGA)，并行计算，并且根据数据量进行可伸缩扩展，保证训练中途中断的可用性(failover,checkpoint)；&lt;/p&gt;
&lt;p&gt;开源框架：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;uber &lt;a href=&#34;https://github.com/horovod/horovod&#34;&gt;https://github.com/horovod/horovod&lt;/a&gt;  &lt;a href=&#34;https://arxiv.org/pdf/1802.05799.pdf&#34;&gt;Horovod: fast and easy distributed deep learning in TensorFlow&lt;/a&gt; 大部分云平台基于horovod做了定制化的改造&lt;/li&gt;
&lt;li&gt;Bytedance: &lt;a href=&#34;https://github.com/bytedance/byteps&#34;&gt;https://github.com/bytedance/byteps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将训练好的模型导出序列化pb格式，存放到文件系统中(&lt;a href=&#34;https://www.tensorflow.org/guide/saved_model#save_and_restore_models&#34;&gt;SavedModel&lt;/a&gt;)；然后TF serving启动服务加载模型，对外以 HTTP &lt;a href=&#34;https://github.com/tensorflow/serving/blob/master/tensorflow_serving/g3doc/api_rest.md&#34;&gt;REST API&lt;/a&gt;或 &lt;a href=&#34;https://github.com/tensorflow/serving/tree/master/tensorflow_serving/apis&#34;&gt;gRPC API&lt;/a&gt;的方式提供模型服务；正式用于线上，需要考虑服务性能问题(高并发场景，延迟和吞吐量，模型&lt;a href=&#34;https://github.com/tensorflow/serving/blob/master/tensorflow_serving/g3doc/saved_model_warmup.md&#34;&gt;预热&lt;/a&gt;(warmup)，&lt;a href=&#34;https://github.com/tensorflow/serving/blob/master/tensorflow_serving/batching/README.md&#34;&gt;批处理&lt;/a&gt;(batching)等&lt;a href=&#34;https://github.com/tensorflow/serving/blob/master/tensorflow_serving/g3doc/performance.md&#34;&gt;性能&lt;/a&gt;优化点)，生产环境模型更新(构建，无损服务切换，流量A/B测试)，容器化部署(&lt;a href=&#34;https://github.com/tensorflow/serving/blob/master/tensorflow_serving/g3doc/serving_kubernetes.md&#34;&gt;serving on K8S&lt;/a&gt;)(扩缩容，流控，容错等高可用设计)，服务监控等工程上的问题；本地demo可参考: &lt;a href=&#34;https://github.com/tensorflow/serving/blob/master/tensorflow_serving/g3doc/serving_basic.md&#34;&gt;Serving a TensorFlow Model&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监控模型数据，如何对其进行评估；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模型迭代更新速度快，需要引入CI/CD pipelines 来自动化支持模型闭环迭代；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算资源机器成本预估；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;开源方案&#34;&gt;开源方案&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kubeflow.org/docs/started/introduction/&#34;&gt;Kubeflow&lt;/a&gt; 在 Kubernetes 上部署机器学习 (ML) 工作流变得简单、可移植和可扩展。提供一种直接的方式来将用于 ML 的同类最佳开源系统部署到不同的基础设施；在任何运行 Kubernetes 的地方，都应该能够运行 Kubeflow。&lt;/p&gt;
&lt;h3 id=&#34;tfx-with-kubeflow-on-gke&#34;&gt;TFX with kubeflow on GKE&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tensorflow/tfx&#34;&gt;https://github.com/tensorflow/tfx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://www.tensorflow.org/tfx/tutorials&#34;&gt;TFX tutorials&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/17l3VR2MIeg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;ml-on--amazon-sagemakerhttpsawsamazoncomsagemaker&#34;&gt;ML on  &lt;a href=&#34;https://aws.amazon.com/sagemaker/&#34;&gt;Amazon SageMaker&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;分布式训练： &lt;a href=&#34;https://aws.amazon.com/cn/sagemaker/distributed-training/&#34;&gt;https://aws.amazon.com/cn/sagemaker/distributed-training/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文档：&lt;a href=&#34;https://sagemaker-examples.readthedocs.io/en/latest/index.html&#34;&gt;Amazon SageMaker Example Notebooks&lt;/a&gt;， &lt;a href=&#34;https://sagemaker-workshop.com/&#34;&gt;Amazon SageMaker Workshop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SageMaker框架直接集成了多种机器学习框架，一条龙服务，也可以集成Kubeflow方案；机器学习整体生命周期包括训练数据准备，模型训练，模型评估，评估ok之后部署上线提供在线预测推理服务，通过监控搜集数据，重复迭代模型；整体生命周期如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s3.cn-north-1.amazonaws.com.cn/awschinablog/use-xgboost-in-amazon-sagemaker-for-commercial-empowerment1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;将数据处理准备到模型上线整个过程可以自动化，通过sageMaker平台直接组合成工作流pipeline进行自动化处理，demo请参考：&lt;a href=&#34;https://aws.amazon.com/cn/getting-started/hands-on/machine-learning-tutorial-mlops-automate-ml-workflows/&#34;&gt;自动化机器学习工作流 sagemaker tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d1.awsstatic.com/sagemaker-tutorial-5-1-step-3-1-pipeline-diagram.90a11a1a83636b6d56c8ce8d43829571b506ae11.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Tips: 这里只是整体概括下机器学习工程化的过程；机器学习以及深度学习相关的算法知识待深入边动手边学习；待续～ :)&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/machine-learning&#34;&gt;google-developers-ml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tensorflow.org/tfx/&#34;&gt;TFX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xgboost.readthedocs.io/en/latest/index.html&#34;&gt;XGBoost文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tensorflow.org/tfx/guide/serving&#34;&gt;TF Serving&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://time.geekbang.org/column/article/303430&#34;&gt;深度学习推荐系统实战&lt;/a&gt; &lt;a href=&#34;https://github.com/wzhe06/SparrowRecSys&#34;&gt;SparrowRecSys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zh.d2l.ai/index.html&#34;&gt;动手学深度学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mikulskibartosz.name/how-to-ab-test-tensorflow-models-using-sagemaker-endpoints/&#34;&gt;How to A/B test Tensorflow models using Sagemaker Endpoints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/cn/blogs/china/use-xgboost-in-amazon-sagemaker-for-commercial-empowerment/&#34;&gt;在 Amazon SageMaker 中使用 XGBoost 来实现商业赋能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/cn/getting-started/hands-on/machine-learning-tutorial-mlops-automate-ml-workflows/&#34;&gt;自动化机器学习工作流 sagemaker tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/79030485&#34;&gt;AllReduce算法的前世今生&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>用户行为分析方案设计</title>
      <link>https://weedge.github.io/post/user-behavior-analytics-solution/</link>
      <pubDate>Wed, 02 Nov 2022 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/user-behavior-analytics-solution/</guid>
      
        <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;用户在手机和pc端使用客户业务产品，比如浏览网页，购买商品，查看文档，观看视频，直播，IOT场景；会产生大量的用户行为数据，主要包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非结构化数据：日志(前端事件埋点日志，服务端处理事件日志)，还有些非结构化的图片，音视频数据等等，主要存放在文件存储系统中；&lt;/li&gt;
&lt;li&gt;结构化和半结构化数据： 用户操作产品写入的结构化数据存放于数据库表中，将文档型半结构化的数据放入文档数据库中；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要分析用户的行为数据，进行决策；分为实时流式处理和离线批处理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实时流处理，主要用于实时展现客户端看板，后台BI实时分析，实时风控/推荐，异常报警等场景；&lt;/li&gt;
&lt;li&gt;离线批处理，分析用户历史数据，进行推荐算法等机器学习算法模型训练使用，数据仓库中根据不同维度对数据过滤聚合，进行上卷下钻分析，比如计算DAU,WAU,MAU，转化率(购买率，注册率)分析等，通常对数据建设投入多的话， 会把用户产生的结构化非结构化的数据都存下，放在一个大的池子里待使用时进行分析，即所谓的数据湖，围湖而建挖掘数据价值；而数仓相对精细化的分析，前置建模建表分析；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对此进行方案分析，本文将介绍一种实时离线处理分析用户行为数据方案，即能帮助企业低成本地使用海量数据，又能更快速地响应业务需求，同时借助亚马逊云科技的托管服务，能够快速实施和轻松运维。&lt;/p&gt;
&lt;h3 id=&#34;操作概括&#34;&gt;操作概括&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;权限设置：根据公司业务组织，分配对应服务资源权限，比如系统管理员OP, 开发人员DEV, 还有业务管理员OP；组织架构权限建设；&lt;/li&gt;
&lt;li&gt;服务基础架构：首先需要搭好基础服务框架，结合云厂商服务，进行可水平垂直自动扩展，高容错性，低成本，可观测监控，易于维护，持续集成发布的稳定性架构建设；&lt;/li&gt;
&lt;li&gt;业务迭代数据建设开发：架子搭好之后，需要对特定的业务场景进行数据建模，AI模型训练，挖掘出数据的价值，进行决策；服务代码质量，框架建设；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;使用aws 现有产品服务组件进行搭建，主要分为三个阶段，数据采集，数据处理存储，数据分析，整体架构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/weedge/user-behavior-analytics-cdk/blob/master/docs/aws-user-behavior-analytics.drawio.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据源采集&#34;&gt;数据源采集&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;访问日志和请求事件：用户在手机端通访CloudFront 内容分发服务, 会生成用户行为&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html&#34;&gt;访问日志&lt;/a&gt;，这些&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html&#34;&gt;实时日志&lt;/a&gt;中会有产品中定义的行为分析埋点记录事件，存放在S3中，通过Lambda无服务函数写入kinesis data streams中；如果需要实时处理，需要开启&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html&#34;&gt;CloudFront实时日志功能&lt;/a&gt;，将数据写入Kinesis Data Streams中，会有几秒的处理延时；还有一种方式是服务端在线实时通过使用aws SDK方式直接写入记录事件数据，可通过无服务部署的lambda函数写入或者API gateway配置写入(参考:&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/apigateway/latest/developerguide/integrating-api-with-aws-services-kinesis.html&#34;&gt;在 API Gateway 中创建 REST API 作为 Amazon Kinesis 代理&lt;/a&gt;)，常用于实时异常报警和统计；&lt;/li&gt;
&lt;li&gt;数据库数据： 存放在数据库中的数据，需要将数据同步存放在数仓和数据湖中，进行离线分析; 数据库的数据可以通过&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/dms/latest/userguide/CHAP_Introduction.html&#34;&gt;aws DMS&lt;/a&gt;服务来支持存量增量数据同步至Kinesis Data Streams中，具体方案可以参考**&lt;a href=&#34;https://aws.amazon.com/cn/blogs/big-data/stream-change-data-to-amazon-kinesis-data-streams-with-aws-dms/&#34;&gt;使用 AWS DMS 将更改数据流式传输到 Amazon Kinesis Data Streams&lt;/a&gt;**；也可以使用&lt;a href=&#34;https://ververica.github.io/flink-cdc-connectors/master/&#34;&gt;flink CDC connector&lt;/a&gt;  &lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/emr/latest/ReleaseGuide/emr-flink.html&#34;&gt;on aws EMR&lt;/a&gt;支持同步(需要理解反压机制，以便触发时看是否增大下游消费能力提高吞吐), 可参考&lt;a href=&#34;https://aws.amazon.com/cn/blogs/china/best-practice-of-using-amazon-emr-cdc-to-enter-the-lake-in-real-time-in-a-multi-database-multi-table-scenario/&#34;&gt;多库多表场景下使用Amazon EMR CDC实时入湖最佳实践&lt;/a&gt;，注意数据库表中的数据字段需要规范，需要一个更新时间字段方便数据顺序同步，比如mysql &lt;code&gt;update_time timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP&lt;/code&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;您可以参阅 AWS 白皮书&lt;a href=&#34;https://d1.awsstatic.com/whitepapers/aws-cloud-data-ingestion-patterns-practices.pdf&#34;&gt;AWS Cloud Data Ingestion Patterns and Practices&lt;/a&gt;，了解有关数据采集模式的更多详细信息；&lt;/p&gt;
&lt;p&gt;将数据采集写入消息队列中主要是方便多个消费方来处理流，以及服务之间的整体解耦，可作为数据流缓存层，数据流量突增时，增加分片数，提高吞吐，当然整体吞吐量也取决于下游数据的消费能力，引入消息队列，以pull方式进行消费(主动消费)，不至于将下游服务打挂，而且方便下游异常消费重启时，继续在未消费点开始消费；这里提供两种方案，一种将数据写入Kinesis Data Streams中，一种将数据写入&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/msk&#34;&gt;MSK&lt;/a&gt;(aws 托管的kafka集群服务，如果直接自己搭建维护，成本比较高，对接其他aws服务相对复杂些) 中；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据写入Kinesis Data Streams中主要是方便多个消费方来处理流，以及服务之间的整体解耦，数据流缓存层，更重要的是方便使用aws Kinesis方案，减少运维成本，对接也丰富，主要是方便对接内部Kinesis相关服务组件;&lt;/li&gt;
&lt;li&gt;数据写入MSK中，使用的开源解决方案对接；下游对接kinesis Data Analytics 服务需要通过flink 计算引擎加载对应kafka connector包，从kafka中获取数据源进行分析；如果下游对接其他服务，比如：Kinesis Data Firehose，将数据传输转化写入数据湖S3中存储，写入Redshift数仓中分析；使用SNS 进行报警等； 需要引入无服务框架lambda函数，通过使用&lt;a href=&#34;https://docs.confluent.io/platform/current/clients/index.html&#34;&gt;kafka client SDK库&lt;/a&gt;来进行生产/消费处理；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体使用结合公司实际场景而定，如果想想通过kafka对接更多的开源大数据服务框架， 可以选择MSK方案，额外需要开发维护lambda函数服务；使用Kinesis Data streams 很方便接入aws相关服务，减少额外的开发维护成本，不过如果对接其他开源大数据服务框架，同样需要引入lambda函数服务；本文采用将数据写入Kinesis Data streams 服务，提供给下游对接。&lt;/p&gt;
&lt;h3 id=&#34;数据处理存储&#34;&gt;数据处理存储&lt;/h3&gt;
&lt;p&gt;数据处理分析，分为实时处理的&lt;a href=&#34;https://aws.amazon.com/cn/streaming-data/&#34;&gt;流数据&lt;/a&gt;和离线处理批数据处理存放；&lt;/p&gt;
&lt;p&gt;实时处理使用AWS Kinesisi Data Analytics(KDA)进行分析，支持三种分析方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用老的方式&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/kinesisanalytics/latest/dev/what-is.html&#34;&gt;SQL 应用程序&lt;/a&gt;进行分析处理，不能使用编程语言python/Scala来调用api来进行精细化操作(需要定义UDF包提供使用),以及即席查询；&lt;/li&gt;
&lt;li&gt;使用基于 &lt;a href=&#34;https://flink.apache.org/&#34;&gt;Apache Flink&lt;/a&gt; 的开源库在 Kinesis Data Analytics 中构建 Java ,Scala 和Python 应用程序,Apache Flink 是处理数据流的常用框架和引擎，Kinesis Data Analytics现使用flink支持最高版本是&lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.13/docs/learn-flink/overview/&#34;&gt;1.13&lt;/a&gt;；在开发应用时，需要打印日志，以便使用CloudWatch 日志监控应用程序的性能和错误状况；如果应用程序出现bug或者服务异常中断可以使用检查点(&lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.13/docs/ops/state/checkpoints/&#34;&gt;CheckPoints&lt;/a&gt;)和保存点(&lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.13/docs/ops/state/savepoints/&#34;&gt;SavePoints&lt;/a&gt; 生成&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/kinesisanalytics/latest/java/how-fault-snapshot.html&#34;&gt;快照&lt;/a&gt;)在 Kinesis Data Analytics 应用程序中实现容错功能; 同时Kinesis Data Analytics &lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/kinesisanalytics/latest/java/how-scaling.html&#34;&gt;&lt;strong&gt;可弹性扩缩&lt;/strong&gt;&lt;/a&gt;应用程序的并行度，以适应大多数场景下的源数据吞吐量和操作复杂性，Kinesis Data Analytics 监控应用程序的资源 (CPU) 使用情况，并相应地弹性地向上或向下扩展应用程序的并行度; 使用算子(&lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.13/docs/dev/datastream/operators/overview/#operators&#34;&gt;operators&lt;/a&gt;)进行数据流拓扑计算；同时通过&lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.13/docs/connectors/datastream/overview/&#34;&gt;connector&lt;/a&gt;可直接引入jar包接入数据源或者sink到下游服务，可以在mvn库中找到，比如&lt;a href=&#34;https://mvnrepository.com/artifact/org.apache.flink/flink-sql-connector-kinesis&#34;&gt;kinesis stream connector&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;在基于 &lt;a href=&#34;https://flink.apache.org/&#34;&gt;Apache Flink&lt;/a&gt; 的开源库构建应用程序的基础上，结合&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/glue/latest/dg/how-it-works.html&#34;&gt;Glue&lt;/a&gt;定义数据库表存放数据catalog元数据，通过&lt;a href=&#34;https://zeppelin.apache.org/&#34;&gt;zeppelin&lt;/a&gt;增加了可视化即席查询, 直接可以在notebook上编写flink 流/批**&lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-master/docs/dev/table/sql/overview/&#34;&gt;SQL&lt;/a&gt;**(notice: **flinkSQL和KDA SQL有所不同，特别是在window上有些区别**), 以及编写调用flink API的Scala,Python程序, 具体见&lt;a href=&#34;https://zeppelin.apache.org/docs/0.9.0/interpreter/flink.html&#34;&gt;zeppelin flink解释器&lt;/a&gt;; 这种方式是相对于第二种方式，在方便运维管理的基础上更加容易上手，直接在notebook上就可以进行即席查询, 查询会话还可以保留或存放本地，还可以作为测试开发调试的平台，构建好处理程序，可直接转化成&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/kinesisanalytics/latest/java/how-notebook-durable.html&#34;&gt;持久化的应用程序部署&lt;/a&gt;；当然这部分费用相比前面的分析方式相对多些，启动的studio notebook 费用，Kinesis 处理单元(KPU)将按小时收费；可参考&lt;a href=&#34;https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-zeppelin-examples.html&#34;&gt;实例教程&lt;/a&gt;，&lt;a href=&#34;https://aws.amazon.com/cn/blogs/big-data/query-your-data-streams-interactively-using-kinesis-data-analytics-studio-and-python/&#34;&gt;使用 Kinesis Data Analytics Studio 和 Python 以交互方式查询数据流&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整体来说： &lt;a href=&#34;https://aws.amazon.com/kinesis/data-analytics/&#34;&gt;Amazon Kinesis Data Analytics&lt;/a&gt; 可以轻松地实时分析流数据，并使用标准 SQL、Python 和 Scala 构建由 Apache Flink 提供支持的流处理应用程序。特别是notebook功能只需在AWS 管理控制台中单击几下，写下分析SQL，就可以启动无服务器笔记本来查询数据流并在几秒钟内获得结果。Kinesis Data Analytics 降低了构建和管理 Apache Flink 应用程序的复杂性。&lt;/p&gt;
&lt;p&gt;离线处理的数据主要是通过&lt;a href=&#34;&#34;&gt;AWS Kinesis Data Firehose&lt;/a&gt; 传输流写入下游服务存储，将数据写入湖仓系统中, 用于后续的数据分析，以及前期规划好的数据分析；选用firehose的原因是有原始备份机制存放于S3中，即使数据传输错误时，数据传输中不会丢失数据，同时内置lambd函数在传输之前将数据转化处理，同时也支持用Glue定义表来转换大数据相关的记录格式;&lt;/p&gt;
&lt;p&gt;原始分析数据直接存放于&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/userguide/Welcome.html&#34;&gt;S3&lt;/a&gt;中，11个9的保障可以非常可靠保证数据不丢失，通过&lt;a href=&#34;https://aws.amazon.com/cn/s3/storage-classes/glacier/&#34;&gt;Glacier&lt;/a&gt;持久冷热存放，降低成本，方便后面追查数据，以及通过Athena查询引擎结合Glue来定义表从S3中挖掘出更有价值的数据；数据存放下来之后，结合大数据相关平台，&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/emr/latest/ManagementGuide/emr-what-is-emr.html&#34;&gt;EMR&lt;/a&gt;进行海量数据处理(PB级别)；同时结合&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/glue/latest/dg/what-is-glue.html&#34;&gt;Glue&lt;/a&gt; 进行ETL 数据处理，集成编排成DAG工作流，可视化管理这些ETL任务作业，也可以迁移调度平台比如Azkaban的工作流迁移至Glue ETL工作流,参考&lt;a href=&#34;https://aws.amazon.com/cn/blogs/china/preliminary-study-on-selection-of-aws-glue-scheduling-tool/&#34;&gt;Amazon Glue ETL作业调度工具选型初探&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;提前业务场景数据分析建模，使用&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/redshift/latest/gsg/concepts-diagrams.html&#34;&gt;Redshift&lt;/a&gt;来存放不同维度(DIM)的表，分层(ODS-&amp;gt;&lt;strong&gt;DWD-&amp;gt;DWM-&amp;gt;DWS&lt;/strong&gt;)建设数据仓库； 选用redshift性价比比较高，开箱即用，存放结构化，半结构化数据，数据列式存储，分片存放，计算和存储分离，很方便无服务化，在数秒内轻松运行和扩展分析，而无需调配和管理数据仓库; 和数据湖打通，可以使用 &lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/redshift/latest/gsg/data-lake.html&#34;&gt;Redshift Spectrum&lt;/a&gt; 在 Amazon S3 文件中查询数据，而不必将数据加载到 Amazon Redshift 表中，提高关联查询；还可以对接机器学习&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/redshift/latest/dg/machine_learning.html&#34;&gt;ML&lt;/a&gt;，通过CREATE MODEL DDL语句下推到Amazon &lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/sagemaker/latest/dg/whatis.html&#34;&gt;SageMaker&lt;/a&gt;，从S3中加载数据进行训练；&lt;/p&gt;
&lt;h3 id=&#34;数据分析&#34;&gt;数据分析&lt;/h3&gt;
&lt;p&gt;主要是通过分析引擎从数据存储获取数据，根据维度展现看板，进行实时数据查看，离线分析，以及可视化即席分析：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实时结果数据查看：通过&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/Introduction.html&#34;&gt;DynamoDB&lt;/a&gt;获取实时结果数据，主要是Key/Value数据，同时查询速度很快，利用&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/DAX.html&#34;&gt;DAX&lt;/a&gt;实现内存中加速；通过&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/welcome.html&#34;&gt;lambda&lt;/a&gt;对接&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/apigateway/latest/developerguide/welcome.html&#34;&gt;API Gateway&lt;/a&gt;提供数据接口，方便业务场景实时展现，比如监控查看异常数据，访问计数等结果展现；这些结果数据可以直接通过&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/sns/latest/dg/welcome.html&#34;&gt;SNS&lt;/a&gt;发送邮件或者短信进行通知；&lt;/li&gt;
&lt;li&gt;通过&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/opensearch-service/latest/developerguide/what-is.html&#34;&gt;OpenSearch&lt;/a&gt;提供实时搜索服务，比如日志搜索实时定位追查问题，通过KDA实时分析写入；在线检索商品，这些数据主要来源于数据库，异构成OpenSearch索引数据进行检索，可通过&lt;a href=&#34;https://ververica.github.io/flink-cdc-connectors/master/&#34;&gt;flink CDC&lt;/a&gt; on &lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/emr/latest/ReleaseGuide/emr-flink.html&#34;&gt;EMR&lt;/a&gt;来同步数据到OpenSearch中；&lt;/li&gt;
&lt;li&gt;S3中的数据通过&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/athena/latest/ug/what-is.html&#34;&gt;Athena&lt;/a&gt;在Glue/Hive上建表元数据，使用&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/athena/latest/ug/ddl-sql-reference.html&#34;&gt;SQL&lt;/a&gt;查询，几分钟内可以查询到结果;&lt;/li&gt;
&lt;li&gt;存放在&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/redshift/latest/gsg/concepts-diagrams.html&#34;&gt;Redshift&lt;/a&gt;数据仓库中的数据，通过Amazon &lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/quicksight/latest/user/welcome.html&#34;&gt;QuickSight&lt;/a&gt;接入进行BI分析，响应时间在秒级别，只需要在界面上选择图表组合成一个仪表盘展现即可，方便快速决策；&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/quicksight/latest/user/regions.html&#34;&gt;支持AWS区域接入IP范围&lt;/a&gt;;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;组织用户角色权限管理&#34;&gt;组织用户角色权限管理&lt;/h3&gt;
&lt;p&gt;以上这些谈到的服务需要进行安全访问，通过&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/iam/&#34;&gt;IAM&lt;/a&gt;定义策略角色分配权限进行&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/service-authorization/latest/reference/reference.html&#34;&gt;服务授权&lt;/a&gt;，来进行安全访问，有两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;服务资源之间的访问，需要分配读写权限，需要把这些策略赋予莫个角色，然后资源通过这个赋予资源权限的角色来访问对应资源；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还有就是操作者访问服务资源，需要分配不同资源的读写权限，可以根据公司组织架构来管理每个员工的权限使用范围，非常方便；&lt;/p&gt;
&lt;p&gt;角色权限设置规则如下：&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/IAM/latest/UserGuide/id.html&#34;&gt;IAM身份&lt;/a&gt;设置用户组 dev, op, biz user，后续 细分在按组织部门进行建组；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;op: 理论上构建完一组资源可以分配对应权限策略角色Role，给予服务资源的运维管理操作；&lt;/li&gt;
&lt;li&gt;dev: 只有使用开发资源权限，比如lambda编辑发布权限，数据库读写权限，而非管理删除权限策略Role；&lt;/li&gt;
&lt;li&gt;bizUser: 业务操作者，大部分只有读权限策略Role，没有写操作权限；&lt;/li&gt;
&lt;li&gt;admin: 管理员，Administrator权限，可以访问任何资源&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有是创建的应用是给外部服务用户使用，比如Web,移动端用户，通过Amazon &lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/cognito/&#34;&gt;Cognito&lt;/a&gt;来注册登录管理用户，也可以通过第三方登录进行身份验证；两个主要组件是用户池和身份池：用户池是为应用程序提供注册和登录选项的用户目录，身份池授予用户访问其他 AWS 服务的权限。请参考&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/cognito/latest/developerguide/cognito-scenarios.html&#34;&gt;Amazon Cognito常见场景&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;h3 id=&#34;case-实时异常事件报警展现&#34;&gt;CASE 实时异常事件报警展现&lt;/h3&gt;
&lt;p&gt;打点事件数据：（实体数据，通过同步实体表数据流进行关联jion操作）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;field&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;desc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;eventId&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;用户行为事件id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;action&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;统一定义的事件动作，比如 浏览文档：viewDoc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;userId&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;触发事件的用户id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;createdAt&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;触发事件时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;objectId&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;操作对象id, 比如文档id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bizId&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;所属业务id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;errorMsg&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;错误信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;实时过滤出异常事件KDA SQL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;c1&#34;&gt;-- ** Continuous Filter ** 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- Performs a continuous filter based on a WHERE condition.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;--          .----------.   .----------.   .----------.              
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;--          |  SOURCE  |   |  INSERT  |   |  DESTIN. |              
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- Source--&amp;gt;|  STREAM  |--&amp;gt;| &amp;amp; SELECT |--&amp;gt;|  STREAM  |--&amp;gt;Destination
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;--          |          |   |  (PUMP)  |   |          |              
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;--          &amp;#39;----------&amp;#39;   &amp;#39;----------&amp;#39;   &amp;#39;----------&amp;#39;               
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- STREAM (in-application): a continuously updated entity that you can SELECT from and INSERT into like a TABLE
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- PUMP: an entity used to continuously &amp;#39;SELECT ... FROM&amp;#39; a source STREAM, and INSERT SQL results into an output STREAM
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- Create output stream, which can be used to send to a destination
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- reference: 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- https://docs.aws.amazon.com/zh_cn/kinesisanalytics/latest/sqlref/analytics-sql-reference.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- https://docs.aws.amazon.com/zh_cn/kinesisanalytics/latest/dev/streaming-sql-concepts.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- https://docs.aws.amazon.com/zh_cn/kinesisanalytics/latest/sqlref/kinesis-analytics-sqlref.pdf
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- abnormality event stream
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;REPLACE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STREAM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DESTINATION_SQL_STREAM&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;eventId&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;userId&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;objectId&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bizId&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;errorMsg&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;createdAt&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- Filter errorMsg like panic/error pump
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;REPLACE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PUMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ERROR_PANIC_STREAM_PUMP&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DESTINATION_SQL_STREAM&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STREAM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;eventId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;userId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;objectId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bizId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;errorMsg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;createdAt&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SOURCE_SQL_STREAM_001&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;errorMsg&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIKE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%[PANIC]%&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;errorMsg&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIKE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%[panic]%&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;errorMsg&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIKE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%[ERROR]%&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;errorMsg&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIKE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%[error]%&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每1分钟warn数目超过10次的SQL(滚动窗口)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;REPLACE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STREAM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DESTINATION_SQL_STREAM&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;eventId&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;userId&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;objectId&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bizId&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;errorMsg&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;createAt&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;INGREST_ROW_TIME&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;APPROXIMATE_ARRIVAL_TIME&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- Filter errorMsg like warning pump
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- Aggregation with time window(u can use stagger windows,tumbling windows, sliding windows)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- use tumbling windows for this case
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;REPLACE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PUMP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;STREAM_PUMP&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DESTINATION_SQL_STREAM&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STREAM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;eventId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;userId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;objectId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bizId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;createAt&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;errorMsg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STEP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SOURCE_SQL_STREAM_001&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ROWTIME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;INTERVAL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;60&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECOND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;INGREST_ROW_TIME&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STEP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SOURCE_SQL_STREAM_001&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;APPROXIMATE_ARRIVAL_TIME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;INTERVAL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;60&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECOND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;APPROXIMATE_ARRIVAL_TIME&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- STEP(&amp;#34;SOURCE_SQL_STREAM_001&amp;#34;.EVENT_TIME BY INTERVAL &amp;#39;60&amp;#39; SECOND) AS &amp;#34;EVENT_TIME&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;action_warn_count&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SOURCE_SQL_STREAM_001&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;errorMsg&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIKE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;% WARNNING %&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;errorMsg&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIKE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;% warnning %&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GROUP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STEP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SOURCE_SQL_STREAM_001&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ROWTIME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;INTERVAL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;60&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECOND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STEP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SOURCE_SQL_STREAM_001&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;APPROXIMATE_ARRIVAL_TIME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;INTERVAL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;60&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECOND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- STEP(&amp;#34;SOURCE_SQL_STREAM_001&amp;#34;.EVENT_TIME BY INTERVAL &amp;#39;60&amp;#39; SECOND) 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Having&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;action_warn_count&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;服务构建&#34;&gt;服务构建&lt;/h2&gt;
&lt;p&gt;基于以上服务搭建，需要用户去aws云平台上点击，配置使用， 特别是构建表，以及数据传输，属性和安全访问权限角色的管理，随着业务复杂度变高，基础服务也随之增多，可配置化的东西越来越多，会带来灾难性的后果，最终变得不可控，人力管理运维成本增加；aws平台提供了AWS CloudFormation 允许您通过将基础设施视为代码来建模、预置和管理 AWS 和第三方资源。即IaC，也是Devops经常所做的事情，可以使用相关IaC工具来自动化构建一个系统，常用的场景是CI/CD支持快速变化的业务需求开发；AWS一直提供基础服务的配置API，有相关的SDK可供使用，也有&lt;code&gt;aws&lt;/code&gt; 工具来操作这些基础服务资源； 后面提供了一种开源软件开发框架AWS Cloud Development Kit (AWS &lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/cdk/v2/guide/home.html&#34;&gt;CDK&lt;/a&gt;)，可使用熟悉的编程语言来定义云应用程序资源；将云上硬件资源可编程化，可以很方便的实现自动化运维管理，充分利用云上的资源来组装construct成一个模块栈stack, 各个模块栈最终合成一个落地解决方案，方便开箱即用(安装软件一样)，降低云构建的复杂性；cdk construct分3个层次的封装，L1是最低级别初始封装，直接对应CloudFormation配置模版文件映射，称之为CFN 资源，必须配置每一项属性，需要深入了解资源模型的详细信息；L2是是对了L1的组合封装，使用资源属性默认值，比如new VPC；L3则是一种模式(pattern)，通过多种资源组合成一个常见资源架构，比如 new Fargate无服务化容器集群；具体参考见：&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/cdk/v2/guide/constructs.html&#34;&gt;constructs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;a href=&#34;https://cdkworkshop.com&#34;&gt;cdk workshop&lt;/a&gt; 大概花半天时间学习这里的demo就可以试着搭建相关的服务， 也有更多的&lt;a href=&#34;https://awesome-aws-workshops.com/&#34;&gt;awesome workshop&lt;/a&gt;可供参考和学习的，并且 &lt;a href=&#34;https://aws.amazon.com/blogs&#34;&gt;aws blog&lt;/a&gt;  &lt;a href=&#34;https://aws.amazon.com/cn/builders-library&#34;&gt;builders&#39; lib&lt;/a&gt;也会有很多相关的解决方案提供学习；当然需要很好的架构aws服务，需要多落地实践，深入服务细节(查看帮助文档&lt;a href=&#34;https://docs.aws.amazon.com/&#34;&gt;docs&lt;/a&gt;)，结合需求，才能构建一个相对完美的解决方案；当然前期生产落地需要使用CDK来进行架构推理。&lt;/p&gt;
&lt;p&gt;这里结合上述需求，使用CDK来搭建一些stack, 方便数据流分析管道的组装，后续也方便与其他contstucts进行组装；主要是分为以下stack:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CDK-Workshop-Lambda-KDS-stack&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;APIGateway-&amp;gt;lambda(put KDS record &amp;amp; hit counter in dynamodb)-&amp;gt;lambda(hello)  dynamotableviewer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DMS-KDS-stack&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;KDS-KDA-sql-Lambda-Dynamodb-stack&lt;/strong&gt;: KDS-&amp;gt;KDA-&amp;gt;lambda-&amp;gt;dynamodb dynamotableviewer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;KDS-KDF-S3-stack&lt;/strong&gt;: KDS-&amp;gt;KDF-&amp;gt;S3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;KDS-KDA-flink-OpenSearch-stack&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;KDS-KDA-flink-KDS-stack: eg: for near-realtime-warehouse, make a pipeline (ODS-&amp;gt;&lt;strong&gt;DWD-&amp;gt;DWM-&amp;gt;DWS&lt;/strong&gt;) sink to Redshift; like this &lt;a href=&#34;https://cloud.tencent.com/developer/article/1919594&#34;&gt;tencent news Pipeline pattern&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;KDS-KDF-Redshift-stack:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redshift-QuickSight-stack&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S3-Glue-Athena-stack&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里主要部署CDK-Workshop-Lambda-KDS-stack, KDS-KDA-sql-Lambda-Dynamodb-stack 和KDS-KDF-S3-stack 搭建SQL流式处理用户行为数据,具体见&lt;a href=&#34;https://github.com/weedge/user-behavior-analytics-cdk&#34;&gt;代码&lt;/a&gt;；其他stack可以后续进行扩展进行构建，推理整体基础设施架构。&lt;/p&gt;
&lt;h3 id=&#34;构建&#34;&gt;构建&lt;/h3&gt;
&lt;p&gt;首先需要安装CDK, 具体查看&lt;a href=&#34;https://aws.amazon.com/cn/getting-started/guides/setup-cdk/&#34;&gt;入门教程&lt;/a&gt;，执行如下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# download code to start&lt;/span&gt;
git clone https://github.com/weedge/user-behavior-analytics-cdk.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; user-behavior-analytics-cdk
&lt;span class=&#34;c1&#34;&gt;# tips: cdk load cdk.json + cdk.context.json to run by js on node&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# list stacks&lt;/span&gt;
cdk ls
&lt;span class=&#34;c1&#34;&gt;# deploy KDS-KDA-sql-Lambda-DynamoDB-stack with KDS-KDF-S3-stack(need created kinesis data stream)&lt;/span&gt;
cdk deploy KDS-KDA-sql-Lambda-DynamoDB-stack
&lt;span class=&#34;c1&#34;&gt;# deploy CDK-Workshop-Lambda-KDS-stack for hit event stream; lambda func put record to KDS, dependcy KDS&lt;/span&gt;
cdk deploy CDK-Workshop-Lambda-KDS-stack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署完之后，会输出kinesis数据流的名称以及用于查看数据结果地址；&lt;/p&gt;
&lt;p&gt;开始写入测试数据，需要使用python3, 使用pip3 安装依赖包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# init python virtural env&lt;/span&gt;
python3 -m venv .venv &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; .venv/bin/activate 
&lt;span class=&#34;c1&#34;&gt;# install boto3  faker&lt;/span&gt;
pip3 install boto3 faker
&lt;span class=&#34;c1&#34;&gt;# run test script, wait KDA run, put record to KDS&lt;/span&gt;
python3 src/scripts/producer-kds-test.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行测试脚本，输入region地域名称,比如us-east-1, 等待启动后，输入数据流名称，开始发送数据；&lt;/p&gt;
&lt;p&gt;每1秒发一次数据写入KDS中，发了10次含有错误事件，发了10次随机事件，总共20条；&lt;/p&gt;
&lt;p&gt;也可以使用aws提供KDS数据生成器：https://github.com/awslabs/amazon-kinesis-data-generator&lt;/p&gt;
&lt;p&gt;从刚才部署输出结果地址查看含有错误的数据已经有10条展现出来(数据获取式前端每隔几秒轮训获取api数据，实时展现可通过&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/apigateway/latest/developerguide/apigateway-websocket-api.html&#34;&gt;API Gateway WebSocket&lt;/a&gt; 来支持)；历史数据可以在KDF配置的S3目标中点击查看，原始数据可以下载gz包进行解压查看;&lt;/p&gt;
&lt;p&gt;通过使用提供给前端访问的事件api(api地址在部署CDK-Workshop-Lambda-KDS-stack后输出的访问地址)来写入异常&lt;code&gt;[error]&lt;/code&gt; 数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -XPOST -iv https://&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;APIGateway&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;.execute-api.&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;region&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;.amazonaws.com/prod/event -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;eventId&amp;#34;:&amp;#34;1-1-1&amp;#34;,&amp;#34;bizId&amp;#34;:&amp;#34;123123&amp;#34;,&amp;#34;objectId&amp;#34;:&amp;#34;123&amp;#34;,&amp;#34;action&amp;#34;:&amp;#34;test&amp;#34;,&amp;#34;errorMsg&amp;#34;:&amp;#34;[error]&amp;#34;,&amp;#34;userId&amp;#34;:&amp;#34;1231321&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过刚才部署KDS-KDA-sql-Lambda-DynamoDB-stack的结果地址可以 查看异常数据已经实时写入。&lt;/p&gt;
&lt;p&gt;最后将部署资源清除，依赖删除(和卸载软件一样)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# destroy resources with dependent resources&lt;/span&gt;
cdk destroy KDS-KDF-S3-stack
cdk destroy KDS-KDA-sql-Lambda-DynamoDB-stack
cdk destroy CDK-Workshop-Lambda-KDS-stack
&lt;span class=&#34;c1&#34;&gt;# or cdk destroy --all&lt;/span&gt;
cdk destroy --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;代码结构&#34;&gt;代码结构&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;├── cmd                              -- golang cmd bin dir
├── docs                             -- help doc
├── infra                            -- infrastructures stack
│   └── lib                          -- cdk constuct in stack
├── src                              -- source code to run
│   ├── kinesis-analytics-pyflink    -- KDA python scripts use flink python api 
│   ├── kinesis-analytics-sql        -- KDA sql
│   ├── lambda                       -- js,python,golang lambda func 
│   ├── redshift-sql                 -- redshift sql 
│   └── scripts                      -- local run test code by use aws sdk
├── test                             -- test cdk logic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;sam cli &lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/serverless-application-model/latest/developerguide/serverless-sam-cli-using-invoke.html&#34;&gt;local debug lambda&lt;/a&gt;, &lt;strong&gt;&lt;a href=&#34;https://catalog.workshops.aws/complete-aws-sam/en-US&#34;&gt;The Complete AWS SAM workshop&lt;/a&gt;&lt;/strong&gt;,  &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PiQ_eZFO2GU&amp;amp;list=PL2yQDdvlhXf_lYR5Ntvr9V5iVYv5rcbNc&amp;amp;index=6&#34;&gt;AWS re:Invent 2022 - Best practices for advanced serverless developers&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;streaming cdk: &lt;a href=&#34;https://github.com/aws-samples/streaming-solution-aws-cdk&#34;&gt;https://github.com/aws-samples/streaming-solution-aws-cdk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;kds and msk cdk: &lt;a href=&#34;https://github.com/aws-solutions/streaming-data-solution-for-amazon-kinesis-and-amazon-msk&#34;&gt;https://github.com/aws-solutions/streaming-data-solution-for-amazon-kinesis-and-amazon-msk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redshift cdk : &lt;a href=&#34;https://github.com/miztiik/redshift-demo&#34;&gt;https://github.com/miztiik/redshift-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Glue cdk: &lt;a href=&#34;https://github.com/aws-samples/glue-workflow-aws-cdk&#34;&gt;https://github.com/aws-samples/glue-workflow-aws-cdk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;opensearch cdk: &lt;a href=&#34;https://www.luminis.eu/blog/cloud-en/deploying-a-secure-aws-elasticsearch-cluster-using-cdk/&#34;&gt;https://www.luminis.eu/blog/cloud-en/deploying-a-secure-aws-elasticsearch-cluster-using-cdk/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mysql cdk: &lt;a href=&#34;https://aws.amazon.com/cn/blogs/infrastructure-and-automation/use-aws-cdk-to-initialize-amazon-rds-instances/&#34;&gt;https://aws.amazon.com/cn/blogs/infrastructure-and-automation/use-aws-cdk-to-initialize-amazon-rds-instances/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mysql dms cdk: &lt;a href=&#34;https://aws.amazon.com/cn/blogs/database/accelerate-data-migration-using-aws-dms-and-aws-cdk/&#34;&gt;https://aws.amazon.com/cn/blogs/database/accelerate-data-migration-using-aws-dms-and-aws-cdk/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;aurora mysql dms kds opensearch cdk: &lt;a href=&#34;https://github.com/aws-samples/aws-dms-cdc-data-pipeline.git&#34;&gt;https://github.com/aws-samples/aws-dms-cdc-data-pipeline.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;kda-flink-py: &lt;a href=&#34;https://aws.amazon.com/cn/blogs/china/python-stream-data-processing-and-analysis-using-pyflink-in-amazon-kinesis-data-analytics/&#34;&gt;https://aws.amazon.com/cn/blogs/china/python-stream-data-processing-and-analysis-using-pyflink-in-amazon-kinesis-data-analytics/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;kda-zeppelin-flink-py: &lt;a href=&#34;https://aws.amazon.com/cn/blogs/big-data/query-your-data-streams-interactively-using-kinesis-data-analytics-studio-and-python/&#34;&gt;https://aws.amazon.com/cn/blogs/big-data/query-your-data-streams-interactively-using-kinesis-data-analytics-studio-and-python/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.aws.amazon.com/pdfs/whitepapers/latest/microservices-on-aws/microservices-on-aws.pdf&#34;&gt;Implementing Microservices on AWS&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://d1.awsstatic.com/whitepapers/aws-cloud-data-ingestion-patterns-practices.pdf&#34;&gt;AWS Cloud Data Ingestion Patterns and Practices&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://catalog.us-east-1.prod.workshops.aws/workshops/c342c6d1-2baf-4827-ba42-52ef9eb173f6/en-US/flink-on-kda&#34;&gt;Flink-on-KDS Workshop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://catalog.us-east-1.prod.workshops.aws/workshops/2300137e-f2ac-4eb9-a4ac-3d25026b235f/en-US&#34;&gt;Real time streaming with kinesis Workshop&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>全栈开发</title>
      <link>https://weedge.github.io/post/shop/</link>
      <pubDate>Sun, 02 Jan 2022 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/shop/</guid>
      
        <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;以前工作中有过前端的开发经验，使用后端模版Smarty(主要是外部需求，现在新项目中应该很少使用这个了)，前端模版Mustache，页面中使用 js jquery交互逻辑，直接服用一些开源的UI组件Bootstrap，开源的后台UI系统，主要是建设内部后台的时候使用，自动生成CRUD页面；前端的技术栈更新迭代相对后端快些，通过以全栈技术栈为切入点，通过一个简单的系统，学习下最新技术栈工具，主要目的如下：&lt;/p&gt;
&lt;p&gt;根据需求，实现一个简单功能的购物系统，目的是为了学习ts-&amp;gt;js on node.js全栈开发，了解整体开发构建工具，熟悉下工具开发流程，主要还是了解前端框架工具的使用，以及熟悉通过js运行时环境运行在后端服务上的应用开发工具，以便在后续开发后台系统的时候可以熟练使用这些技术进行开发，这些工具的设计思想可以借鉴到其他后端业务开发语言中。&lt;/p&gt;
&lt;h2 id=&#34;功能要求&#34;&gt;功能要求&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;⽤户可以浏览商品，提供按商品名字搜索功能。&lt;/li&gt;
&lt;li&gt;⽤户可以下单购买某样商品（⽀付过程可以省略），购买成功后系统需要异步通知下游系统（如仓库 系统、物流系统等，下游系统可简单实现）。&lt;/li&gt;
&lt;li&gt;提供后台管理⻚⾯录⼊商品，包括商品名称、商品描述、商品价格、库存等。&lt;/li&gt;
&lt;li&gt;要求记录⽤户访问⽇志，供审计使⽤。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;实现要求&#34;&gt;实现要求&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;前端使⽤Vue.js + elementUI，后台使⽤ AdonisJS 框架（AdonisJS 版本要求5.0以上）。&lt;/li&gt;
&lt;li&gt;数据库使⽤ mysql，结合 AdonisJS 的 ORM 能⼒。&lt;/li&gt;
&lt;li&gt;设计时需要考虑必要的系统安全性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;设计实现&#34;&gt;设计实现&lt;/h2&gt;
&lt;h3 id=&#34;需求分析&#34;&gt;需求分析&lt;/h3&gt;
&lt;p&gt;整体交互主要是实现购买系统，以及用户购买商品的访问日志，以及用户行为日志，给审计系统，进行漏洞分析等，考虑到前期用户比较少，交互使用，5天设计开发时间，先提供v1简单版本，满足商家和买家用户的基本购买功能&lt;/p&gt;
&lt;p&gt;买家基本需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过页面查看上架商品列表；查看商品详情页；通过商品名关键字搜索商品；&lt;/li&gt;
&lt;li&gt;购买商品，查看订单(为了简化需求，无购物车功能，假设用户订单只能购买一件商品，及用户和订单是一对多，订单和商品是多对一)；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;卖家基本需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;后台录入查看修改删除商品(一个用户编辑多个商品项，一个商品项也可以给多个用户编辑，及用户和商品是多对多，为了简单考虑，不考虑协同的情况)；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后台需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;记录访问日志，审计需求；&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;功能设计&#34;&gt;功能设计&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Shop-frontend  数据页面展现，满足商品列表展现；通过商品名搜索；详情页查看；&lt;/li&gt;
&lt;li&gt;Shop-backend  商品后台，提供http RESTful api ，满足页面需求，以及相应auth权限验证，日志记录，购买订单发送；&lt;/li&gt;
&lt;li&gt;Shop-admin-frontend 商品数据管理页面展现，操作商品增删查改功能页面；&lt;/li&gt;
&lt;li&gt;Shop-admin-backend 商品数据管理后台，提供http RESTful api， 满足页面CRUD功能；&lt;/li&gt;
&lt;li&gt;Shop-backend  记录用户访问日志， 适用pb格式记录日志，产生日志实时写入消息队列中，提供给审计系统使用&lt;/li&gt;
&lt;li&gt;其他服务；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整体架构设计如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weedge/mypic/master/shop-system.drawio.png&#34; alt=&#34;simple-shop-system&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据库设计&#34;&gt;数据库设计&lt;/h3&gt;
&lt;p&gt;单独数据库实例shop, 简单实现，未根据未来几年的数据量来评估表的容量，分库分表的情况等。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;商品表  tbl_shop_items&lt;/p&gt;
&lt;p&gt;(Tips: 这里为了简化，没有定义复杂业务实体关系了，比如产品单元(CPU), 商品单元(SKU)，产品容器(Container) 等，不要脱离业务耍流氓)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;商品id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;varchar(32)&lt;/td&gt;
&lt;td&gt;商品名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;desc&lt;/td&gt;
&lt;td&gt;varchar(1024)&lt;/td&gt;
&lt;td&gt;商品描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;price&lt;/td&gt;
&lt;td&gt;unsigned int&lt;/td&gt;
&lt;td&gt;价格（分）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stock&lt;/td&gt;
&lt;td&gt;unsigned int&lt;/td&gt;
&lt;td&gt;库存数目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sell_cn&lt;/td&gt;
&lt;td&gt;unsigned int&lt;/td&gt;
&lt;td&gt;售卖数目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is_released&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;是否上架&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is_soldout&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;是否售匿&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is_del&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;是否删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;owner_id&lt;/td&gt;
&lt;td&gt;unsigned int64&lt;/td&gt;
&lt;td&gt;添加者用户id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;create_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;创建时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;update_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;修改时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ext&lt;/td&gt;
&lt;td&gt;varchar&lt;/td&gt;
&lt;td&gt;扩展字段&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;用户商品操作表 tbl_user_items&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;unsigned int64&lt;/td&gt;
&lt;td&gt;操作id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user_id&lt;/td&gt;
&lt;td&gt;unsigned int64&lt;/td&gt;
&lt;td&gt;商品管理后台用户id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;item_id&lt;/td&gt;
&lt;td&gt;unsigned int64&lt;/td&gt;
&lt;td&gt;商品id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;create_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;创建时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;update_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;修改时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ext&lt;/td&gt;
&lt;td&gt;varchar&lt;/td&gt;
&lt;td&gt;扩展字段&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;用户订单表  tbl_user_orders （为了简化，一个用户只能选一个商品直接下单购买，无购物车）&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user_id&lt;/td&gt;
&lt;td&gt;unsigned int64&lt;/td&gt;
&lt;td&gt;用户id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;item_id&lt;/td&gt;
&lt;td&gt;unsigned int64&lt;/td&gt;
&lt;td&gt;商品id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;order_id&lt;/td&gt;
&lt;td&gt;unsigned int64&lt;/td&gt;
&lt;td&gt;订单id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pay_amount&lt;/td&gt;
&lt;td&gt;unsigned int64&lt;/td&gt;
&lt;td&gt;支付金额&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;create_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;创建时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;update_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;修改时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ext&lt;/td&gt;
&lt;td&gt;varchar&lt;/td&gt;
&lt;td&gt;扩展字段&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;用户表 tbl_users (users)&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;unsigned int64&lt;/td&gt;
&lt;td&gt;用户id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;varchar&lt;/td&gt;
&lt;td&gt;用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;email&lt;/td&gt;
&lt;td&gt;varchar&lt;/td&gt;
&lt;td&gt;邮件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td&gt;varchar&lt;/td&gt;
&lt;td&gt;加密密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remember_me_token&lt;/td&gt;
&lt;td&gt;varchar&lt;/td&gt;
&lt;td&gt;api Opaque Access Token&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is_admin&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;是否是管理员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;created_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;创建时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updated_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;修改时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ER关系：&lt;/p&gt;
&lt;p&gt;[tbl_shop_items] &amp;lt;-N&amp;mdash;1-&amp;gt; (create) [tbl_users]&lt;/p&gt;
&lt;p&gt;[tbl_shop_items] &amp;lt;-1&amp;mdash;N-&amp;gt; [tbl_user_items] (record)   &amp;lt;-M&amp;mdash;1-&amp;gt; [tbl_users]&lt;/p&gt;
&lt;p&gt;[tbl_shop_items] &amp;lt;-1&amp;mdash;N-&amp;gt; [tbl_user_orders] (order) &amp;lt;-M&amp;mdash;1-&amp;gt; [users]&lt;/p&gt;
&lt;h3 id=&#34;消息设计&#34;&gt;消息设计&lt;/h3&gt;
&lt;p&gt;订单生成后，通知下游系统，订阅消息，暂不考虑。&lt;/p&gt;
&lt;h3 id=&#34;后端接口设计&#34;&gt;后端接口设计&lt;/h3&gt;
&lt;p&gt;因为逻辑简单，就没有画出接口功能的时序图和流程图。&lt;/p&gt;
&lt;h4 id=&#34;shop-backend--服务端口2021&#34;&gt;Shop-backend  服务端口：2021&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;GET /shop/api/v1/itmes  商品列表&lt;/li&gt;
&lt;li&gt;GET /shop/api/v1/items/:id 商品详情&lt;/li&gt;
&lt;li&gt;GET /shop/api/v1/items/search?q=** 更具名称搜索商品&lt;/li&gt;
&lt;li&gt;POST /shop/api/v1/order  商品下单&lt;/li&gt;
&lt;li&gt;GET  /shop/api/v1/orders/:orderId  获取订单详情&lt;/li&gt;
&lt;li&gt;GET /shop/api/v1/users/:uid/orders 用户商品订单列表&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;shop-admin-backend-服务端口2022&#34;&gt;Shop-admin-backend 服务端口：2022&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;shop items CRUD RESTful api  for resource methods (&lt;a href=&#34;https://docs.adonisjs.com/guides/controllers#resourceful-routes-and-controllers&#34;&gt;route RESTful resource&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;POST /shopadmin/api/v1/items/:id/check 商品审核&lt;/li&gt;
&lt;li&gt;GET /shopadmin/api/v1/items/:uid  获取用户创建的商品&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;前端页面交互设计&#34;&gt;前端页面交互设计&lt;/h3&gt;
&lt;p&gt;前端页面调试，本地起页面服务端口进行本地调试&lt;/p&gt;
&lt;h4 id=&#34;shop-frontend-vue-route-component-page&#34;&gt;Shop-frontend (vue route component page)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;/     主页面/搜索结构页，列表页面 ，展示搜索框&lt;/li&gt;
&lt;li&gt;/items/:id   详细页面， 展示购买按钮&lt;/li&gt;
&lt;li&gt;/user/:id/orders 用户商品订单列表页面&lt;/li&gt;
&lt;li&gt;/error  访问不到的页面&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;shop-admin-frontend-crud-edge-template-layout-page&#34;&gt;Shop-admin-frontend (CRUD edge template layout page)&lt;/h4&gt;
&lt;p&gt;CRUD RESTful api  for resource methods to render edge page&lt;/p&gt;
&lt;h2 id=&#34;开发&#34;&gt;开发&lt;/h2&gt;
&lt;p&gt;初期整体使用前端js全栈开发技术栈；Typescript 静态语言，通过 tsc 将ts编译成js 减少错误；通过npm管理依赖包(vim vundle/python pip/php composer/go module/rust cargo)；使用VS Code IDE开发神器编码(All in ONE，可远程ssh连接安装了linux 内核虚拟服务调试学习，查看源码很方便)，安装所需插件。&lt;/p&gt;
&lt;p&gt;具体开发工具如下：&lt;/p&gt;
&lt;p&gt;Typescript 编程语言(JavaScript超级 tsc 4.5.4 ts-&amp;gt;js) + Node.js 运行时环境(v17.2 V8 JavaScript 引擎 from Google Chrome 的内核) + Adonis.js MVC后端框架(v5.0+) + Vue.js前端框架(v3.0+)  + Element-plus UI 前端页面UI模版(v1.3)&lt;/p&gt;
&lt;p&gt;tips：业务模块设计尽量满足SOLID原则，最终满足&lt;strong&gt;高内聚，低耦合&lt;/strong&gt;, 尽量让开发框架来满足。&lt;/p&gt;
&lt;h3 id=&#34;后端服务开发&#34;&gt;后端服务开发&lt;/h3&gt;
&lt;p&gt;shop-backend, shop-admin-backend 服务逻辑， 使用ts语言，AdonisJS (MVC+IoC开发框架,适合后台开发框架) 5.0+开发环境：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.adonisjs.com/guides/database/introduction&#34;&gt;Model&lt;/a&gt;: app ER(entity relationship) data model -&amp;gt; table schema by migration -&amp;gt; create table -&amp;gt; make  table model&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.adonisjs.com/guides/controllers&#34;&gt;Controller&lt;/a&gt;: make controller for api logic&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.adonisjs.com/guides/routing&#34;&gt;Routing&lt;/a&gt;: http RESTful api router (start preload routes)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.adonisjs.com/guides/views/introduction&#34;&gt;View&lt;/a&gt;: view  edge template reander frontend page&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.adonisjs.com/guides/validator/introduction&#34;&gt;Validator&lt;/a&gt;: validate data schema&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.adonisjs.com/guides/validator/custom-rules&#34;&gt;Rules&lt;/a&gt;: validate rules(common &amp;amp; DIY  start preload rules)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.adonisjs.com/guides/middleware&#34;&gt;Middleware&lt;/a&gt;:  Middleware are a series of functions that are executed during an HTTP request before it reaches the route handler. Every function in the chain has the ability to end the request or forward it to the &lt;code&gt;next&lt;/code&gt; function. &lt;strong&gt;&lt;del&gt;server&lt;/del&gt;&lt;/strong&gt; Middleware, &lt;strong&gt;Global&lt;/strong&gt; Middleware, &lt;strong&gt;Naming&lt;/strong&gt; Middleware&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.adonisjs.com/guides/auth/introduction&#34;&gt;Authentication&lt;/a&gt;: using &lt;strong&gt;sessions&lt;/strong&gt;, &lt;strong&gt;basic auth&lt;/strong&gt; or &lt;strong&gt;API tokens(JWT, OAT)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.adonisjs.com/guides/events&#34;&gt;Events&lt;/a&gt;: define evens listener  to listen async event on(eventName,callback) , then emit event to tigger regist event&amp;rsquo;s callback; eg: new user to emit event callback to send email (DIY events Listenner, start preload events)&lt;/p&gt;
&lt;p&gt;通过adonis-ts-app demo 初始化一个app:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#new project&lt;/span&gt;
npm init adonis-ts-app@latest shop-backend
npm init adonis-ts-app@latest shop-admin-backend
&lt;span class=&#34;c1&#34;&gt;#install package for mysql &lt;/span&gt;
npm i @adonisjs/lucid@alpha
&lt;span class=&#34;c1&#34;&gt;#invoke package to select mysql for ace make:model and migration table&lt;/span&gt;
node ace configure&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;invoke&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; @adonisjs/lucid
&lt;span class=&#34;c1&#34;&gt;#install mysql2&lt;/span&gt;
npm install mysql2
&lt;span class=&#34;c1&#34;&gt;#modify config/database.ts use mysql client: mysql2&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#install auth middleware&lt;/span&gt;
npm i @adonisjs/auth@alpha
&lt;span class=&#34;c1&#34;&gt;#install Argon2 password hashing algorithm following the PHC string format&lt;/span&gt;
npm install phc-argon2
&lt;span class=&#34;c1&#34;&gt;#invoke package to select lucid and api tokens&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# https://docs.adonisjs.com/guides/auth/introduction&lt;/span&gt;
node ace invoke @adonisjs/auth
&lt;span class=&#34;c1&#34;&gt;# rigister auth naming middleware in start/kernel.js  auth: &amp;#39;App/Middleware/Auth&amp;#39;,&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# add auth middleware for router in start/router.js  &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# use database-backed opaque access token&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# demo: https://dev.to/tngeene/adonisjs-understanding-user-registration-and-authentication-2ojl&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# for session auth&lt;/span&gt;
npm i @adonisjs/session 
&lt;span class=&#34;c1&#34;&gt;# for CSRF token protection&lt;/span&gt;
npm i @adonisjs/shield 
&lt;span class=&#34;c1&#34;&gt;#invoke add fhield global middleware in start/kernel.js () =&amp;gt; import(&amp;#39;@ioc:Adonis/Addons/Shield&amp;#39;)&lt;/span&gt;
node ace invoke @adonisjs/shield

&lt;span class=&#34;c1&#34;&gt;#change .env modify mysql conf&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#migration table&lt;/span&gt;
node ace make:migration &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;table&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#migration create/rollback table&lt;/span&gt;
node ace migration:run / node ace migration:rollback

&lt;span class=&#34;c1&#34;&gt;#then u can use ace to make a new model app/Models/***.ts&lt;/span&gt;
node ace make:model ***
&lt;span class=&#34;c1&#34;&gt;#then u can use ace to make a new app/Controllers/Http/***Controller.ts&lt;/span&gt;
node ace make:controller ***
&lt;span class=&#34;c1&#34;&gt;#if use edge tpl, u can use ace to make a new view to render tpl&lt;/span&gt;
node ace make:view ***
&lt;span class=&#34;c1&#34;&gt;#if valide request param, u can use ace to make a new volidator&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#https://docs.adonisjs.com/guides/validator/introduction&lt;/span&gt;
node ace make:validator ***
&lt;span class=&#34;c1&#34;&gt;#or diy validate rules&lt;/span&gt;
node ace make:prldfile validator

&lt;span class=&#34;c1&#34;&gt;#make events to gen start/events.ts for listen on(eventName,callback)&lt;/span&gt;
node ace make:prldfile events
&lt;span class=&#34;c1&#34;&gt;#or make listener to listen on eventsList &lt;/span&gt;
node ace make:listener ***


&lt;span class=&#34;c1&#34;&gt;#make a middleware like auth middleware;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#transmit by ctx, ctx-&amp;gt;ctx-&amp;gt;ctx to next()&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#eg: u can make a user action log middleware to analyse or A/B test for recommended system&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#https://docs.adonisjs.com/guides/middleware&lt;/span&gt;
node ace make:middleware ***

&lt;span class=&#34;c1&#34;&gt;# https://github.com/luin/ioredis/blob/master/API.md&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# https://docs.adonisjs.com/guides/redis&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#install redis&lt;/span&gt;
npm i @adonisjs/redis
node ace configure @adonisjs/redis

&lt;span class=&#34;c1&#34;&gt;# https://www.npmjs.com/package/@elastic/elasticsearch&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/typescript.html&lt;/span&gt;
npm i @elastic/elasticsearch


&lt;span class=&#34;c1&#34;&gt;# watch run &lt;/span&gt;
node ace serve --watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;前端开发&#34;&gt;前端开发&lt;/h3&gt;
&lt;p&gt;Shop-frontend, shop-admin-frontend 前端页面逻辑，使用TypeScript+ Vue.js(前端开发框架) + ElementUI组件 通过vite构建本地开发(CI过程通过webpack打包生成静态资源，通过CD部署到边缘CDN节点)，开发环境具体操作如下：&lt;/p&gt;
&lt;p&gt;Vue.js 3 + TypeScript + Vite + ElementUI-plus&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://next.router.vuejs.org/zh/&#34;&gt;vue router&lt;/a&gt;: 通过 Vue.js，用组件组成应用；通过 Vue Router 将组件映射到路由上，让 Vue Router 知道在哪里渲染它们;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://axios-http.com/zh/docs/intro&#34;&gt;axios&lt;/a&gt;: HTTP 网络client请求库;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://next.vuex.vuejs.org/zh/index.html&#34;&gt;vuex&lt;/a&gt;: state management pattern + library stat/view/actions like MVC;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vee-validate.logaretm.com/v4/guide/overview&#34;&gt;vee-validate&lt;/a&gt;: form validation;  &lt;a href=&#34;https://www.npmjs.com/package/yup&#34;&gt;yup&lt;/a&gt;:  data schema validation;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# install vue cli&lt;/span&gt;
npm install -g @vue/cli
&lt;span class=&#34;c1&#34;&gt;# u can use vue create app use vue.js v3&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# vue create vue-app &amp;amp; cd vue-app&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# vue add element-plus&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# or use vite build vue.js v3 project app&lt;/span&gt;
npm init @vitejs/app shop-frontend 
npm init @vitejs/app shop-admin-frontend

&lt;span class=&#34;c1&#34;&gt;# eg: shop-frontend&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; shop-frontend &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;shop-admin-frontend&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# choose vue-ts when install&lt;/span&gt;
npm install

&lt;span class=&#34;c1&#34;&gt;# install vue-router4, https://next.router.vuejs.org/zh/&lt;/span&gt;
npm install vue-router@4

&lt;span class=&#34;c1&#34;&gt;# install axios https://axios-http.com/zh/docs/intro&lt;/span&gt;
npm install axios

&lt;span class=&#34;c1&#34;&gt;# install vuex, nice design(state management pattern + library stat/view/actions like MVC)  &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# https://next.vuex.vuejs.org/zh/index.html&lt;/span&gt;
npm install vuex@next --save

&lt;span class=&#34;c1&#34;&gt;# install vee-validate, https://vee-validate.logaretm.com/v4/guide/overview&lt;/span&gt;
npm i vee-validate@next --save


&lt;span class=&#34;c1&#34;&gt;#install element-plus ui&lt;/span&gt;
npm install element-plus --save
npm i -D sass
&lt;span class=&#34;c1&#34;&gt;#auto import &lt;/span&gt;
npm install -D unplugin-vue-components unplugin-auto-import

&lt;span class=&#34;c1&#34;&gt;# run local vue dev runtime app service (vite --port 5000 --host)&lt;/span&gt;
npm run dev

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;附具体代码(Monolith版本, 后端状态存储数据读写使用同一个数据源)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/weedge/backend-adonisjs-api/tree/main/shop-admin-backend&#34;&gt;Shop-admin-backend&lt;/a&gt; : 后台管理系统，为了方便后续根据数据库表一键生成CURD代码，采用后端模版edge template；用户管理可以采用内部公司用户平台SSO单点登录获取ticket的方式，或者使用框架本身的身份认证功能进行后台模块的权限管理(web authentication)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/weedge/backend-adonisjs-api/tree/main/adonisjs-shop-backend-api&#34;&gt;Shop-backend-api&lt;/a&gt;：后端接口，获取接口数据，需要登录验证，和token鉴权，记录用户行为日志，读写操作数据库和缓存等；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/weedge/frontend-vue/tree/main/vue-shop-frontend&#34;&gt;Shop-frontend-vue&lt;/a&gt;：前端页面，使用vue框架开发，访问后端API使用axios，状态管理使用vuex，页面路由使vue-router，表单验证和数据验证分别使用vee-valdate和yup，组件的使用需要结合文档使用；首页/搜索结果页展示商品列表，点击更多进入商品详细页面进行购买，购买需要登录/注册，登录后进入订单列表页，具体需求推动；&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;整体联调&#34;&gt;整体联调&lt;/h3&gt;
&lt;p&gt;这里前后端统一技术栈采用js on node  by (AdonisJS 5 + Vue 3 + Element-plus UI)， 如果熟悉node js  很方便调试，开发1人工全栈搞定就行，至于外部需求UI的调整美化由PM和设计师确定好，尽量通过工具自动化， 降低沟通成本；&lt;/p&gt;
&lt;p&gt;当然当后续系统切成微服务，把1人工全栈的活分成多个人来维护，从公司和组织架构层面来说，虽然增加了开发沟通成本，但是对公司来说是有利的，人员离职对系统影响会降低很多吧(from: 郭老师的架构课,以心理学+认知等方面)；&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;前端的技术迭代速度是快于后端的，主要是前端有大量的需求开发，不管是外部业务还是内部需求开发，所以需要满足业务场景下的高效迭代速度，衍生出高效的开发框架工具和UI组件复用，同时需要保持工具在项目中的迭代升级，而且在基于前端技术发展触及到后端开发，演变出前后技术栈统一的全栈开发，但是需求增多，需要更多的资源来承载用户请求，对于后端一些基础组件服务和性能优化的场景，还是需要根据&lt;strong&gt;语言特性，人力，组织结构&lt;/strong&gt;等因素考虑；前端技术底层引擎和原理性基础知识是不易变的，可以在关注变化的过程中，深入浅出共性的底层逻辑，以不变应万变；工欲善其事，必先利其器；(不管是前端/后端开发，DevOps, 以及大数据开发，甚至AI，&lt;strong&gt;熟练&lt;/strong&gt;利用好工具，工具是在应用场景下沉淀下来的，&lt;strong&gt;理解&lt;/strong&gt;基础原理和工具设计原理，结合使用场景，快速定位(文档，问题)，输出最大化，技术工具没有银弹，应用在适用场景达到事半功倍效果，学会在巨人的肩膀上考虑问题，搞事情)。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ECMAScript: &lt;a href=&#34;https://tc39.es/ecma262/&#34;&gt;https://tc39.es/ecma262/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ts: &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;https://www.typescriptlang.org/&lt;/a&gt;      &lt;a href=&#34;https://typescript.bootcss.com/&#34;&gt;https://typescript.bootcss.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;why-ts: &lt;a href=&#34;https://serokell.io/blog/why-typescript&#34;&gt;https://serokell.io/blog/why-typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Node.js: &lt;a href=&#34;http://nodejs.cn/learn&#34;&gt;http://nodejs.cn/learn&lt;/a&gt;  &lt;strong&gt;&lt;a href=&#34;https://nodejs.org/dist/latest-v17.x/docs/api/&#34;&gt;https://nodejs.org/dist/latest-v17.x/docs/api/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;V8 JavaScript/&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/WebAssembly/Concepts&#34;&gt;WebAssembly&lt;/a&gt; Engine: &lt;strong&gt;&lt;a href=&#34;https://chromium.googlesource.com/v8/v8.git&#34;&gt;https://chromium.googlesource.com/v8/v8.git&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://v8.dev/docs&#34;&gt;https://v8.dev/docs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Adonis.js5: &lt;a href=&#34;https://adonisjs.com/&#34;&gt;https://adonisjs.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adonis.js5 + Edge template demo: &lt;a href=&#34;https://masteringbackend.com/posts/adonisjs-tutorial-the-ultimate-guide&#34;&gt;https://masteringbackend.com/posts/adonisjs-tutorial-the-ultimate-guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adonis.js5 + Vue.js3 demo: &lt;a href=&#34;https://www.section.io/engineering-education/build-a-ticketing-app-with-adonisjs-and-vuejs/&#34;&gt;https://www.section.io/engineering-education/build-a-ticketing-app-with-adonisjs-and-vuejs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vue.js3: &lt;a href=&#34;https://v3.cn.vuejs.org/guide/introduction.html&#34;&gt;https://v3.cn.vuejs.org/guide/introduction.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vite: &lt;a href=&#34;https://cn.vitejs.dev/guide/&#34;&gt;https://cn.vitejs.dev/guide/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vue CLI: &lt;a href=&#34;https://cli.vuejs.org/zh/guide/&#34;&gt;https://cli.vuejs.org/zh/guide/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Element-Plus UI: &lt;a href=&#34;https://element-plus.gitee.io/zh-CN/guide/installation.html&#34;&gt;https://element-plus.gitee.io/zh-CN/guide/installation.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;webpack: &lt;a href=&#34;https://webpack.docschina.org/concepts/&#34;&gt;https://webpack.docschina.org/concepts/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;web开发: &lt;strong&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>CRDT</title>
      <link>https://weedge.github.io/post/crdt/</link>
      <pubDate>Tue, 28 Dec 2021 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/crdt/</guid>
      
        <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;无冲突复制数据类型&lt;/strong&gt;(CRDT: &lt;strong&gt;conflict-free replicated data type&lt;/strong&gt;) 是一种简化分布式数据存储系统和多用户应用程序的数据结构。&lt;/p&gt;
&lt;p&gt;在许多系统中，某些数据的副本需要存储在多台计算机上。此类系统的示例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在本地设备上存储数据，并且需要将该数据同步到属于同一用户的其他设备（同一用户多端设备同步，例如日历、笔记、联系人或提醒）的移动应用程序；&lt;/li&gt;
&lt;li&gt;分布式数据库，维护数据的多个副本（在同一数据中心或不同位置,一般是不同数据中心的多活场景），以便在某些副本离线时系统继续正常工作；&lt;/li&gt;
&lt;li&gt;协作软件，例如 Google Docs、Trello、Figma 或许多其他软件，其中多个用户可以同时更改同一文件或数据；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/shows/tech-exceptions/concordant-always-know-what-to-expect-from-your-data&#34;&gt;边缘计算场景&lt;/a&gt;，比如多个手机/车载app 在无信号的森林中，产生的本地离线协同数据，多个设备同步到云上处理;&lt;/li&gt;
&lt;li&gt;大规模数据存储和处理系统，复制数据以实现全球可扩展性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有此类系统都需要处理数据可能在不同副本上同时修改的事实。从广义上讲，有两种可能的方法来处理此类数据修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;强一致性复制：&lt;/p&gt;
&lt;p&gt;在这个模型中，副本相互协调以决定何时以及如何应用修改。这种方法支持强一致性模型，例如可序列化事务和可线性化。然而，等待这种协调会降低这些系统的性能；此外，CAP 定理告诉我们，当副本与系统的其余部分断开连接时（例如，由于网络分区，或者因为它是具有间歇性连接的移动设备），不可能对副本进行任何数据更改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;乐观复制：&lt;/p&gt;
&lt;p&gt;在此模型中，用户可以独立于任何其他副本修改任何副本上的数据，即使该副本离线或与其他副本断开连接。这种方法可实现最大的性能和可用性，但当多个客户端或用户同时修改同一条数据时，它可能会导致冲突。当副本相互通信时，需要解决这些冲突。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无冲突复制数据类型 (CRDT) 用于具有乐观复制的系统，它们负责解决冲突。CRDT 确保，无论在不同的副本上进行什么数据修改，数据始终可以合并到一致的状态。此合并由 CRDT 自动执行，无需任何特殊的冲突解决代码或用户干预。&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;h3 id=&#34;automergehttpsgithubcomautomergeautomerge&#34;&gt;&lt;a href=&#34;https://github.com/automerge/automerge&#34;&gt;automerge&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;yjshttpsgithubcomyjsyjs&#34;&gt;&lt;a href=&#34;https://github.com/yjs/yjs&#34;&gt;Yjs&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;redis-crdbhttpsrediscomredis-enterprisetechnologyactive-active-geo-distribution&#34;&gt;&lt;a href=&#34;https://redis.com/redis-enterprise/technology/active-active-geo-distribution/&#34;&gt;redis (CRDB)&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;references&#34;&gt;references&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type&#34;&gt;wiki: Conflict-free replicated data type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alangibson/awesome-crdt#know-before-you-go&#34;&gt;awesome-crdt#know-before-you-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://crdt.tech/resources&#34;&gt;crdt.tech-resources&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://crdt.tech/implementations&#34;&gt;crdt.tech-implementations&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hal.inria.fr/hal-00932836/file/CRDTs_SSS-2011.pdf&#34;&gt;Conflict-free Replicated Data Types.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://hal.inria.fr/file/index/docid/555588/filename/techreport.pdf?spm=a2c6h.12873639.0.0.a25177aaoVMJMH&amp;amp;file=techreport.pdf&#34;&gt;A comprehensive study of Convergent and Commutative Replicated Data Types.pdf&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://arxiv.org/pdf/1806.10254.pdf&#34;&gt;Conflict-free Replicated Data Types: An Overview.pdf&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.isa-afp.org/browser_info/current/AFP/CRDT/document.pdf&#34;&gt;A framework for establishing Strong Eventual Consistency for Conflict-free Replicated Data types.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://arxiv.org/pdf/1608.03960.pdf&#34;&gt;A Conflict-Free Replicated JSON Datatype.pdf&lt;/a&gt;&lt;/strong&gt; &lt;a href=&#34;https://cs.paperswithcode.com/paper/a-conflict-free-replicated-json-datatype&#34;&gt;code&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=TRvQzwDyVro&#34;&gt;vedio introduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GXJ0D2tfZCM&#34;&gt;Automerge: Making Servers Optional for Real-Time Collaboration&lt;/a&gt;&lt;/strong&gt; &lt;a href=&#34;https://speakerdeck.com/ept/automerge-making-servers-optional-for-real-time-collaboration&#34;&gt;slide&lt;/a&gt; &lt;a href=&#34;https://github.com/automerge&#34;&gt;github.com/automerge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.researchgate.net/publication/310212186_Near_Real-Time_Peer-to-Peer_Shared_Editing_on_Extensible_Data_Types&#34;&gt;Near Real-Time Peer-to-Peer Shared Editing on Extensible Data Types.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S1877050921014101&#34;&gt;Toward Fast and Reliable Active-Active Geo-Replication for a Distributed Data Caching Service in the Mobile Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://redis.com/redis-enterprise/technology/active-active-geo-distribution/&#34;&gt;redis: active-active-geo-distribution&lt;/a&gt; &lt;a href=&#34;https://docs.redis.com/latest/rs/references/developing-for-active-active/&#34;&gt;redis: Developing applications with Active-Active databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.riak.com/riak/kv/2.0.0/developing/data-types/?spm=a2c6h.12873639.0.0.a25177aaoVMJMH&#34;&gt;riak-kv:Data Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://developer.aliyun.com/article/635632&#34;&gt;阿里云redis：CRDT——解决最终一致问题的利器&lt;/a&gt;&lt;/strong&gt;  &lt;a href=&#34;https://developer.aliyun.com/article/781709?utm_content=g_1000239229&#34;&gt;多中心容灾实践：如何实现真正的异地多活？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.51cto.com/art/202107/674513.htm&#34;&gt;基于CRDT的数据最终一致性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ddia.vonng.com/#/ch5?id=%E5%A4%9A%E4%B8%BB%E5%A4%8D%E5%88%B6&#34;&gt;多主复制&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>pool</title>
      <link>https://weedge.github.io/post/pool/</link>
      <pubDate>Thu, 02 Dec 2021 12:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/pool/</guid>
      
        <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;平常想到不浪费资源的方法，是对资源进行复用，减少资源消耗和浪费(小时候大人经常在吃饭时说的那句话)；在计算机工程领域，存在大量消耗资源的场景，多路复用和池化是最常用的性能优化手段；多路复用存在系统调用，由系统内核层面去支持优化(I/O多路复用select/poll/epoll/kqueue)，而池化可以应用用户使用层面来优化；池化(&lt;a href=&#34;https://en.wikipedia.org/wiki/Pool_(computer_science)&#34;&gt;pool&lt;/a&gt;)是一种资源复用优化技术，减少资源回收处理，提高资源利用率，资源最好是固定大小，如果在复用资源过程中，资源在逐渐增大，一直复用，也会导致资源消耗过多，到了一定大小之后，通过系统释放掉；在程序启动的时候提前申请加载好资源放到池子中，运行时根据不同的调度管理资源策略从池子中获取准备好的资源，或者运行时新建资源放入池子中，用户程序中进行自定义处理操作，操作完之后将资源重新放入池子中复用，有些资源可以动态扩缩； 资源主要是程序运行时对象，当然这些操作资源实际都是分配在虚拟内存空间的内核空间和用户空间中，比如，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B&#34;&gt;进程&lt;/a&gt;(process &lt;a href=&#34;https://en.wikipedia.org/wiki/Process_control_block&#34;&gt;PCB&lt;/a&gt; 内核态)、&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%9F%B7%E8%A1%8C%E7%B7%92&#34;&gt;线程&lt;/a&gt;(thread &lt;a href=&#34;https://en.wikipedia.org/wiki/Thread_control_block&#34;&gt;TCB &lt;/a&gt; 内核态)、&lt;a href=&#34;https://zh.wikipedia.org/zh-hans/%E5%8D%8F%E7%A8%8B&#34;&gt;协程&lt;/a&gt;(coroutine 用户态协作式调度,尽量减少内核调度)为载体的工作任务(work task 在用户态分配栈空间)；内存对象(heap object)，长链接(tcp connect) 等；主要对这些资源对象进行池化技术进行介绍，了解池化对应场景。&lt;/p&gt;
&lt;h2 id=&#34;工作任务池worker-pool&#34;&gt;工作任务池（worker pool)&lt;/h2&gt;
&lt;p&gt;程序中的工作任务是一些运行逻辑，通过进程，线程，或者协程为载体获取系统资源来运行；如果运行的资源对象特别多，这些资源对象在内存中分配空间，这就导致资源消耗过多，甚至可能导致OOM，同时处理任务完成之后，这些资源需要回收，也会消耗大量的cpu时间；所以在这些高耗进程/线程，或者协程资源的工作任务场景下(比如大量的请求任务)，需要用池化技术进行复用管理，提高利用率，减少请求耗时；对此分别介绍进程池，线程池，协程池，以及开源组件服务中的实现。&lt;/p&gt;
&lt;h3 id=&#34;进程池process-pool&#34;&gt;进程池(process pool)&lt;/h3&gt;
&lt;p&gt;早期的操作系统是以&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B&#34;&gt;进程&lt;/a&gt;作为资源分配和调度的基本单位，比如早期linux2.4以及之前的版本，进程是程序的基本执行实体；在面向线程设计的系统（如当代多数操作系统、&lt;a href=&#34;https://zh.wikipedia.org/wiki/Linux&#34;&gt;Linux&lt;/a&gt; 2.6及更新的版本）中，进程本身不是基本执行单位，而是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%9F%B7%E8%A1%8C%E7%B7%92&#34;&gt;线程&lt;/a&gt;的容器，将资源分配和调度运行进行了分离设计；引入线程后，进程中可以有多个线程，并且共享线程资源；这里介绍进程池，一个进程中只有一个线程作为调度运行单位；在使用PHP语言进行web服务端开发的时候，常规操作用LAMP/LNMP组合，其中使用Apache/Nginx作为web服务器将请求路由到对应后端服务模块处理，然后将处理的响应结果返回；后端服务模块通过实现通用网关接口协议(CGI)应用(app)进程来处理请求, 如果仅仅是单个请求处理从路由模块转发的请求，吞吐量是很低的(一个请求一个进程的方式(fork-and-exec模式)，实现简单，甚至可以用shell脚本来作为CGI进程处理，早期90年之前互联网用户不多)；随着互联网的发展，fork-and-exec模式，进程创建和消除开销变大，成了诟病，&lt;a href=&#34;https://en.wikipedia.org/wiki/FastCGI&#34;&gt;FastCGI&lt;/a&gt;接口协议在90年代中期提出来，FastCGI服务器使用持久进程来处理一系列请求，及每个单独的 FastCGI 进程可以在其生命周期内处理许多请求，从而避免每个请求进程创建和终止的开销(另外还有SCGI,WSGI协议,都是定义通用的接口协议，将web服务器和应用服务器进行解耦，比如apache/nginx都有对应的协议模块和应用服务器php-fpm/uWSGI(python)相关接口协议进程进行交互，编写语言大多是解释性语言，进程运行时动态加载解释执行)。&lt;/p&gt;
&lt;h4 id=&#34;php-fpm-worker-process-pool&#34;&gt;php-fpm worker process pool&lt;/h4&gt;
&lt;p&gt;php解释性语言作为后端服务模块的开发语言，支持FastCGI，并且对支持FastCGI接口协议的进程进行管理，通过SAPI(Server Application Programme Interface)模块中的FPM(FastCGI Process Manager)实现；在初始启动php-fpm时，通过主进程监听不同服务端口，不同服务端口初始对应的FastCGI工作进程池；运行时，主进程(父进程)和工作进程(子进程)通过双向信号管道(pipe)进行通信，实现主进程对工作进程的控制管理，以及工作进程通过标准输出管道(stdout pipe)和标准错误管道(stderr pipe)，将结果和错误返回给主进程；主进程和工作进程通过共享内存的方式(内部记分板结构scoreboard)，实现工作进程运行时的监控(工作进程状态), 主进程会定时轮训检查工作进程数目，根据进程池管理策略来处理是否扩缩容，检查工作进程处理请求是否超时，整体流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weedge/mypic/master/fpm-worker-pool.drawio.png&#34; alt=&#34;fpm-worker-pool&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体代码见&lt;a href=&#34;https://github.com/php/php-src/tree/master/sapi/fpm&#34;&gt;php-fpm&lt;/a&gt;；php语言是线程安全的，使用 &lt;code&gt;TSRM&lt;/code&gt; 机制分配和使用变量时会有额外的损耗，所以一般不需要多线程的 PHP 环境；而且工作进程处理请求时加载php脚本解析成opcode, 然后通过ZendVM解释器调用opcode对应的机器指令，最终完成php脚本的运行，由于每次处理请求都需要解析成opcode,会有性能损耗，所以引入opcache来缓存解析后的opcode；php-fpm的运行机制是采用多进程方式来处理请求，每个woker进程处理请求时所占内存大小在10M+，可以通过&lt;code&gt;ps aux | grep php | grep -v grep | grep -v master | awk &#39;{sum+=$6; cn+=1} END {print sum/cn}&#39;&lt;/code&gt;获取worker进程消耗内存平均值，所以fpm引入工作进程池来防止过度消耗内存，而且可以服用工作进程来处理请求，内存资源紧的场景池中开启动态扩缩worker进程，反之采用静态方式池中一次初始pm.max_children 这么多worker进程，减少扩缩管理开销。&lt;/p&gt;
&lt;p&gt;php多进程(进程单个线程)编程相对多线程(进程多个线程)编程要简单些，多线程需要考虑共享所在进程资源同步的问题，处于安全隔离考虑，进程多线程中如果某个线程出错，整个进程就挂了，而多进程资源相互隔离，如果一个进程挂了，不影响其他进程处理任务；而且解释语言相对c/c++编译成机器码执行语言开发效率要高很多，运行时加载，无需重启服务(当然c/c++编译型语言也支持动态库加载至内存提供相关接口调用，进行热加载而无需重启服务，但是不可能每次新开发一个功能都以*.so动态库的形式提供吧，所以需求更新迭代快的场景，像游戏领域的服务器，网关服务器，甚至大数据任务算子，大多都是通过引入解释型脚本语言(lua/js/perl/python/php)编写业务逻辑，进行热加载)；&lt;/p&gt;
&lt;p&gt;但是多进程毕竟比多线程要消耗更多的系统资源；而且如果存在多进程单线程的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8&#34;&gt;cpu&lt;/a&gt;切换，是从一个进程到另一个进程，而单进程多线程的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8&#34;&gt;cpu&lt;/a&gt;切换则只在一个进程内，每个进程/线程都有自己的上下文堆栈保存，进程间的cpu切换消耗更大一些；多线程上下文的切换涉及程序计数器、堆栈指针和程序状态字等一系列的寄存器置换、程序堆栈重置甚至是 CPU 高速缓存、TLB 快表的汰换；进程间的上线文切换还涉及整个进程地址空间。&lt;/p&gt;
&lt;h3 id=&#34;线程池thread-poolhttpsenwikipediaorgwikithread_pool&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Thread_pool&#34;&gt;线程池(thread pool)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;线程是操作系统调度运行的最小单元，随着计算机&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8&#34;&gt;cpu&lt;/a&gt;核数的增加，多线程技术可以充分利用多个cpu核进行并行处理，提高吞吐；对于在单cpu单核的计算机上，使用多线程技术，也可以把进程中负责I/O处理、人机交互而常被阻塞的部分，与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，虽然多任务比不上多核，但因为具备多线程的能力，从而提高了程序的执行效率。而多线程的频繁建立和销毁，以及多线程上下文的切换，会导致整体执行的延迟，对于高性能的服务组件，针对io密集型场景，引入线程池来进行优化；而业务场景，为了提高业务的接口吞吐量，也引入了线程池进行优化；&lt;/p&gt;
&lt;h4 id=&#34;nginx-thread-pool&#34;&gt;nginx thread pool&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/&#34;&gt;nginx是多工作进程(cpu核数)+事件模型&lt;/a&gt;（如果是IO密集型 worker进程数在1.5-2倍cpu核数），通过工作进程单线程的事件模型(比喻成grandmaster😄)能够很快处理用户的请求(epoll事件机制)，但是为了解决重阻塞型IO密集型的工作任务问题，nginx 1.7.12引入了&lt;a href=&#34;https://www.nginx.com/blog/thread-pools-boost-performance-9x/&#34;&gt;thread pool 线程池技术&lt;/a&gt;，主要是针对linux系统，解决不支持异步IO的场景(FreeBSD系统的异步IO支持使用内存做为文件缓存)；&lt;/p&gt;
&lt;p&gt;比如产生磁盘io的系统调用read(),sendfile(),aio_write()(Linux上的在编写一些临时文件,在nginx1.9.13加入&lt;a href=&#34;https://github.com/nginx/nginx/commit/348f705c000bdbfbee74d6f0111a03697f8ffa4f&#34;&gt;commit 348f705&lt;/a&gt;)这些阻塞操作场景，工作进程处理这些操作的时候，将其放入线程池中来处理，常见的直播/点播回放场景中，会有拉流操作，从最近CDN服务节点上获取视频流进行播放；像视频流文件，或者其他大文件，这些请求资源是没法放入系统内存&lt;a href=&#34;https://zhuanlan.zhihu.com/p/35448479&#34;&gt;页面缓存&lt;/a&gt;中，导致事件模型被文件操作卡住，没法正常的响应链接，引入 thread pool 来缓解这个问题；流程如下：&lt;/p&gt;
&lt;p&gt;工作进程中的主线程决定要发起文件系统操作时，将会建立一个特殊的任务，并将该任务丢到任务队列中；而线程池中的空闲线程会不断的执行该队列的文件任务，而后将执行好的结果返回，主线程监听到通知事件就绪调用回调函数处理结果，继续后续操作。经过这个优化，主线程不会再被阻塞在系统调用上(多分出了通知事件，不影响读写事件)，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weedge/mypic/master/nginx-thread-pool.drawio.png&#34; alt=&#34;thread-pools-worker-process-event-cycle&#34;&gt;&lt;/p&gt;
&lt;p&gt;thread pool整体实现代码见&lt;a href=&#34;https://github.com/nginx/nginx/commit/305fc021db799c87d751f0f1f5e99afee7bb2b3b&#34;&gt;thread pool commit 305fc02&lt;/a&gt; , &lt;a href=&#34;https://github.com/nginx/nginx/commit/e10e7a4831cfaf6a41824da7c35819fc7f58f8ee&#34;&gt;epoll notify mechanism&lt;/a&gt;, &lt;a href=&#34;https://github.com/nginx/nginx/commit/2b3c01e9953b3985e05a46e56a01078b37caeb18&#34;&gt;kqueue notify mechanism&lt;/a&gt;；最近有个&lt;a href=&#34;https://github.com/nginx/nginx/commit/83e92a2edd6bf7c6867b653284ac44962c4e33c9&#34;&gt;commit 83e92a2&lt;/a&gt; 解决http2 等待 sendfile 完成 请求hang住的情况，就是利用线程池的异步方式(aio)来处理的（ps: nginx 作者也）。&lt;/p&gt;
&lt;h4 id=&#34;redis-thread-pool&#34;&gt;redis thread pool&lt;/h4&gt;
&lt;p&gt;redis处理命令核心逻辑是单进程单线程模式，redis关注的是网络IO，以及内存操作，如果是单进程多线程处理必然会有同一个内存结构会有多个线程处理，加锁处理，线程等待以及多线程上下文切换开销的问题，执行效率不如单线程高效；网络IO事件直接通过IO多路复用事件模型(AE)来解决, 而且逻辑简单可维护；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为了提高处理性能，Redis v4.0 将磁盘io和内存释放free工作采用几个线程异步处理bio(3个)；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;fsync内存异步持久落盘操作和close异步关闭文件操作；&lt;/p&gt;
&lt;p&gt;由于内存中大ke同步删除会耗时高从而阻塞核心逻辑，所以将这些内存释放采用lazyfree机制优化异步化处理，包括两类：一类是主动释放&lt;code&gt;unlink&lt;/code&gt; &lt;code&gt;flushall async&lt;/code&gt; ；一类是被动释放, 分为4种场景，按需求场景进行打开优化(默认是关闭的)：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
slave-lazy-flush no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​	lazyfree-lazy-eviction：针对redis内存使用达到maxmeory，并设置有淘汰策略时；在被动淘汰键时，是否采用lazy free机制； 具体流程见&lt;a href=&#34;https://weedge.github.io/post/lru/#%E8%BF%91%E4%BC%BClru%E7%AE%97%E6%B3%95&#34;&gt;redis 近似lru算法&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;​	lazyfree-lazy-expire：针对设置有TTL的键，达到过期后，被redis清理删除时是否采用lazy free机制；可开启&lt;/p&gt;
&lt;p&gt;​	lazyfree-lazy-server-del：针对有些指令在处理已存在的键时，会带有一个隐式的DEL键的操作，比如&lt;code&gt;rename&lt;/code&gt;操作，如果key存在会先删除这个key/value, 如果是大key场景会阻塞；可开启&lt;/p&gt;
&lt;p&gt;​	slave-lazy-flush：针对slave进行全量数据同步，slave在加载master的RDB文件前，会运行flushall来清理自己的数据场景，开启可减少全量同步耗时，从而减少主库因输出缓冲区爆涨引起的内存使用增长；可开启&lt;/p&gt;
&lt;p&gt;​	还有一个配置 &lt;code&gt;lazyfree-lazy-user-del no&lt;/code&gt;， 针对老用户/代码使用&lt;code&gt;del&lt;/code&gt;主动删除是否异步处理，开启和&lt;code&gt;unlink&lt;/code&gt;一样；&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;为了提高处理IO能力，Redis v6.0 正式在网络模型中实现 I/O 多线程，流程如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	客户端和主线程建立连接，主线程将请求封装成client结构放入LIFO读入队列(clients_pending_read)，主线程然后把LIFO读入队列中的client数据RR均匀分配给主线程和I/O多线程的本地队列(io_threads_list[id])；&lt;/p&gt;
&lt;p&gt;​	主线程和I/O多线程解析命令，写入查询缓存区(querybuf)；&lt;/p&gt;
&lt;p&gt;​	主线程忙轮训等待I/O多线程全部解析处理完之后，遍历LIFO读入队列(clients_pending_read)中的client, 处理执行命令核心逻辑(processCommand)，注意这里并不是I/O多线程来处理；主线程处理完命令后，将响应数据写入client写出缓存区(buf/reply)，然后把client放入LIFO 写出队列(clients_pending_write)，同样主线程然后把LIFO写出队列(clients_pending_write)中的client数据RR均匀分配给主线程和I/O多线程的本地队列(io_threads_list[id])；&lt;/p&gt;
&lt;p&gt;​	主线程和I/O多线程回写响应数据给客户端；&lt;/p&gt;
&lt;p&gt;​	主线程忙轮训等待I/O多线程全部回写响应数据给客户端 处理完之后，最后在遍历LIFO写出队列(clients_pending_write)，检查是否还有 client 的写出缓冲区(buf/reply)中有残留数据，如果有，为 client 注册一个命令回复器 sendReplyToClient，等待client可写之后在事件循环中继续回写残余的响应数据。&lt;/p&gt;
&lt;p&gt;处理流程和以前的单线程reactor模式差不多，主要区别是对读写IO优化(异步多线程处理)； 读入请求命令读取解析和写出响应数据给客户端，增加了I/O多线程来处理，以前的主线程处理的核心逻辑没有变，增加了和I/O多线程交互的读写LIFO队列(clients_pending_read / clients_pending_write)，有点像扇入扇出模式；尽量保持 &lt;strong&gt;less is more&lt;/strong&gt; 原则；&lt;/p&gt;
&lt;p&gt;而且redis v6.0为了高性能，网络IO多线程场景，和nginx一样也对多核CPU NUMA架构进行了亲和性处理(见setcpuaffinity.c中逻辑，&lt;a href=&#34;https://github.com/redis/redis/commit/1a0deab2a548fa306171f03439e858c00836fe69&#34;&gt;commit 1a0deab2&lt;/a&gt;)，充分利用CPU本地缓存，并行处理；另外redis v6.0还有一些性能优化骚操作，无锁化处理，看代码时会发现用到了mutex lock，通过 pthread_mutex_lock 给 io_threads_mutex[i] (0&amp;lt;=i&amp;lt;128) 上锁，其实目的是主线程用来通知I/O线程使用的，最终还是通过io_threads_pending[i] 原子化操作(atomic_load_explicit)获取判读是否等待；每个处理I/O线程都有自己的本地队列io_threads_list[i] 用于处理封装的client结构，I/O线程之间互不干涉；而且主线程和I/O子线程处理本地队列 io_threads_list[i] 以及io_threads_op 通过控制主线程和 I/O 线程交错访问来规避共享数据竞争(data race)问题。&lt;/p&gt;
&lt;p&gt;THREADED I/O 核心操作变量如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* ==========================================================================
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * Threaded I/O
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * ========================================================================== */&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define IO_THREADS_MAX_NUM 128
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define IO_THREADS_OP_READ 0
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define IO_THREADS_OP_WRITE 1
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pthread_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;io_threads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IO_THREADS_MAX_NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pthread_mutex_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;io_threads_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IO_THREADS_MAX_NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;redisAtomic&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;io_threads_pending&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IO_THREADS_MAX_NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;io_threads_op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;cm&#34;&gt;/* IO_THREADS_OP_WRITE or IO_THREADS_OP_READ. */&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/* This is the list of clients each thread will serve when threaded I/O is
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * used. We spawn io_threads_num-1 threads, since one is the main thread
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * itself. */&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io_threads_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IO_THREADS_MAX_NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上通过引入多线程来改善redis中I/O处理性能，这些优化都可以根据需求场景进行配置，也有具体说明 见: &lt;a href=&#34;https://github.com/redis/redis/blob/unstable/redis.conf&#34;&gt;redis.conf&lt;/a&gt; (LAZY FREEING, THREADED I/O)；功能按需配置，&lt;strong&gt;可配置功能说明&lt;/strong&gt; 配置文档原则 (开源软件配置文件一般都会有详细说明可了解)；&lt;/p&gt;
&lt;h4 id=&#34;java-thread-pool&#34;&gt;java thread pool&lt;/h4&gt;
&lt;p&gt;java多线程编程，也有相关的线程池(ThreadPoolExecutor，子类ScheduledThreadPoolExecutor - 利用延迟工作队列(最小堆)实现定时任务线程池)提供使用；使用ThreadPoolExecutor可以满足两种场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;并行执行子任务，提高响应速度。这种情况下，应该使用同步队列，没有什么任务应该被缓存下来，而是应该立即执行;&lt;/li&gt;
&lt;li&gt;并行执行大批次任务，提升吞吐量。这种情况下，应该使用有界队列，使用队列去缓冲大批量的任务，队列容量必须声明，防止任务无限制堆积；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://p0.meituan.net/travelcube/77441586f6b312a54264e3fcf5eebe2663494.png&#34; alt=&#34;ThreadPoolExecutor运行流程&#34;&gt;&lt;/p&gt;
&lt;p&gt;ThreadPoolExecutor具体的使用介绍可以参考美团的这片文章：&lt;a href=&#34;https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html&#34;&gt;Java线程池实现原理及其在美团业务中的实践&lt;/a&gt;，引用 ThreadPoolExecutor 运行流程如上图；文中有有实际的案例和参数配置解决方案，可以借鉴；在使用java线程池对接口吞吐量进行优化时，如果参数使用不当，线程池最大线程数过小，可能导致接口服务降级；消费线程过小任务队列过长，积压任务，可能导致请求超时的情况；针对这些场景，提出解决方案：增加线程池监控，通过配置中心，手动来调整java线程池参数, 进行动态配置化管理，这个思路其实也是服务基础稳定性的常用思路，做好监控报警，配置化及时人工响应。(美团的&lt;a href=&#34;https://mp.weixin.qq.com/s/C81f0_arbs23KGcaIwi56w&#34;&gt;复盘机制&lt;/a&gt;值得学习)&lt;/p&gt;
&lt;h4 id=&#34;thread-pool-小结&#34;&gt;thread pool 小结&lt;/h4&gt;
&lt;p&gt;引入线程池其实本质上还是对多线程的有效管理，充分利用多核进行并行处理，减少线程间的上下文切换开销(&lt;strong&gt;上下文切换时间在&lt;a href=&#34;https://eli.thegreenplace.net/2018/measuring-context-switching-and-memory-overheads-for-linux-threads/&#34;&gt;~1000 到 ~1500 纳秒&lt;/a&gt;，（平均）每核心&lt;a href=&#34;https://www.youtube.com/watch?v=jEG4Qyo_4Bc&amp;amp;feature=youtu.be&amp;amp;t=266&#34;&gt;每纳秒 12 条指令&lt;/a&gt;，上下文切换可能会花费大约 12k 到大约 18k 条指令的延迟&lt;/strong&gt;)；以上实现的线程池本质上都是通过多线程异步优化IO任务，通过线程池来管理线程，通过参数进行调优，充分利用多核cpu硬件资源，并行处理，吞吐最大化(ps: redis和nginx的源码值得一撸)。 但是用户应用层使用线程池需要对线程数目进行调整，那可否从用户应用层面来封装一层进行调度管理呢？ 答案是有的，像GO语言，现在的内部运行时runtime 通过G-P-M调度模型来有效管理，Go 语言的调度模型通过使用与 CPU 数量相等的线程减少线程频繁切换的内存开销(如果是在容器环境中，可以通过&lt;a href=&#34;https://github.com/uber-go/automaxprocs&#34;&gt;uber-go/automaxprocs&lt;/a&gt; 运行时自动适配分配给容器cpu核数)，同时在每一个线程上执行额外开销更低的 Goroutine 协程来降低操作系统和硬件的负载，用户应用层面不需要考虑多线程编程的细节，重点关注Goroutine 协程的使用优化，了解G-P-M模型，运行时&lt;a href=&#34;http://www1.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf&#34;&gt;调度机制&lt;/a&gt;。(享受一波语言,工具福利时，&lt;strong&gt;注意系统阻塞调用时的线程泄露,以及异步阻塞时的协程泄漏, race检查,性能测试,pprof/trace分析,逃逸分析,GC&lt;/strong&gt;等)&lt;/p&gt;
&lt;h3 id=&#34;协程池coroutine-pool&#34;&gt;协程池(coroutine pool)&lt;/h3&gt;
&lt;p&gt;协程是运行在用户态的轻量线程，可以认为是用户应用层面的线程， 比线程分配的虚拟内存栈空间要小；创建一个线程所占虚拟内存栈空间大小，在linux下通过&lt;code&gt;pmap &lt;/code&gt;+pid 查看stack大小， 在macOS下通过&lt;code&gt;vmmap -interleaved&lt;/code&gt;+pid 查看stack大小，大小由&lt;code&gt;ulimit -s&lt;/code&gt; 控制，线程栈空间一般在8M~10M左右，如果使用不当会栈溢出；而协程分配空间是由实现协程语言来决定，像GO实现的goroutine协程初始创建栈空间大小是2k(go 1.4+ 采用连续堆栈策略，以前是分段栈策略)，最大限制的默认值在64位系统上是1GB（&lt;a href=&#34;https://github.com/golang/go/blob/f296b7a6f045325a230f77e9bda1470b1270f817/src/runtime/proc.go#L120&#34;&gt;不同的架构最大数会不同&lt;/a&gt;）；编译期间插入检查，调用时如果满足了扩容条件(根据被调用函数栈帧的大小来判断是否需要扩容，通过 stackguard0 来判断是否要进行栈增长)，扩容两倍空间，如果协程所使用的栈空间小于1/4时，缩容成一半空间；(具体细节见：&lt;a href=&#34;https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-stack-management/&#34;&gt;栈空间管理&lt;/a&gt; &lt;a href=&#34;https://kirk91.github.io/posts/2d571d09/&#34;&gt;推送场景: 聊一聊goroutine stack&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;尽管goroutine协程比线程分配栈空间小，但是 大量的 goroutine 还是很耗资源的，而且大量的 goroutine 对于调度和垃圾回收的耗时还是会有影响的，因此，goroutine 并不是越多越好，所以使用协程池来优化；&lt;/p&gt;
&lt;p&gt;GO中管理协程池的开发方案还是比较多的，大都是和线程池任务工作模型差不多，任务队列用的是GO中的runtime/channel,  池化管理用的是GO中的sync.Pool, 比如&lt;a href=&#34;https://github.com/valyala/fasthttp/blob/9f11af296864153ee45341d3f2fe0f5178fd6210/workerpool.go#L16&#34;&gt;fasthttp workerpool&lt;/a&gt; 针对自身场景的多个连接通道池化复用 -&amp;gt; &lt;a href=&#34;https://github.com/panjf2000/ants&#34;&gt;panjf2000/ants&lt;/a&gt; 通用化了多个任务通道池化复用 -&amp;gt; &lt;a href=&#34;https://github.com/bytedance/gopkg/tree/develop/util/gopool&#34;&gt;bytedance/gopool&lt;/a&gt; 任务tasker和工作worker池化复用；相对线程池thread pool的实现要简单些，因为底层GO runtime的&lt;a href=&#34;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html&#34;&gt;调度器&lt;/a&gt;以及sync库已经做了大部分的优化(无锁或最小化锁粒度)。&lt;a href=&#34;https://time.geekbang.org/column/article/301716&#34;&gt;Pool：性能提升大杀器&lt;/a&gt; 中介绍了GO中sync.Pool的实现，以及协程池的三方开源方案实现；&lt;/p&gt;
&lt;p&gt;这里介绍一个实现的 &lt;a href=&#34;https://github.com/weedge/lib/tree/main/pool/workerpool&#34;&gt;workerpool&lt;/a&gt;   通过channel 存放任务，多个 Worker 共享同一个任务 Channel，通过多个协程来消费池中的任务执行，协程根据提交的任务数动态扩缩协程；任务可以定义输入，输出，超时时间；通过channel 返回是否超时; 可用于批量任务并发执行场景，适用于大量批量耗时相对比较高的任务；在实际工作中，比如组织引擎中树中组织节点的生成，有些任务超时了，使用方可以重新放入队列中，或者出错报警等操作。 执行流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weedge/lib/main/pool/workerpool/workerpool.png&#34; alt=&#34;workerpool&#34;&gt;&lt;/p&gt;
&lt;p&gt;还有协程池的实现方式，主要是为了应对突发流量(场景：处理大量连接请求)，如下几个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gammazero/workerpool.git&#34;&gt;gammazero/workerpool&lt;/a&gt;  实现用到3个队列，一个用于提交任务的任务队列(buffer channel length 1，发送任务非阻塞)、一个等待队列（buf[] interface{} head,tail，为了应对突发流量设置的buff,无限制)、 一个工作队列(block channel，用阻塞chan是为了让消费的worker先启动)；未使用sync.Pool；通过dispatch协程来管理工作协程， 定时(idleTimeout)检查工作队列是否有任务(idle), 以及有工作协程(workerCount&amp;gt;1)，发送空任务(nil) 结束工作协程；这个检查是否有空闲工作协程机制比较简单，每到定时时间操作一次，回收频率可以调整，idleTimeout默认2秒；通过发送暂停任务 (Context/stopSignal) 来暂停worker工作以及整个workerpool，还有提交等待执行完成的任务，通过Pacer提交限速任务，使用方也可以提交超时任务；使用goroutine+channel+sync+context整体实现workerpool就300行左右，这个和ThreadPoolExecutor有些类似，流程如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weedge/mypic/master/go-workerpool.drawio.png&#34; alt=&#34;go-workerpool&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/valyala/fasthttp/blob/9f11af296864153ee45341d3f2fe0f5178fd6210/workerpool.go#L16&#34;&gt;fasthttp workerpool&lt;/a&gt; 针对自身场景的多个连接通道池化复用； -&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/panjf2000/ants&#34;&gt;panjf2000/ants&lt;/a&gt; 通用化了多个任务通道池化复用（一次任务G用完生命周期还可以复用(按空闲时间长短回收), 可用worker放入自定义的池中(stack/loopQueue) , 如果工作池没有可用worker, 根据配置是否等待，等待则等有可用worker时通过条件变量(Cond)唤醒,使用自旋锁; 定时从自定义的工作池中获取空闲时间大于配置阈值的worker进行回收）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bytedance/gopkg/tree/develop/util/gopool&#34;&gt;bytedance/gopool&lt;/a&gt; 任务task和工作worker池化复用(一次任务G用完生命周期可以复用，复用栈空间，尽量减少协程调度消耗) -&amp;gt; (尽量无锁化队列);针对&lt;strong&gt;优化栈扩张场景&lt;/strong&gt;使用(RPC 服务常见问题,比如：&lt;a href=&#34;https://kirk91.github.io/posts/2d571d09/&#34;&gt;推送场景: 聊一聊goroutine stack&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Tips: 1有等待全部任务结束；2，3，4 这些协程池没有等待，因为使用场景大多是多个协程处理完任务之后无需等待结果处理，可以自己的任务中定义；1,2,3都使用了channel, 1是在消费侧启动goroutine，2,3是在生产侧启动goroutine，通过channel单向通信task；4 未使用channel来通信，直接通过FIFO单向task链表，上锁头出尾入task，在生产侧启动goroutine；&lt;/p&gt;
&lt;p&gt;满足协程复用的前提下，在生产侧task，队列，消费侧worker 上尽量优化结构，结合调度特性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上的workerpool 都有缓冲队列，如果服务进程重启，需要平滑停止服务，就是在收到TERM信号时，需要调用workerpool提供的Wait接口, 对于未等待的协程池，使用sync.WaitGroup来等待剩余的任务执行完成，这种任务如果是用户请求任务，一般都是短任务，处理时间不会很长，像Pod 中的 docker container销毁的时候都会等待一段时间才会回收掉；如果是长时间任务，比如cron job 取决于任务的重要程度，则需要落库存放任务状态，在任务提交之前通过任务表来记录，因为进程本地记录是不可行的，如果容器化部署在Pod中，每次部署的Node会不同；请根据需求场景选择合适的workerpool。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;线程作为cpu执行调度的最小单元，而进程作为资源分配最小单元，进程中有多个线程，共享其进程资源，作为线程的容器，相互隔离不同进程之间的线程，所以nginx/fpm 都是多进程(单线程)+reactor多路复用的方式处理网络IO请求； php-fpm 为了有效控制请求进程所占资源过多消耗内存的情况，引入工作进程池来防止过度消耗内存，而且可以复用工作进程来处理请求；nginx 为了优化系统调用时阻塞io，使用线程池来异步化处理处理阻塞io事件；redis 引入多线程来解决磁盘IO,释放内存空间，以及网络IO读写的性能问题，nginx和redis 引入多线程都需要编译配置，其中nginx和redis中的网络IO优化细节值得学习的；协程创建分配栈空间比线程更小，Golang中通过可增长栈空间，运行时runtime 通过G-P-M调度模型来将 goroutine 多路复用到线程，如果协程过多，也会影响调度以及GC标记清除效率，所以在消耗大量协程的场景下，引入协程池来复用，因为golang runtime调度模型以及channel机制，使用&lt;a href=&#34;https://go.dev/blog/pipelines&#34;&gt;Go Concurrency Patterns&lt;/a&gt; 实现协程池方案很多，golang社区活跃，最好结合需求场景来分析。&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;references&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://hpc.llnl.gov/training/tutorials/introduction-parallel-computing-tutorial&#34;&gt;Introduction to Parallel Computing Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.akkadia.org/drepper/nptl-design.pdf&#34;&gt;nptl-design.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=blob;f=nptl/pthread_create.c;hb=627f5ede70d70c77bdaf857db07404e8bf7f60af#l619&#34;&gt;glibc pthread_create&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/master/kernel/fork.c&#34;&gt;linux v2.6.38+ fork.c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://makelinux.github.io/kernel/map/&#34;&gt;Linux 2.6.36 kernel map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/blog/thread-pools-boost-performance-9x/&#34;&gt;nginx-thread-pools-boost-performance-9x&lt;/a&gt; &lt;a href=&#34;https://segmentfault.com/a/1190000010008012&#34;&gt;翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/&#34;&gt;inside-nginx-how-we-designed-for-performance-scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aosabook.org/en/nginx.html&#34;&gt;AOSA-nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://antirez.com/news/93&#34;&gt;Lazy Redis is better Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://redis.io/topics/benchmarks&#34;&gt;How fast is Redis?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html&#34;&gt;Java线程池实现原理及其在美团业务中的实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www1.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf&#34;&gt;Analysis of the Go runtime scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Bq4y1q7Pi&#34;&gt;Golang操作系统调度原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html&#34;&gt;Scheduling In Go : Part I - OS Scheduler&lt;/a&gt; &lt;a href=&#34;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html&#34;&gt;Part II - Go Scheduler&lt;/a&gt; &lt;a href=&#34;https://www.ardanlabs.com/blog/2018/12/scheduling-in-go-part3.html&#34;&gt;Part III - Concurrency&lt;/a&gt;  &lt;a href=&#34;https://github.com/ardanlabs/gotraining&#34;&gt;gotraining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=f6kdp27TYZs&#34;&gt;Google I/O 2012 - Go Concurrency Patterns &lt;/a&gt; &lt;a href=&#34;https://talks.golang.org/2012/concurrency.slide#1&#34;&gt;「slide」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QDDwwePbDtw&#34;&gt;Google I/O 2013 - Advanced Go Concurrency Patterns&lt;/a&gt;  &lt;a href=&#34;https://talks.golang.org/2013/advconc.slide#1&#34;&gt;「slide」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5zXAHh5tJqQ&#34;&gt;Rethinking Classical Concurrency Patterns&lt;/a&gt;  &lt;strong&gt;&lt;a href=&#34;https://drive.google.com/file/d/1nPdvhB0PutEJzdCq5ms6UI58dp50fcAN/view&#34;&gt;「slide」&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1ETuA2IOmnaQ4j81AtTGT40Y4_Jr6_IDASEKg0t0dBR8/edit&#34;&gt;Go Preemptive Scheduler Design Doc&lt;/a&gt;  &lt;a href=&#34;https://rakyll.org/scheduler/&#34;&gt;Go&amp;rsquo;s work-stealing scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tonybai.com/2017/06/27/an-intro-about-go-portability/&#34;&gt;也谈Go的可移植性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KINIAgRpkDA&#34;&gt;The Design of the Go Assembler&lt;/a&gt; &lt;a href=&#34;https://9p.io/sys/doc/asm.html&#34;&gt;A Manual for the Plan 9 assembler&lt;/a&gt; &lt;a href=&#34;https://github.com/cch123/golang-notes/blob/master/assembly.md&#34;&gt;plan9 assembly 完全解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://time.geekbang.org/column/article/301716&#34;&gt;Pool：性能提升大杀器&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>WAL</title>
      <link>https://weedge.github.io/post/wal/</link>
      <pubDate>Sun, 21 Nov 2021 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/post/wal/</guid>
      
        <description>&lt;h2 id=&#34;序言&#34;&gt;序言&lt;/h2&gt;
&lt;p&gt;​	数据落地之前，如果出现持久化存储引擎实例重启，或者服务当机重启，如何进行故障恢复（Crash Recovery）呢？数据写操作增删改，这些操作状态数据，是如何保证事务中原子性和持久性的呢？ 这些问题数据大拿们提出了&lt;a href=&#34;https://en.wikipedia.org/wiki/Algorithms_for_Recovery_and_Isolation_Exploiting_Semantics&#34;&gt;Algorithms for Recovery and Isolation Exploiting Semantics&lt;/a&gt; ，基于语义的恢复与隔离算法,现代数据库的基础理论；当前主流关系型数据在事务实现上都受到该理论的影响，其中有两种故障恢复的方法： 预写日志(write-ahead logging (WAL) ) 和shadow-page technique；shadow-page 方法简单介绍就是每次事务操作，以page为单位，写时复制的方式，分为Current和Shadow，类似主备的形式，如果commit成功，Current中的page合并到 Shadow中; 如果abort不成功丢弃Current的page; 如果Crash了，从Shadow中的page恢复，对所有未提交事务的回滚操作； 由于shadow-page技术的实现以page为单位，page内无法并发操作，commit/回滚时会有大量垃圾回收操作；本文主要介绍WAL，以及对应持久化存储引擎的实现机制介绍。&lt;/p&gt;
&lt;h2 id=&#34;wal&#34;&gt;WAL&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;预写日志&lt;/strong&gt;( &lt;strong&gt;WAL&lt;/strong&gt; ) 是一系列技术，用于在&lt;a href=&#34;https://en.wikipedia.org/wiki/Database_system&#34;&gt;数据库系统中&lt;/a&gt;提供&lt;a href=&#34;https://en.wikipedia.org/wiki/Atomicity_(database_systems)&#34;&gt;原子性&lt;/a&gt;和&lt;a href=&#34;https://en.wikipedia.org/wiki/Durability_(database_systems)&#34;&gt;持久性&lt;/a&gt;（两个&lt;a href=&#34;https://en.wikipedia.org/wiki/ACID&#34;&gt;ACID&lt;/a&gt;属性）。在将更改写入数据库之前，更改首先记录在日志中，日志必须写入&lt;a href=&#34;https://en.wikipedia.org/wiki/Stable_storage&#34;&gt;稳定存储&lt;/a&gt;（保证任何给定写入操作的原子性，并允许编写对某些硬件和电源故障具有&lt;a href=&#34;https://en.wikipedia.org/wiki/Robustness_(computer_science)&#34;&gt;鲁棒性的&lt;/a&gt;软件）。&lt;/p&gt;
&lt;p&gt;这样做的目的可以通过一个例子来说明。想象一下，当运行它的机器断电时，它正在执行某些操作。重新启动时，该程序可能需要知道它正在执行的操作是成功、部分成功还是失败。如果使用预写日志，程序可以检查此日志并将意外断电时应该执行的操作与实际执行的操作进行比较。在此比较的基础上，程序可以决定撤消已开始的内容、完成已开始的内容或保持原样。&lt;/p&gt;
&lt;p&gt;在使用 WAL 的系统中，所有修改在应用之前都会写入&lt;a href=&#34;https://en.wikipedia.org/wiki/Database_log&#34;&gt;日志&lt;/a&gt;。通常redo和undo信息都存储在日志中。&lt;/p&gt;
&lt;p&gt;注意：写不一定是顺序写，一般&lt;a href=&#34;https://en.wikipedia.org/wiki/Computer_data_storage&#34;&gt;计算机存储&lt;/a&gt; 非易失性的硬件结构对顺序写的性能高于随机写的性能，比如常用的磁盘HDD/SSD; 但是最近基于NVM技术(结合磁盘和内存的特性)的存储硬件PC-RAM(Phase Change Random Access Memory), STT-RAM( Spin Transfer Torque Random Access Memory),  R-RAM(Resistive Random Access Memory)，结合内存中随机访问，磁盘非易失性特性，随机写和顺序写没什么差别，&lt;a href=&#34;http://repository.bilkent.edu.tr/bitstream/handle/11693/37609/Implications%20of%20non-volatile%20memory%20as%20primary%20storage%20for%20database%20management%20systems.pdf&#34;&gt;Implications of Non-Volatile Memory as Primary Storage for Database Management Systems&lt;/a&gt; 这篇论文中提到Pg如果不部署内部的buffer cache，所有写直接写到NVM对应的存储硬件中，可以去掉redo日志，但是undo日志任然需要,在系统错误时复原; 一般学术方案要领先实际工程许多，真正落地在生产环境中，还是用躺过坑的成熟方案 （顺便想到现在一些k/v存储引擎考虑上云，支持云厂商的云盘，可以认为无限容量）。硬件结构决定上层软件存储引擎的设计的优化，以下都是以常用的磁盘HDD/SSD的硬件结构来介绍存储引擎实现WAL技术。&lt;/p&gt;
&lt;h2 id=&#34;mysql-innodb存储引擎&#34;&gt;mysql Innodb存储引擎&lt;/h2&gt;
&lt;p&gt;mysql Innodb存储引擎是通过 redo、undo 日志实现 WAL,主要用于crash 恢复和回滚，满足本地事务中的持久性和原子性，来保证数据一致性；当然innodb引擎为了提高并发读性能，undo log中加入了MVCC (多版本并发控制)相关信息； 另外，mysql server层执行器会写bin log，主要是用来恢复某个时间的点数据以及主从复制数据使用，bin log文件和存储引擎无关；分别简要介绍redo, undo, bin log 文件在mysql中的作用。&lt;/p&gt;
&lt;h3 id=&#34;redolog&#34;&gt;redolog&lt;/h3&gt;
&lt;h4 id=&#34;为什么需要redo-log&#34;&gt;为什么需要redo log？&lt;/h4&gt;
&lt;p&gt;我们都知道，事务的四大特性里面有一个是 &lt;strong&gt;持久性&lt;/strong&gt; ，具体来说就是&lt;strong&gt;只要事务提交成功，那么对数据库做的修改就被永久保存下来了，不可能因为任何原因再回到原来的状态&lt;/strong&gt; 。那么mysql是如何保证一致性的呢？最简单的做法是在每次事务提交的时候，将该事务涉及修改的数据页全部刷新到磁盘中。但是这么做会有严重的性能问题，主要体现在两个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;因为 Innodb是以页为单位进行磁盘交互的，而一个事务很可能只修改一个数据页里面的几个字节，这个时候将完整的数据页刷到磁盘的话，太浪费资源了！&lt;/li&gt;
&lt;li&gt;一个事务可能涉及修改多个数据页，并且这些数据页在物理上并不连续，使用随机IO写入性能太差！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此 mysql设计了redolog ， &lt;strong&gt;具体来说就是只记录事务对数据页做了哪些修改&lt;/strong&gt;，这样就能完美地解决性能问题了(相对而言文件更小并且是顺序IO)。&lt;/p&gt;
&lt;h4 id=&#34;redo-log基本概念&#34;&gt;redo log基本概念&lt;/h4&gt;
&lt;p&gt;redo log包括两部分：一个是内存中的日志缓冲( redo log buffer )，另一个是磁盘上的日志文件(  redo log file )。 mysql 每执行一条 DML 修改写语句，操作的数据在内存中(如果没有会load到内存中)，首先会记修改操作的反操作逻辑数据记录写入undo log buffer中，然后会将修改哪个物理页面做了什么操作记录写入 redo log buffer ，后续某个时间点再一次性将多个操作记录写到 redo log file 和 undo log file。这种 &lt;strong&gt;先写日志，再写磁盘&lt;/strong&gt; 的技术就是 MySQL中的 WAL。&lt;/p&gt;
&lt;p&gt;在计算机操作系统中，用户空间( user space )下的缓冲区数据一般情况下是无法直接写入磁盘的，中间必须经过操作系统内核空间(kernel space )缓冲区( OS Buffer )。因此， redo/undo log buffer 写入 redo/undo log file; 实际上是先写入 OS Buffer ，然后再通过系统调用 fsync() 将其刷到 redo/undo log file 中，过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-static.segmentfault.com/755/731/755731335-aec527828a1323b6_fix732&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;mysql 支持三种将 redo/undo log buffer 写入 redo/undo log file 的时机，可以通过 innodb_flush_log_at_trx_commit  参数配置，各参数值含义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0（延迟写）&lt;/td&gt;
&lt;td&gt;事务提交时不会将 redo/undo log buffer 中日志写入到 os buffer ，而是每秒写入 os buffer 并调用 fsync() 写入到 redo/undo log file 中。也就是说设置为0时是(大约)每秒刷新写入到磁盘中的，当系统崩溃，会丢失1秒钟的数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1（实时写，实时刷）&lt;/td&gt;
&lt;td&gt;事务每次提交都会将 redo/undo log buffer 中的日志写入 os buffer 并调用 fsync() 刷到 redo/undo log file 中。这种方式即使系统崩溃也不会丢失任何数据，但是因为每次提交都写入磁盘，IO的性能较差。一般开启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2（实时写，延迟刷）&lt;/td&gt;
&lt;td&gt;每次提交都仅写入到 os buffer ，然后是每秒调用 fsync() 将 os buffer 中的日志写入到 redo/undo log file 。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://image-static.segmentfault.com/706/634/706634199-04894beff4e7b54f_fix732&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;redo-log记录形式&#34;&gt;redo log记录形式&lt;/h4&gt;
&lt;p&gt;前面说过， redo log 实际上记录数据页的变更，而这种变更记录是没必要全部保存，因此 redo log实现上采用了大小固定，循环写入的方式，当写到结尾时，会回到开头循环写日志。通过&lt;code&gt;show variables like &#39;innodb_log%&#39;; &lt;/code&gt; 查看参数；记录文件形式如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-static.segmentfault.com/390/444/3904443652-cc3225d69e1d0476_fix732&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在innodb存储引擎中，既有 redo log 需要刷盘，还有 数据页 也需要刷盘， redo log 存在的意义主要就是降低对数据页刷盘的要求 。在上图中， write pos 表示 redo log 当前记录的 LSN (逻辑序列号)位置， check point 表示数据页更改记录刷盘后对应 redo log 所处的 LSN (逻辑序列号)位置。 write pos 到 check point 之间的部分是 redo log 空着的部分，用于记录新的记录； check point 到 write pos 之间是 redo log 待落盘的数据页更改记录。当 write pos 追上 check point 时，会先推动 check point 向前移动，空出位置再记录新的日志。&lt;/p&gt;
&lt;p&gt;启动 innodb 的时候，不管上次是正常关闭还是异常关闭，总是会进行恢复操作。因为 redo log 记录的是数据页的物理变化，因此恢复的时候速度比逻辑日志(如 binlog )要快很多。 重启 innodb 时，首先会检查磁盘中数据页的 LSN ，如果数据页的 LSN 小于日志中的 LSN ，则会从 checkpoint 开始恢复。 还有一种情况，在宕机前正处于checkpoint 的刷盘过程，且数据页的刷盘进度超过了日志页的刷盘进度，此时会出现数据页中记录的 LSN 大于日志中的 LSN，这时超出日志进度的部分将不会重做，因为这本身就表示已经做过的事情，无需再重做。&lt;/p&gt;
&lt;p&gt;Mysql8.0 InnoDB存储引擎写操作，对redo log的写操作进行无锁全异步设计优化，增加；具体详细见官方文档：&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-logging.html&#34;&gt;优化 InnoDB 重做日志&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;undolog&#34;&gt;undolog&lt;/h3&gt;
&lt;p&gt;数据库事务四大特性中有一个是 &lt;strong&gt;原子性&lt;/strong&gt; ，具体来说就是 &lt;strong&gt;原子性是指对数据库的一系列操作，要么全部成功，要么全部失败，不可能出现部分成功的情况&lt;/strong&gt;。实际上， &lt;strong&gt;原子性&lt;/strong&gt; 底层就是通过 undo log 实现的。 undo log 主要记录了数据的逻辑变化，比如一条  INSERT 语句，对应一条 DELETE 的 undo log ，对于每个 UPDATE 语句，对应一条相反的 UPDATE 的undo log ，这样在发生错误时，就能回滚到事务之前的数据状态。同时， undo log 也是 MVCC (多版本并发控制)实现的关键；通过 &lt;code&gt;show variables like &#39;%undo%&#39;; &lt;/code&gt;查看参数。&lt;/p&gt;
&lt;h3 id=&#34;binlog&#34;&gt;binlog&lt;/h3&gt;
&lt;p&gt;binlog 用于记录数据库执行的写入性操作(不包括查询)信息，以二进制的形式保存在磁盘中。 binlog 是 mysql的逻辑日志，并且由 Server 层进行记录，使用任何存储引擎的 mysql 数据库都会记录 binlog 日志（&lt;code&gt;log_bin&lt;/code&gt; 打开的情况下）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;逻辑日志&lt;/strong&gt;： 可以简单理解为记录的就是sql语句 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理日志&lt;/strong&gt;： mysql 数据最终是保存在数据页中的，物理日志记录的就是数据页变更 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;binlog 是通过追加的方式进行写入的，可以通过 max_binlog_size 参数设置每个 binlog文件的大小，当文件大小达到给定值之后，会生成新的文件来保存日志。binlog相关参数通过&lt;code&gt;show variables like &amp;quot;%binlog%&amp;quot;;&lt;/code&gt; 查看；通过&lt;code&gt;show variables like &amp;quot;%log_bin%&amp;quot;;&lt;/code&gt;查看binlog是否开启,以及binlog日志目录，8.0版本默认时开启。&lt;/p&gt;
&lt;h4 id=&#34;binlog使用场景&#34;&gt;binlog使用场景&lt;/h4&gt;
&lt;p&gt;在实际应用中， binlog 的主要使用场景有两个，分别是 &lt;strong&gt;主从复制&lt;/strong&gt; 和 &lt;strong&gt;数据恢复&lt;/strong&gt; 。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;主从复制&lt;/strong&gt; ：在 Master 端开启 binlog ，然后将 binlog 发送到各个 Slave 端， Slave 端重放 binlog 从而达到主从数据一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据恢复&lt;/strong&gt; ：通过使用 mysqlbinlog 工具来恢复数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;binlog刷盘时机&#34;&gt;binlog刷盘时机&lt;/h4&gt;
&lt;p&gt;对于 InnoDB 存储引擎而言，只有在事务提交时才会记录 biglog ，此时记录还在内存中，那么 biglog是什么时候刷到磁盘中的呢？ mysql 通过 sync_binlog 参数控制 biglog 的刷盘时机，取值范围是 0-N：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0：不去强制要求，由系统自行判断何时写入磁盘；&lt;/li&gt;
&lt;li&gt;1：每次 commit 的时候都要将 binlog 写入磁盘；一般开启&lt;/li&gt;
&lt;li&gt;N：每N个事务，才会将 binlog 写入磁盘。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上面可以看出， sync_binlog 最安全的是设置是 1 ，这也是 MySQL 5.7.7之后版本的默认值。但是设置一个大一些的值可以提升数据库性能，因此实际情况下也可以将值适当调大，牺牲一定的一致性来获取更好的性能。&lt;/p&gt;
&lt;h4 id=&#34;binlog日志格式&#34;&gt;binlog日志格式&lt;/h4&gt;
&lt;p&gt;binlog 日志有三种格式，分别为 STATMENT 、 ROW 和 MIXED 。在 MySQL 5.7.7 之前，默认的格式是 STATEMENT ， MySQL 5.7.7 之后，默认值是 ROW 。日志格式通过 binlog-format 指定; &lt;code&gt;show variables like &amp;quot;%binlog_format%&amp;quot;;&lt;/code&gt;查看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;STATMENT ： 基于 SQL 语句的复制( statement-based replication, SBR )，每一条会修改数据的sql语句会记录到 binlog 中 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点： 不需要记录每一行的变化，减少了 binlog  日志量，节约了  IO  , 从而提高了性能；&lt;/li&gt;
&lt;li&gt;缺点： 在某些情况下会导致主从数据不一致，比如执行本地时间操作； &lt;code&gt;SELECT NOW(),SYSDATE(),SLEEP(3),NOW(),SYSDATE();&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ROW ： 基于行的复制( row-based replication, RBR )，不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点： 不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题 ；&lt;/li&gt;
&lt;li&gt;缺点： 会产生大量的日志，尤其是 alter table 的时候会让日志暴涨；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MIXED ： 基于 STATMENT 和 ROW 两种模式的混合复制( mixed-based replication, MBR )，一般的复制使用 STATEMENT 模式保存 binlog ，对于 STATEMENT 模式无法复制的操作使用 ROW 模式保存 binlog；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;binlog日志主要是用来主从同步复制数据以及数据恢复，是mysql server层执行器进行操作(主)写入和(从)读入(relaylog)；&lt;/p&gt;
&lt;p&gt;数据可以按天按周进行备份，顺序写入，没有大小限制(文件大小有限，但是整体没有限制，多个文件binlog.**可以通过binlog.index定位)；&lt;/p&gt;
&lt;h3 id=&#34;redo-log与binlog区别&#34;&gt;redo log与binlog区别&lt;/h3&gt;
&lt;p&gt;不同于redo log, 虽然两者都可以用来恢复数据，但是在mysql中innodb存储引擎的wal机制下生成的redolog有大小限制， redo log 实际上记录数据页的变更，而这种变更记录是没必要全部保存，因此 redo log实现上采用了大小固定，循环写入的方式，当写到结尾时，会回到开头循环写日志；而binlog主要是用来数据恢复，如果备份时间长，用户在某段时间有误操作，需要回滚操作，就可以同binlog来恢复到某个时间点的日志状态；对于redo log是做不到的；而且binlog 不是存储引擎特有的，所以可以在不同的存储引擎公用来恢复数据场景；区别如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;redo log&lt;/th&gt;
&lt;th&gt;binlog&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;文件大小&lt;/td&gt;
&lt;td&gt;redo log 的大小是固定的。&lt;/td&gt;
&lt;td&gt;binlog 可通过配置参数 max_binlog_size 设置每个 binlog 文件的大小。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;实现方式&lt;/td&gt;
&lt;td&gt;redo log 是 InnoDB 引擎层实现的，并不是所有引擎都有。&lt;/td&gt;
&lt;td&gt;binlog 是 Server 层实现的，MySQL 3.23.14 中引入的，所有引擎都可以使用 binlog 日志，服务器运行期间生成的服务器全局状态更改的跟踪日志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;记录方式&lt;/td&gt;
&lt;td&gt;redo log 采用循环写的方式记录，当写到结尾时，会回到开头循环写日志。&lt;/td&gt;
&lt;td&gt;binlog通过追加的方式记录，当文件大小大于给定值后，后续的日志会记录到新的文件上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;适用场景&lt;/td&gt;
&lt;td&gt;redo log 适用于崩溃恢复(crash-safe)，重启恢复的时候，通过check point和write pos 来恢复数据&lt;/td&gt;
&lt;td&gt;binlog 适用于主从复制和数据恢复，某个时间点的操作记录归档，可以按时间点进行恢复；以及主从之间的复制重放, 实现高可用的基础，以及订阅binlog进行不同分布式存储数据的同步&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;由 binlog 和 redo log 的区别可知：因为mysql 早期自带的MyISAM存储引擎设计用 binlog 日志只用于归档，进行数据恢复，只依靠 binlog 是没有 crash-safe 能力的。innodb存储引擎引入mysql之后，引入redo/undo log文件来支持事务持久性和原子性来保证写入数据的一致性；但只有 redo log 也不行，因为 redo log 是 InnoDB 特有的，循环写入，无法还原不在这个redo log中的记录，比如从服务启动或者记录数据落后很多(除非是shared storage架构机制的云厂商数据库，像&lt;a href=&#34;https://www.allthingsdistributed.com/files/p1041-verbitski.pdf&#34;&gt;Aurora&lt;/a&gt;,&lt;a href=&#34;https://www.vldb.org/pvldb/vol11/p1849-cao.pdf&#34;&gt;PolarDB&lt;/a&gt;)；因此需要 binlog 和 redo log二者同时记录，才能保证当数据库发生误删或者宕机重启时，数据不会丢失。&lt;/p&gt;
&lt;h3 id=&#34;两阶段提交&#34;&gt;两阶段提交&lt;/h3&gt;
&lt;p&gt;为了保证写入两份日志redo log, binlog 最终恢复数据是一致的，采用&lt;a href=&#34;https://en.wikipedia.org/wiki/Two-phase_commit_protocol&#34;&gt;两阶段提交(2pc)&lt;/a&gt;的机制(XA,内部/全局事务 innodb提供一样的操作)，mysql server 执行器 在调用innodb存储引擎接口进行写操作的时候，起到一个事务协调者的作用,通过TC_LOG(Transaction Coordinator Log)基类定义了事务日志需要实现的接口: open, prepare, commit, rollback, close；实现这些接口的类：TC_LOG_DUMMY(disable the logging), TC_LOG_MMAP(mmap logging), MYSQL_BIN_LOG(binlog)；主要是是查看MYSQL_BIN_LOG类中&lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/sql/binlog.cc#L7881&#34;&gt;prepare&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/sql/binlog.cc#L7934&#34;&gt;commit&lt;/a&gt; 的实现；prepare 和 commit最终会调用存储引擎初始化时指向的handlerton对象对应函数；（这种接口隔离的常用设计，将调用方和实现方进行解耦，根据参数配置来绑定实现方，运行时动态调用）&lt;/p&gt;
&lt;p&gt;mysql是以plugin的方式管理存储引擎，replication(主从副本同步)插件和其他插件（通过&lt;code&gt;SHOW PLUGINS;&lt;/code&gt;查看)；具体的插件代码在&lt;a href=&#34;https://github.com/mysql/mysql-server/tree/8.0/plugin&#34;&gt;plugin&lt;/a&gt;文件中，简单的插件示例&lt;a href=&#34;https://github.com/mysql/mysql-server/tree/8.0/plugin/rewrite_example&#34;&gt;rewrite_example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mysqld 启动时通过配置初始的存储引擎(默认innodb)，调用&lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/sql/mysqld.cc#L5815&#34;&gt;init_server_components&lt;/a&gt; 调用innodb存储引擎的接口进行初始化ha_handler, 在&lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/storage/innobase/handler/ha_innodb.cc#L4935&#34;&gt;innodb_init&lt;/a&gt;中进行初始化, 比如刷盘操作 innobase_hton-&amp;gt;flush_logs = innobase_flush_logs; 然后在sql/handler中定义的相关接口调用, 比如&lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/sql/handler.cc#L2459&#34;&gt;ha_flush_logs&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;安装replication插件时会注册插件中相应的方法加入observer 列表中，运行触发的时候以AOP的方式RUN_HOOK 扫描observer列表Observer_info-&amp;gt;observer调用对应插件函数；replication插件需要实现以下&lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/sql/replication.h&#34;&gt;replication文件中&lt;/a&gt;相关结构体的方法(接口) 才能加载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;struct Trans_observer /* Observes and extends transaction execution */
struct Server_state_observer /* Observer server state */
struct Binlog_transmit_observer /* Observe and extends the binlog dumping thread. */
struct Binlog_relay_IO_observer /* Observes and extends the service of slave IO thread. */
struct Binlog_storage_observer /* Observe binlog logging storage */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里会有各种日志的刷新机制，可以通过&lt;code&gt;show variables like &#39;%innodb%flush%&#39;; show variables like &#39;sync_binlog&#39;;&lt;/code&gt;获取对应的参数，可以去官网&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/server-option-variable-reference.html&#34;&gt;Server Option, System Variable, and Status Variable Reference&lt;/a&gt; 查找对应的详情进行配置优化；&lt;/p&gt;
&lt;p&gt;当开启binlog时, MySQL默认使用该隐式XA模式，开启自动提交事务autocommit。事务的提交流程相对比较复杂，执行简单的update操作，简述如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;0. 执行器数据获取修改：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行器调用innodb存储引擎接口获取满足条件的数据，通过树索引查找/全表查找， 如果数据在buffer pool中查找到，返回数据；否则从磁盘表空间文件中读取数据page到buffer pool  clean page中，返回数据；无数据，流程终止返回；&lt;/li&gt;
&lt;li&gt;执行器修改找到的数据，将修改的数据 调用innodb存储引擎接口写入新数据，进行两阶段提交；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;事务的提交过程入口点位于 &lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/sql/handler.cc#L1592&#34;&gt;ha_commit_trans&lt;/a&gt;函数，以mysql binlog 为事务2pc协调者为例，事务提交的过程如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. mysql bin log 事务2pc协调者 处理 准备prepare阶段&lt;/strong&gt;：(tc_log-&amp;gt;prepare)&lt;/p&gt;
&lt;p&gt;MYSQL_BIN_LOG::prepare(THD *thd, bool all)  设置 thd-&amp;gt;durability_property = HA_IGNORE_DURABILITY; 用于在存储引擎准备阶段不刷新事务日志redo/undo log 到磁盘日志文件中；&lt;/p&gt;
&lt;p&gt;调用流程：ha_prepare_low → innobase_xa_prepare → trx_prepare_for_mysql →   &lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/storage/innobase/trx/trx0trx.cc#L2919&#34;&gt;static void trx_prepare(trx_t *trx)&lt;/a&gt;   → trx_prepare_low → trx_undo_set_state_at_prepare&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;执行器调用innodb存储引擎接口进行修改操作，首先写入数据的旧值至undo log buffer中，更新InnoDB的undo回滚段，将其设置为Prepare状态（&lt;code&gt;TRX_UNDO_PREPARED&lt;/code&gt;）写入mlog中，返回 redo log 的LSN,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新buffer pool中的数据(如果插入需要从free(free list)变成clean page(lru list)，free list 不够时需要从flush ist或者lru list淘汰一定的page变成free page 加入free list); 修改的clean page(lru list)变成 dirty page(lru list)(更新的数据页在缓存中，还未刷盘)；dirty page写入flush list； 为了提高写性能异步线程刷盘(刷盘时机可以在commit之后；MySQL 5.7引入了page cleaner线程)&lt;/p&gt;
&lt;p&gt;Tips: 在flush list上的页面一定在lru List上，但是反之则不成立。一个数据页可能会在不同的时刻被修改多次，在数据页上记录了最老(也就是第一次)的一次修改的LSN，即oldest_modification。不同数据页有不同的oldest_modification，flush list中的节点按照oldest_modification排序，链表尾是最小的，也就是最早被修改的数据页，当需要从flush list中淘汰页面时候，从链表尾部开始淘汰。加入flush list，需要使用flush_list_mutex保护，所以能保证flush list中节点的顺序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时将数据页的修改记录LSN写入redo log buffer中，准备提交事务，此时 redo log 处于 prepare 状态，如果thd-&amp;gt;durability_property = HA_IGNORE_DURABILITY, 将&lt;code&gt;LSN&lt;/code&gt; 写入redo log 磁盘文件中；原子化操作&lt;code&gt;trx_t&lt;/code&gt; 事务状态为 PREPARED (用于事务隔离操作)； 将&lt;code&gt;gtid_desc&lt;/code&gt;写入undolog 表空间中；然后告知执行器执行完成了，随时可以提交事务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tips: 这里会出现redo log file写满的情况，buffer 写入会hang住，MySQL就会停下手头的任务，先把脏页刷到磁盘里，才能继续干活，会导致MySQL的服务器的tps有明显的波动； 默认开启了innodb_adaptive_flushing 算法进行优化，在redo log file还没有满的时候，会根据redo log file生成的速度和刷新频率来将redo log file中的脏页刷入磁盘表空间文件中；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. mysql binlog 事务2pc协调者 处理 提交commit阶段：&lt;/strong&gt;(tc_log-&amp;gt;commit)&lt;/p&gt;
&lt;p&gt;调用流程：TC_LOG::enum_result MYSQL_BIN_LOG::commit(THD *thd, bool all) →&lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/sql/binlog.cc#L8717&#34;&gt;int MYSQL_BIN_LOG::ordered_commit(THD *thd, bool all, bool skip_commit)&lt;/a&gt;  , 如果没有开启log_bin，没有bin log文件，直接跳至commit阶段；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;组提交&lt;/strong&gt; (流程见代码中介绍 &lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/sql/binlog.h#L568-L641&#34;&gt;ordered_commit&lt;/a&gt; )：组提交第一眼看着有点懵逼，可以结合这片文章 &lt;a href=&#34;https://developer.aliyun.com/article/617776&#34;&gt;[图解MySQL]MySQL组提交(group commit)&lt;/a&gt; 了解；主要是为了提升事务吞吐量设计的方案(&lt;strong&gt;原则：尽量减少磁盘IO, 利用持久盘的特性顺序写&lt;/strong&gt;)；如同木桶效应一样，redo log 和 binlog 两者其中有一个没有组提交，都会降低事务吞吐量，所以最好的方式redo log 和 binlog 两者都组队提交; mysql设计者将组提交从flush阶段开始优化，将其分为几个阶段： flush 阶段、sync 阶段、(replication复制阶段) 、commit 阶段；其中replication复制阶段以HOOK的方式动态运行对于的replication复制策略，默认是异步复制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;binlog_order_commits&lt;/code&gt;参数控制innodb commit顺序和binlog写入顺序是否一致，默认启用保证顺序一致，方便备份和快速恢复；和binlog组提交配合使用，这个参数来自官网的介绍：&lt;/p&gt;
&lt;p&gt;当在复制源服务器上启用此变量时（这是默认设置），发送给存储引擎的事务提交指令在单个leader线程上被序列化，因此事务总是按照写入binlog的相同顺序提交。禁用此变量允许使用多个线程发出事务提交指令。与binlog组提交结合使用，这可以防止单个事务的提交率成为吞吐量的瓶颈，因此可能会产生性能改进。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flush阶段：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;调用流程：TC_LOG::enum_result MYSQL_BIN_LOG::commit(THD *thd, bool all) →&lt;a href=&#34;&#34;&gt;int MYSQL_BIN_LOG::ordered_commit(THD *thd, bool all, bool skip_commit)&lt;/a&gt;  →  &lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/sql/binlog.cc#L8301&#34;&gt;int MYSQL_BIN_LOG::process_flush_stage_queue&lt;/a&gt; ;&lt;/p&gt;
&lt;p&gt;RUN_HOOK 去获取加载的插件，rpl handler Binlog_storage_delegate::after_flush FOREACH_OBSERVER宏 遍历observer列表Observer_info-&amp;gt;observer调用对应replication插件函数&lt;/p&gt;
&lt;p&gt;最终调用&lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/storage/innobase/os/os0file.cc#L2847&#34;&gt;os_file_fsync_posix&lt;/a&gt; flush redolog to disk ; 根据不同的操作系统来调用，unix操作系统调用fsync/fdatasync函数刷盘, fsync会确保OS cache中的数据直到写磁盘操作结束才会返回，并且写入元数据，而fdatasync不会; 如果想不走OS cache直接写磁盘，对打开/创建的文件句柄加上O_DIRECT属性，一般用于写系统表空间数据落盘；&lt;/p&gt;
&lt;p&gt;此时process_flush_stage_queue处理会形成一组队列，由组leader(一个组中最早开始的事务)依次为别的线程写binlog文件 在准备写binlog前，会先调用ha_flush_logs -&amp;gt; innobase_flush_logs接口，将存储的日志写到最新的LSN；然后再写binlog到文件; 这样做的目的是为了提升组提交的效率。&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;执行器 调用innodb存储引擎innobase_flush_logs-&amp;gt;log_flush_low-&amp;gt;redo_space_flush-&amp;gt;os_file_flush-&amp;gt;&lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/storage/innobase/os/os0file.cc#L2847&#34;&gt;os_file_fsync_posix&lt;/a&gt; 接口 将 redo/undo log buffer中的数据写入redo/undo log file 磁盘中；&lt;/li&gt;
&lt;li&gt;执行器 调用 MYSQL_BIN_LOG::flush_thread_caches 将 thread caches binlog缓冲数据  写入 bin log(xid,GTID)中(还未刷盘),通过 &lt;code&gt;show variables like &#39;%binlog_cache%&#39;;&lt;/code&gt;查看缓冲大小； 并且设置好事务的写入位置m_trans_end_pos，当事务提交commit阶段的时候，直接获取位置提交；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Sync_binlog阶段：&lt;/strong&gt; &lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/sql/binlog.cc#L8506&#34;&gt;std::pair&amp;lt;bool, bool&amp;gt; MYSQL_BIN_LOG::sync_binlog_file(bool force)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RUN_HOOK 去获取加载的插件，rpl handler Binlog_storage_delegate::after_sync FOREACH_OBSERVER宏遍历observer列表Observer_info-&amp;gt;observer调用对应replication插件函数；&lt;/p&gt;
&lt;p&gt;最终调用 &lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/mysys/my_sync.cc#L84&#34;&gt;int my_sync(File fd, myf my_flags)&lt;/a&gt;  Sync binlog data in file to disk&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;sync_binlog&lt;/code&gt;计数超过配置值，则进行一次文件fsync，n&amp;gt;1 开启组提交，参数&lt;code&gt;sync_binlog&lt;/code&gt;的含义不是指的这么多个事务之后做一次fsync，而是多个事务一组之后做一次fsync，&lt;code&gt;binlog_group_commit_sync_delay&lt;/code&gt;,&lt;code&gt;binlog_group_commit_sync_no_delay_count&lt;/code&gt; 这些参数见官网文档；&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;开始生成这个时间点的逻辑操作日志格式，通过&lt;code&gt;sync_binlog&lt;/code&gt; flush策略异步将thead caches中的数据批量写入到磁盘binlog文件binlog.**/binlog.index中； 通过 &lt;code&gt;show binlog events;&lt;/code&gt;来查看binlog文件相关的信息，也可以对单个文件查看；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Async/Semisync/Group 异步/半同步/组复制阶段：&lt;/strong&gt; (写操作都在主上)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异步复制&lt;/strong&gt;：主库在记录完binlog，执行完自己的事务之后就会直接返回，mysql主从模式默认是异步复制；异步复制流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dev.mysql.com/doc/refman/8.0/en/images/async-replication-diagram.png&#34; alt=&#34;async-replication-diagram&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;半同步复制&lt;/strong&gt;：主的事务需要等一台从同步binlog日志提交到Relay Log中(sync_relay=1)，返回ack，主库提交事务；半同步流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dev.mysql.com/doc/refman/8.0/en/images/semisync-replication-diagram.png&#34; alt=&#34;semisync-replication-diagram&#34;&gt;&lt;/p&gt;
&lt;p&gt;从MySQL5.5开始 以插件的形式支持半同步复制；如果需要支持，主从都需要安装半同步插件库；对应的代码在&lt;a href=&#34;https://github.com/mysql/mysql-server/tree/8.0/plugin/semisync&#34;&gt;plugin/semisync&lt;/a&gt;文件夹中。&lt;/p&gt;
&lt;p&gt;主 &lt;code&gt;install plugin rpl_semi_sync_master soname &#39;semisync_master.so&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;install plugin rpl_semi_sync_slave soname &#39;semisync_slave.so&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;并且打开半同步复制，&lt;code&gt;set global rpl_semi_sync_master_enabled=1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中通过参数&lt;code&gt;rpl_semi_sync_master_wait_point&lt;/code&gt;来决定什么时候提交事务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;after_sync&lt;/strong&gt; 主库先不提交事务，等待某一个从库返回了结果之后，再提交事务，在返回结构通知客户端。这样一来，如果从库在没有任何返回的情况下宕机了，master这边也无法提交事务。主从仍然是一致的，mysql5.7之后默认值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;after_commit&lt;/strong&gt; 主库先提交事务，等待从库返回结果再通知客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;组复制&lt;/strong&gt;：基于原生复制及 paxos 协议，提供一致数据安全保证，一种可用于实现容错系统的技术；具体详情见官方文档：&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/group-replication.html&#34;&gt;MySQL8.0 Group Replication&lt;/a&gt;；组复制流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dev.mysql.com/doc/refman/8.0/en/images/gr-replication-diagram.png&#34; alt=&#34;gr-replication-diagram&#34;&gt;&lt;/p&gt;
&lt;p&gt;MySQL 5.7.17版本中引入MySQL 组复制，同样也是以插件的形式支持; 对应的代码在&lt;a href=&#34;https://github.com/mysql/mysql-server/tree/8.0/plugin/group_replication&#34;&gt;plugin/group_replication&lt;/a&gt;文件夹中。一组副本机器安装插件都是&lt;code&gt;INSTALL PLUGIN group_replication SONAME &#39;group_replication.so&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;如果开启的主从复制(默认异步)1:n，主库会等待从库I/O线程建立连接之后，创建binlog dump线程，通知slave有数据更新，当I/O线程请求日志内容时，会将此时的binlog名称和当前更新的位置pos同时传给slave的I/O线程, 把binlog event发送给从库I/O线程，从库I/O线程获取到binlog event之后将其写入到自己的Relay Log中，然后从库启动SQL线程，将Relay中的数据进行重放，完成从库的数据更新；为了保证不重复更新，binlog/relaylog 中记录了GTID（mysql5.6加入）, 全局唯一, 如果relaylog中已有GTID, 则执行GTID自动跳过，意味着在源上提交的事务只能在副本上应用一次，这有助于保证一致性;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外如果主从复制过程突然中断了，或者主从切换了，重启之后发现SQL线程实际执行到位置和数据库记录的不一致；mysql5.6之后将复制的进度放在系统的&lt;code&gt;mysql.slave_relay_log_info&lt;/code&gt;innodb表里，并且把更新进度、SQL线程执行用户事务绑定成一个事务执行。即使宕机了，可以通过MySQL内建的崩溃恢复机制来使实际执行的位置和数据库保存的进度恢复到一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Commit阶段:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;调用流程：int MYSQL_BIN_LOG::finish_commit(THD *thd) -&amp;gt; ha_commit_low -&amp;gt; innobase_commit -&amp;gt; &lt;a href=&#34;https://github.com/mysql/mysql-server/blob/8.0/storage/innobase/trx/trx0trx.cc#L2199&#34;&gt;void trx_commit(trx_t *trx)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RUN_HOOK 去获取加载的插件，rpl handler Trans_delegate::after_commit  FOREACH_OBSERVER宏遍历observer列表Observer_info-&amp;gt;observer调用对应replication插件函数；&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;
&lt;p&gt;只有binlog写入磁盘成功之后，执行器才会调用innodb存储引擎接口，从队列中获取事务组依次进行innodb commit 提交释放事务，将redo log中已经prepare的事务提交写入commit标记，并且写入binlog位点；最后调用MYSQL_BIN_LOG::rotate 是否切换binlog文件(在切换文件期间，使用一个防止新的提交组执行刷新阶段的锁，并等待直到准备好的事务的计数器变为0，然后才创建新文件)，如果切成新文件， 调用MYSQL_BIN_LOG::purge()刷盘；结束ordered_commit 组提交流程,返回提交；&lt;/p&gt;
&lt;p&gt;Tips: Commit阶段不用刷盘，Flush阶段中的redo log刷盘已经足够保证数据库崩溃时的数据安全了; Commit阶段队列的作用是承接Sync阶段的事务，完成最后的引擎提交，使得Sync可以尽早的处理下一组事务，最大化组提交的效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;整体更新流程&#34;&gt;整体更新流程：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weedge/mypic/master/mysql-innodb-w.drawio.png&#34; alt=&#34;mysql-innodb-w&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;崩溃恢复&#34;&gt;崩溃恢复&lt;/h3&gt;
&lt;p&gt;更新流程中写入redo log的过程拆成了两个步骤prepare和commit 两个阶段；如果不使用两阶段提交，数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。在崩溃恢复中，&lt;!-- raw HTML omitted --&gt;是以 binlog 中的 xid 和 redolog 中的 xid 进行比较，xid 在 binlog 里存在则提交，不存在则回滚，以及判断redo log中是否有commit标识&lt;!-- raw HTML omitted --&gt;；崩溃恢复时具体的情况:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;binlog无记录，redolog无记录：在redolog写之前crash, 无prepare状态，无undo log 记录，恢复操作：无，无需关心；&lt;/li&gt;
&lt;li&gt;binlog无记录，redolog无记录：在redolog写之前crash, 无prepare状态，有undo log 记录，恢复操作：通过undo log回滚事务；&lt;/li&gt;
&lt;li&gt;binlog有记录，redolog有记录：redolog状态prepare， 则判断对应的事务是否存在完整的binlog，恢复操作：如果是, 则提交事务，否则, 通过undo log回滚事务;&lt;/li&gt;
&lt;li&gt;如果redo log里面的事务是完整的, 也就是有了commit标识, 恢复操作：直接提交事务；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;对于需要持久化的数据库系统，避免不了事务在处理过程中，突然中断的情况；WAL通过预写日志的方式在事务提交之前，需要把修改重放记录和撤销详细记录写入日志文件中，以便在故障后恢复数据；事务开始后，所有对数据库的修改在发送到缓冲池之前都被记录在内存中的WAL缓冲区中；事务提交之前，必须把WAL缓冲区刷新到磁盘。mysql innodb存储引擎引入redo/undo log文件来支持事务持久性和原子性，由于mysql binlog用来归档数据记录恢复和复制，为了保证写入两份日志redo log, binlog 最终恢复数据是一致的，采用两阶段提交机制，通过源码了解了些整体WAL的实现；以及崩溃时候需要用日志进行恢复。(其他持久化存储系统的WAL实现，待续)&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;references&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Write-ahead_logging&#34;&gt;Write-ahead_logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Algorithms_for_Recovery_and_Isolation_Exploiting_Semantics&#34;&gt;ARIES:Algorithms_for_Recovery_and_Isolation_Exploiting_Semantics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cs.stanford.edu/people/chrismre/cs345/rl/aries.pdf&#34;&gt;aries.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OceanBase-Partner/lectures-on-dbms-implementation/blob/main/lecture-6.md#642-%E7%BC%93%E5%86%B2%E6%B1%A0%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5&#34;&gt;缓冲池管理策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mesl.ucsd.edu/pubs/SOSP2013-MARS.pdf&#34;&gt;From ARIES to MARS: Transaction Support for Next-Generation, Solid-State Drives.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://repository.bilkent.edu.tr/bitstream/handle/11693/37609/Implications%20of%20non-volatile%20memory%20as%20primary%20storage%20for%20database%20management%20systems.pdf&#34;&gt;Implications of Non-Volatile Memory as Primary Storage for Database Management Systems.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infoscience.epfl.ch/record/170505/files/aether-smpfulltext.pdf&#34;&gt;Scalability of write-ahead logging on multicore and multisocket hardware.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vldb.org/pvldb/vol10/p337-arulraj.pdf&#34;&gt;WBL.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=S9nctHdkggk&#34;&gt;ARIES Overview, Types of Log Records, ARIES Helper Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4VGkRXVM5fk&#34;&gt;ARIES Database Recovery (CMU Databases Systems / Fall 2019)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/internals/en/binary-log.html&#34;&gt;mysql binary-log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mysql.taobao.org/monthly/2021/10/01/&#34;&gt;MySQL · 引擎特性 · 庖丁解InnoDB之UNDO LOG&lt;/a&gt;  &lt;a href=&#34;http://catkang.github.io/2020/02/27/mysql-redo.html&#34;&gt;庖丁解InnoDB之REDO LOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mysql.taobao.org/monthly/2020/05/09/&#34;&gt;MySQL · 引擎特性 · 基于GTID复制实现的工作原理&lt;/a&gt;  &lt;a href=&#34;http://mysql.taobao.org/monthly/2020/05/07/&#34;&gt;MySQL · 源码分析 · 内部 XA 和组提交&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://time.geekbang.org/column/article/73161&#34;&gt;日志和索引相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.aliyun.com/article/617776&#34;&gt;[图解MySQL]MySQL组提交(group commit)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mysql.taobao.org/monthly/2018/07/01/&#34;&gt;MySQL · 引擎特性 · WAL那些事儿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/372300181&#34;&gt;无处不在的 MySQL XA 事务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/server-option-variable-reference.html&#34;&gt;Server Option, System Variable, and Status Variable Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://icyfenix.cn/architect-perspective/general-architecture/transaction/local.html&#34;&gt;凤凰架构-本地事务&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
  </channel>
</rss>
