<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Todoes on 时间飘过</title>
    <link>https://weedge.github.io/todo/</link>
    <description>Recent content in Todoes on 时间飘过</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 07 Feb 2023 10:26:23 +0800</lastBuildDate><atom:link href="https://weedge.github.io/todo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>源码阅读草稿-leveldb</title>
      <link>https://weedge.github.io/todo/leveldb-viewcode/</link>
      <pubDate>Tue, 07 Feb 2023 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/todo/leveldb-viewcode/</guid>
      <description>安装 leveldb源码使用tag 1.23, 在本地macOS 下通过vscode查看源码，编译debug如下： git clone --recurse-submodules https://github.com/google/leveldb.git &amp;amp;&amp;amp; cd leveldb &amp;amp;&amp;amp; git checkout 1.23 brew install gflags brew install snappy mkdir -p build &amp;amp;&amp;amp;</description>
    </item>
    
    <item>
      <title>policy worker</title>
      <link>https://weedge.github.io/todo/policyworker/</link>
      <pubDate>Wed, 10 Jun 2020 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/todo/policyworker/</guid>
      <description>策略模型 package main import ( &amp;#34;sync/atomic&amp;#34; &amp;#34;time&amp;#34; ) func loadConfig() map[string]string { // 从数据库或者文件系统中读取配置信息，然后以map的形式存放在内存里 return make(map[string]string) } func requests() chan int { // 将从外界中接受到的请求放</description>
    </item>
    
    <item>
      <title>abtest</title>
      <link>https://weedge.github.io/todo/abtest/</link>
      <pubDate>Sat, 23 Dec 2017 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/todo/abtest/</guid>
      <description></description>
    </item>
    
    <item>
      <title>消息队列</title>
      <link>https://weedge.github.io/todo/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 12 Nov 2017 10:26:23 +0800</pubDate>
      
      <guid>https://weedge.github.io/todo/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
      <description>消息队列介绍what 协议： MQTT(Message Queuing Telemetry Transport，消息队列遥测传输，基于二进制消息的发布/订阅编程模式的消息协议): http://docs.emqtt.cn/zh_CN/latest/mqtt.html https://zhuanlan.zhihu.com/p/20888181 简单的协议:htt</description>
    </item>
    
    <item>
      <title></title>
      <link>https://weedge.github.io/todo/bitset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://weedge.github.io/todo/bitset/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://weedge.github.io/todo/goroutine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://weedge.github.io/todo/goroutine/</guid>
      <description>goroutine 设计目的 操作系统中的线程是cpu调度的最小单元，申请的钟空间而控制线程调度是由系统来控制的，对于并发处理程序，线程之间切换会有系统调用开销</description>
    </item>
    
    <item>
      <title></title>
      <link>https://weedge.github.io/todo/grpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://weedge.github.io/todo/grpc/</guid>
      <description>gRPC调用 1、客户端（gRPC Sub）调用 A 方法，发起 RPC 调用 2、对请求信息使用 Protobuf 进行对象序列化压缩（通过接口描述语言IDL，定义schem</description>
    </item>
    
    <item>
      <title></title>
      <link>https://weedge.github.io/todo/pool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://weedge.github.io/todo/pool/</guid>
      <description>内存池(memory pool) nginx pool 连接池(connection pool) envoy ConnectionPool 总结</description>
    </item>
    
    <item>
      <title></title>
      <link>https://weedge.github.io/todo/replication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://weedge.github.io/todo/replication/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://weedge.github.io/todo/rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://weedge.github.io/todo/rust/</guid>
      <description>rust 学习资料 Rust 程序设计语言</description>
    </item>
    
    <item>
      <title></title>
      <link>https://weedge.github.io/todo/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://weedge.github.io/todo/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F/</guid>
      <description>单机 crontab golang. cron 库，timer库 时间轮 quartz 分布式schedulerX references: https://bbs.huaweicloud.com/blogs/329247 https://github.com/reugn/go-quartz https://www.aliyun.com/aliware/schedulerx</description>
    </item>
    
    <item>
      <title></title>
      <link>https://weedge.github.io/todo/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://weedge.github.io/todo/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>先定义一个key，用作于选举；定义key对应的value，每个节点定义的value需要能够唯一标识； 定义TTL周期，各节点客户端运行周期为T</description>
    </item>
    
    <item>
      <title></title>
      <link>https://weedge.github.io/todo/%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://weedge.github.io/todo/%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://weedge.github.io/todo/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://weedge.github.io/todo/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/</guid>
      <description>介绍 原理 开源实现方案 AST(go parser) yacc goyacc gruel SQL parser 业务规则引擎 总结 reference https://mp.weixin.qq.com/s/WC8LwTulWRkGnf5ec1SjTQ https://github.com/hyperjumptech/grule-rule-engine</description>
    </item>
    
  </channel>
</rss>
